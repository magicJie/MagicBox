<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy.Domain</name>
    </assembly>
    <members>
        <member name="T:Rafy.Domain.BinaryOperator">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.BinaryOperator.And">
            <summary>
            使用 And 连接。
            </summary>
        </member>
        <member name="F:Rafy.Domain.BinaryOperator.Or">
            <summary>
            使用 Or 连接。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortalLocation">
            <summary>
            数据访问层执行的地点
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortalLocation.Dynamic">
            <summary>
            根据 RafyEnvironment.Location 而判断是否在远程服务端执行。
            
            此种状态下，目前只有 RafyLocation.WPFClient 的位置时，才会选择在远程服务器执行。20130118
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortalLocation.Local">
            <summary>
            将在当前机器执行。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DistributionContext">
            <summary>
            分布式数据上下文。
            在客户端与服务端间提供范围性的数据传输。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DistributionContext.Clear">
            <summary>
            Clears all context collections.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DistributionContext.ClientContext">
            <summary>
            客户端提供的范围数据。
            </summary>
            <remarks>
            <para>
            此数据只会从客户端向服务端传输。
            </para>
            </remarks>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DistributionContext.GlobalContext">
            <summary>
            伴随每次传输的上下文数据。
            </summary>
            <remarks>
            <para>
            这些数据会伴随客户端到服务端、服务端到客户端的双向传输。
            </para>
            </remarks>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalException">
            <summary>
            数据访问异常
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalApi">
            <summary>
            数据门户。
            内部封装了对数据层的调用，如果是远程，则使用对应的代理来访问，这使得单机版、网络版的调用完全一致。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.Fetch(System.Type,System.Object,Rafy.Domain.DataPortalLocation)">
            <summary>
            使用门户查询
            </summary>
            <param name="objectType"></param>
            <param name="criteria"></param>
            <param name="loc">如果一个数据层方法需要在本地执行，应该在把本参数指明为 Local。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.Update(System.Object,Rafy.Domain.DataPortalLocation)">
            <summary>
            Called by the business object's Save() method to
            insert, update or delete an object in the database.
            </summary>
            <param name="obj">A reference to the business object to be updated.</param>
            <param name="loc">The loc.</param>
            <returns>
            A reference to the updated business object.
            </returns>
            <remarks>
            Note that this method returns a reference to the updated business object.
            If the server-side DataPortal is running remotely, this will be a new and
            different object from the original, and all object references MUST be updated
            to use this new object.
            </remarks>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalApi.CreateDataPortalContext">
            <summary>
            Creates the data portal context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DataPortal.IDataPortalProxy">
            <summary>
            客户端的代理
            
            它同样有 IDataPortalServer 的所有方法。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.IDataPortalServer">
            <summary>
            Interface implemented by server-side data portal
            components.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.IDataPortalServer.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.IDataPortalServer.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.ClientProxy">
            <summary>
            Implements a data portal proxy to relay data portal
            calls to a remote application server by using WCF.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.GetChannelFactory">
            <summary>
            Returns an instance of the channel factory
            used by GetProxy() to create the WCF proxy
            object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Called by <see cref="N:Rafy.Domain.DataPortal"/> to load an
            existing business object.
            </summary>
            <param name="objectType">Type of business object to create.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ClientProxy.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Called by <see cref="N:Rafy.Domain.DataPortal"/> to update a
            business object.
            </summary>
            <param name="obj">The business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Rafy.Domain.CommonQueryCriteria">
            <summary>
            通用查询条件。使用该条件，可以解决大部分的查询需求。
            用于表示使用 Or 连接多个组，每个组使用 And 进行连接查询的查询条件。
            
            <example>
            示例一，只有一个 And 组：
            var criteria = new CommonQueryCriteria
            {
                new PropertyMatch(Entity.TreeIndexProperty, "1."),
                new PropertyMatch(Entity.IdProperty, 1)
            };
            表示以下条件：
            TreeIndex.Contains("1.") And Id == 1
            
            示例二，多个 Or 组，使用 And 进行连接：
            var criteria = new CommonQueryCriteria
            {
                new PropertyMatchGroup
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "1."),
                    new PropertyMatch(Entity.TreePIdProperty, "1."),
                },
                new PropertyMatchGroup
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "2."),
                    new PropertyMatch(Entity.TreePIdProperty, "2."),};
                }
            };
            表示：
            (TreeIndex.StartWith("1.") || TreePId == "1." )
                And (TreeIndex.StartWith("2.") || TreePId == "2.")
            
            示例三，多个 And 组，使用 Or 进行连接：
            var criteria = new CommonQueryCriteria(BinaryOperator.Or)
            {
                new PropertyMatch(Entity.TreeIndexProperty, "1."),
                new PropertyMatch(Entity.IdProperty, 1),
                new PropertyMatchGroup(BinaryOperator.And)
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "1."),
                    new PropertyMatch(Entity.TreePIdProperty, "1."),
                },
                new PropertyMatchGroup(BinaryOperator.And)
                {
                    new PropertyMatch(Entity.TreeIndexProperty, PropertyOperator.StartWith, "2."),
                    new PropertyMatch(Entity.TreePIdProperty, "2."),};
                }
            };
            表示：
            TreeIndex.Contains("1.") Or Id == 1 
                Or TreeIndex.StartWith("1.") And TreePId == "1." 
                Or TreeIndex.StartWith("2.") And TreePId == "2."
            </example>
            </summary>
        </member>
        <member name="T:Rafy.Domain.Criteria">
            <summary>
            查询对象的基类
            
            如果不使用这个类做基类的查询条件类，也可以在 WPF 下运行正常。但是无法在 Web 下运行。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity">
            <summary>
            对象实体
            继承此类，可以获得以下功能：
            * 自动管理托管属性，可以通过属性 FindRepository().GetAvailableIndicators() 获取到所有的托管属性。
            * 默认实现了所有数据库访问的方法：CDUQ。
            * 提供了延迟加载子对象集合的方法。
            * 提供了创建延迟外键对象的方法。
            * 提供实体验证规则框架。
            * 提供树型实体支持。
            * 支持聚合对象的路由事件。
            
            
            
            树型实体功能说明：
            使用时，可调用 Meta.SupportTree 方法，来使得实体支持树型操作（即自关联）：
            * 数据表：
                * 数据库的表中添加 TreePId、TreeIndex 两个字段。
                * TreePId 生成可空的自关联外键。
                * TreeIndex 则是一个用于查询、排序的全功能字符串编码属性。（可通过 TreeIndexOption 来调整 TreeIndex 的生成规则。）
            * 树结构：
                * 使用 EntityList 来装载整棵树或部分树。
                * 树可以只有一个根节点，也可以有多个根节点。当是多个根节点时，也同样表示一棵树，所以它们的编码会是顺序的。
                * 列表中只能存储同级节点。
                * 每一个节点的 TreeChildren 列表存储自己的直接子节点。
                * 可以表达部分树的概念：即 EntityList 中的根节点并不一定完全、TreeChildren 集合也可以后期再懒加载。
            * 自动维护 TreeIndex。
                * 设计限制：一个树型实体类型对应的数据表中，只能存储一棵树。
                * 由于一个表中，只会存储一棵树，所以 TreeIndex 在一个表中将会是唯一的。
                    （开发人员在使用时，应该要小心，不要造成重复 TreeIndex 的根节点。子节点则使用 ResetTreeIndex 方法自动生成。）
                * 当在 EntityList、TreeChildren 集合中添加/删除节点时，系统会自动变化其后所有节点的 TreeIndex。
                * 调用 Entity.TreeChildren.ResetTreeIndex 可主动生成节点下子树的所有 TreeIndex。
            * 节点间的关系属性：
                * Entity.TreeChildren、Entity.TreeParent、Entity.TreePId、EntityList 将自动同步。
                * 一般情况下，都是从顶至下地遍历节点，即使用 TreeChildren 集合。较少的场景是先获取子节点，再由下至上遍历节点。
                    （在由下至上的场景下，如果使用 Child.Parent.Children 这样的语法，会导致 Child 并不在 Children 集合中。其本质与一对多关联的懒加载外键所遇的问题是一样的。）
            * 查询：
                * 所有树的查询，都将使用 TreeIndex 进行排序！其它排序规则无效。在使用 Sql 查询时，需要注意！
                * 如果查询出的树是加载完整的，数据层需要手动调用 MarkTreeFullLoaded 方法对结果列表进行标记。
                * 仓库自带的查询：
                    * GetAll。
                    * GetTreeRoots。
                    * GetByTreePId。
                    * GetByTreeParentIndex。
                    * LoadAllTreeParents、GetAllTreeParents。
            </summary>
            <threadsafety static="true" instance="false" />
        </member>
        <member name="T:Rafy.Domain.IDirtyAware">
            <summary>
            是否被修改的数据的接口
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDirtyAware.MarkSaved">
            <summary>
            标记为已经保存。IsDirty 为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IDirtyAware.IsDirty">
            <summary>
            当前的模型，是否是脏的。
            一个脏的对象，表示它的状态还没有保存起来。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IDomainComponent">
            <summary>
            实体模块组件（Entity Or EntityList）
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IDomainComponent.SetParent(Rafy.Domain.IDomainComponent)">
            <summary>
            设置父组件
            </summary>
            <param name="parent"></param>
        </member>
        <member name="P:Rafy.Domain.IDomainComponent.Parent">
            <summary>
            获取父组件
            
            列表的父组件是一个实体，而实体的父组件则是其所在的列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ITreeComponent">
            <summary>
            树结构中的组成元素。
            目前有三个实现该接口的类型：Entity、EntityList、EntityTreeChildren。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            递归对于整个树中的每一个节点都调用 action。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>第一个被调用 action 后返回 true 的节点。</returns>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.CountNodes">
            <summary>
            统计当前树中已经加载的节点的个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ITreeComponent.LoadAllNodes">
            <summary>
            递归加载所有树节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.IsFullLoaded">
            <summary>
            返回当前树是否已经加载完全。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.TreeComponentParent">
            <summary>
            此组件的上一级组件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ITreeComponent.ComponentType">
            <summary>
            当前组件的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity._flags">
            <summary>
            所有需要序列化的 bool 值，都可以存储在这里。减少传输数据量。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.MarkModifiedIfUnchanged">
            <summary>
            标记当前对象为需要保存的状态。
            
            只有实体的状态是 Unchanged 状态时（其它状态已经算是 Dirty 了），调用本方法才会把实体的状态改为 Modified。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.RevertDeletedStatus">
            <summary>
            清空实体的 IsDeleted 状态，使其还原到删除之前的状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.RevertNewStatus">
            <summary>
            清空实体的 IsNew 状态，使其还原到之前的状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.MarkSaved">
            <summary>
            递归将整个组合对象树都标记为未变更状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.LoadProperty(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            LoadProperty 以最快的方式直接加载值，不发生 PropertyChanged 事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.OnPropertyChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            这个事件不可以屏敝，否则状态会出问题。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.SyncIdToChildren">
            <summary>
            同步当前实体的 Id 到组合子实体及子节点中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLoadedChildren">
            <summary>
            获取所有已经加载的组合子的字段集合。
            
            返回的字段的值必须是 IEntityOrList 类型。
            子有可能是集合、也有可能只是一个单一的实体。只会是这两种情况。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.OnDeserialized(Rafy.Serialization.DesirializedArgs)">
            <summary>
            反序列化事件。
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.OnRoutedEvent(System.Object,Rafy.Domain.EntityRoutedEventArgs)">
            <summary>
            发生某个路由事件
            子类重写此方法以实现监听路由事件。
            
            注意：子类在重写时，调用基类方法就表示继续路由。一般在最后才调用基类的方法。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.RaiseRoutedEvent(Rafy.Domain.EntityRoutedEvent,System.Object)">
            <summary>
            触发某个路由事件
            </summary>
            <param name="indicator"></param>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.NotifyLoaded(Rafy.Domain.IRepository)">
            <summary>
            从 EntityRepository 中加载完成，并从中返回时，都会执行此方法。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.NotifyIfInRedundancyPath(Rafy.Domain.IProperty)">
            <summary>
            在属性变更时，如果该属性在某个冗余路径中，则应该使用冗余更新策略。
            </summary>
            <param name="property">变更的属性.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRedundancyValue(Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            根据冗余路径从当前对象开始搜索，获取真实的属性值。
            </summary>
            <param name="path"></param>
            <param name="from">
            本对象在路径中拥有的引用属性。
            在 D->C->B->A.Name 场景中，当前对象（this）可能是 C，那么 from 就是 C.BRefProperty.
            如果没有指定此属性，则表示从第一个开始。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLazyList``1(Rafy.Domain.ListProperty{``0})">
            <summary>
            延迟加载子对象的集合。
            </summary>
            <typeparam name="TCollection">子对象集合类型</typeparam>
            <param name="propertyInfo">当前属性的元信息</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLazyList(Rafy.ManagedProperty.IListProperty)">
            <summary>
            延迟加载子对象的集合。
            </summary>
            <param name="listProperty">The list property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.LoadLazyList(Rafy.ManagedProperty.IListProperty)">
            <summary>
            执行懒加载操作。
            </summary>
            <param name="listProperty">The list property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefNullableId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的可空类型返回值。
            </summary>
            <param name="property"></param>
            <returns>本方法为兼容值类型而使用。不论 Id 是值类型、还是引用类型，都可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefNullableId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的可空类型值。
            </summary>
            <param name="property"></param>
            <param name="value">本方法为兼容值类型而使用。不论外键是否为值类型，都可以传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefId(Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            获取指定引用 id 属性对应的 id 的返回值。
            </summary>
            <param name="property"></param>
            <returns>如果 Id 是值类型，则这个函数的返回值不会是 null；如果是引用类型，则可能返回 null。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefId(Rafy.ManagedProperty.IRefIdProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用 id 属性对应的 id 的值。
            
            在引用 id 变化时，会同步相应的引用实体属性。
            </summary>
            <param name="property"></param>
            <param name="value">外键如果是值类型，则不能传入 null。</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefEntity``1(Rafy.Domain.RefEntityProperty{``0})">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRefEntity(Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            以懒加载的方式获取某个引用实体的值。
            </summary>
            <param name="entityProperty"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity._settingEntity">
            <summary>
            这个值用于判断是否正在处于设置Entity的状态中。
            
            当在外界设置Entity属性时，如果获取Entity属性，不需要引起延迟加载。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.SetRefEntity(Rafy.ManagedProperty.IRefEntityProperty,Rafy.Domain.Entity,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定引用实体属性的值。
            在实体属性变化时，会同步相应的引用 Id 属性。
            </summary>
            <param name="entityProperty">The entity property.</param>
            <param name="value">The value.</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetProperty(Rafy.ManagedProperty.IManagedProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置指定属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLOBProperty``1(Rafy.Domain.LOBProperty{``0})">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetLOBProperty(Rafy.ManagedProperty.ILOBProperty)">
            <summary>
            获取指定的 LOB 属性的值。（懒加载）
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.SetLOBProperty(Rafy.ManagedProperty.ILOBProperty,System.Object,Rafy.ManagedProperty.ManagedPropertyChangedSource)">
            <summary>
            设置 LOB 属性的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.SetParentEntity(Rafy.Domain.Entity)">
            <summary>
            设置聚合关系中父对象的引用。
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.FindParentEntity">
            <summary>
            获取组合关系中父对象的引用。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.TreeIndexProperty">
            <summary>
            树型实体的树型索引编码属性。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.TreePIdProperty">
            <summary>
            树型父实体的 Id 属性
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.OnTreePIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            子类重写此方法实现 TreePId 属性变更逻辑。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Rafy.Domain.Entity.RemoveFromParentList(System.Boolean)">
            <summary>
            如果一个根节点变为非根节点，那么需要调用此方法，使它从 List 中移除。
            </summary>
            <param name="addIntoDeletedList">是否在删除完成后，添加到删除列表中。</param>
        </member>
        <member name="M:Rafy.Domain.Entity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.#cctor">
            <summary>
            Initializes the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.New(System.Type)">
            <summary>
            通过实体类型反射构造一个新的实体。
            
            此方法功能与构造函数一致，主要用于不能显式调用的场景下。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity._repository">
            <summary>
            实体对应的仓库。
            
            这个字段非常重要，这是因为实体很多逻辑的元数据信息，都存储在仓库中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.Entity.IdProperty">
            <summary>
            实体的标识属性。
            该属性由实体仓库内部自动编号。
            
            关于数据库映射：
            * Id 属性对应的列必须是自增长列。
            * 可以通过配置把 Id 属性对应的列更名。
            * Id 属性的默认数据库映射元数据是映射为主键的。这样在生成数据库时，引用本实体类型的其它的实体类型的引用属性都会添加相应的外键。
                如果本属性被配置为不是主键时，则不会在数据库层面生成外键引用，但是实体间的引用关系依然存在。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.CoerceGetId(System.Object)">
            <summary>
            强制获取 Id 逻辑。
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.OnIdChanging(Rafy.ManagedProperty.ManagedPropertyChangingEventArgs{System.Object})">
            <summary>
            Id 变更前事件。
            </summary>
            <param name="e">The decimal.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.OnIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            Id 变更后事件。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.FindPropertiesContainer">
            <summary>
            获取实体所对应的属性容器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.Clone(Rafy.Domain.Entity)">
            <summary>
            使用 <see cref="M:Rafy.Domain.CloneOptions.ReadSingleEntity"/> 来复制目标对象。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.Clone(Rafy.Domain.Entity,Rafy.Domain.CloneOptions)">
            <summary>
            使用指定的复制条件来复制源对象的值。
            </summary>
            <param name="source"></param>
            <param name="options"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.CloneCore(Rafy.Domain.Entity,Rafy.Domain.CloneOptions)">
            <summary>
            复制目标对象的所有字段。
            子类重写此方法额外做以下几件事：
            1. 如果有自定义字段，请在此方法中进行值拷贝。
            2. 如果有延迟加载的外键引用对象 ILazyEntityRef，请调用它的 Clone 方法进行拷贝。
            3. 如果使用了快速字段 FastField 来进行属性的缓存，请在基类完成 Clone 后，调用本类的 ResetFastField 方法来清空缓存。
            </summary>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <exception cref="T:System.ArgumentNullException">source
            or
            options</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.CopyProperty(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.CloneOptions)">
            <summary>
            复制指定的属性值。
            </summary>
            <param name="source">从这个对象拷贝</param>
            <param name="property">拷贝这个属性</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.GetChildProperty``1">
            <summary>
            根据孩子类型，直接获取孩子列表。
            </summary>
            <typeparam name="TChild"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Entity.PersistenceStatus">
            <summary>
            获取或设置实体当前的状态。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsDeleted">
            <summary>
            判断本对象是否已经被标记为删除。
            
            标记为删除的对象，在仓库中保存时，会被永久删除。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsNew">
            <summary>
            判断本对象是否是刚构造出来的。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsDirty">
            <summary>
            如果当前组合对象树中任意部分变更了，则返回 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.ParentList">
            <summary>
            实体所在的当前所在的列表对象。
            
            虽然一个实体可以存在于多个集合中，但是，它只保留一个主要集合的引用。
            <see cref="P:Rafy.Domain.EntityList.SupressSetItemParent"/>
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.Rafy#Domain#IDomainComponent#Parent">
            <summary>
            Provide access to the parent reference for use
            in child object code.
            </summary>
            <remarks>
            This value will be Nothing for root objects.
            </remarks>
        </member>
        <member name="P:Rafy.Domain.Entity.UpdateRedundancies">
            <summary>
            是否在更新本行数据时，同时更新所有依赖它的冗余属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.DebuggerDisplay">
            <summary>
            调试器显示文本。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsTreeLeafSure">
            <summary>
            表明当前的实体是否已经确定是一个叶子节点。
            注意，当本属性返回 false 时，并不表示本节点下还有节点。
            （这是因为如果还没有对本节点的子节点进行查询时，是不能确定它是否还有子节点的。）
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.SupportTree">
            <summary>
            是否为树型实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeIndex">
            <summary>
            树型实体的树型索引编码
            这个属性是实现树型实体的关键所在！
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.IsTreeParentLoaded">
            <summary>
            返回当前的 TreeParent 的值是否已经加载。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeParentData">
            <summary>
            封装 _treeParent 与 TreePId 之间的关系
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeParent">
            <summary>
            树中的父对象。
            <remarks>
            操作此属性，同样引起 TreeChildren、EntityList 的变化。
            同时，注意此属性并不是懒加载属性。
            </remarks>
            </summary>
            <value>
            The tree parent.
            </value>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeLevel">
            <summary>
            此节点在树中的级别。
            根节点是第一级。
            此级别是完全根据 <see cref="P:Rafy.Domain.Entity.TreeIndex"/> 计算出来的。
            
            如果此实体不是一个树实体，则返回 -1。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.TreeChildren">
            <summary>
            树中的子对象集合。
            <remarks>
            操作此属性，同样引起 TreeParent、EntityList 的变化。
            同时，注意此属性并不是懒加载属性。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.Id">
            <summary>
            实体的标识属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.HasId">
            <summary>
            判断本实体是否已经拥有了可用的 Id 值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.KeyProvider">
            <summary>
            实体标识属性的算法程序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity.EntityTreeChildren">
            <summary>
            防止重入、设置父子关系
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._autoIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从最上层组件中取值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._loaded">
            <summary>
            返回当前集合中的节点是否已经加载完成。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._nodes">
            <summary>
            当前已经加载的所有子节点。
            如果实体是叶子节点，那么它没有任何的子节点，这个列表将保持 null。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity.EntityTreeChildren._deleted">
            <summary>
            需要被删除的节点。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.#ctor">
            <summary>
            序列化使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MarkSaved">
            <summary>
            标记为已经保存。IsDirty 为 false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Load">
            <summary>
            加载当前集合中的节点元素。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.LoadAllNodes">
            <summary>
            递归加载所有树节点。
            </summary>
            <exception cref="T:System.InvalidProgramException">还没有存储到数据库中的节点，它的 IsFullLoaded 属性应该返回 true。</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MergeFullTree(System.Collections.Generic.List{Rafy.Domain.Entity})">
            <summary>
            把完整加载的子树，合并到当前树中。
            </summary>
            <param name="fullLoadedChildren">一个已经从数据库中完整加载的子树。该集合可以是 null。</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.IsAutoTreeIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从最上层组件中取值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.ResetTreeIndex(System.Int32)">
            <summary>
            根据当前对象的 TreeIndex 重设当前对象的整个树型子列表的 TreeIndex。
            </summary>
            <param name="from">从指定的索引开始重新整理</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.ResetTreeIndexSimple(System.Int32)">
            <summary>
            根据当前对象的 TreeIndex 重设当前对象树中子节点的 TreeIndex。
            </summary>
            <param name="from">From.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.CountNodes">
            <summary>
            统计当前树中已经加载的节点的个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            递归对于整个树中的每一个节点都调用 action。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>第一个被调用 action 后返回 true 的节点。</returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.IndexOf(Rafy.Domain.Entity)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Contains(Rafy.Domain.Entity)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.CopyTo(Rafy.Domain.Entity[],System.Int32)">
            <summary>
            Copies to specific array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Add(Rafy.Domain.Entity)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Insert(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.OnItemAdding(Rafy.Domain.Entity)">
            <summary>
            Called when [item adding].
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item;添加的元素不能为 null。</exception>
            <exception cref="T:System.InvalidProgramException">该节点在本集合中只能出现一次。</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.OnItemAdded(System.Int32,Rafy.Domain.Entity)">
            <summary>
            当集合中新加入一个全新的节点时，调用此方法。
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.DisconnectFromTreeParent(Rafy.Domain.Entity)">
            <summary>
            断开此节点与原有父节点之间的关系。
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.LoadAdd(Rafy.Domain.Entity)">
            <summary>
            从数据库中查询时，使用此方法来为集合快速添加元素。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.MarkLoaded">
            <summary>
            当从数据库中添加完毕时，使用此方法标记集合中的节点已经加载完全。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Remove(Rafy.Domain.Entity)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity.EntityTreeChildren.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsDirty">
            <summary>
            当前的模型，是否是脏的。
            一个脏的对象，表示它的状态还没有保存起来。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsLoaded">
            <summary>
            返回当前集合中的节点元素是否已经加载完成。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsFullLoaded">
            <summary>
            返回当前树是否已经加载完全。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.AutoIndexEnabled">
            <summary>
            是否自动在集体变更时计算 TreeIndex，默认：null。表示从上层列表中取值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Rafy.Domain.Entity.EntityTreeChildren.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index</exception>
        </member>
        <member name="T:Rafy.Domain.ILoadOptionsCriteria">
            <summary>
            一个可以进行数据加载定义的查询条件
            </summary>
        </member>
        <member name="P:Rafy.Domain.ILoadOptionsCriteria.PagingInfo">
            <summary>
            分页条件
            
            如果这个属性为 null 或者是<see cref="F:Rafy.PagingInfo.Empty"/>，表示不需要进行分页查询，直接返回整个结果集。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ILoadOptionsCriteria.EagerLoad">
            <summary>
            需要贪婪加载的属性列表。默认为 null 表示不进行贪婪加载。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Criteria.LocalFilter(Rafy.Domain.Entity)">
            <summary>
            如果本查询条件用于本地过滤查询时，子类需要实现此方法以指定过滤逻辑。
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Criteria.PagingInfo">
            <summary>
            如果该条件类正在使用分页查询，则这个对象描述分页的信息。
            
            如果这个属性为 null 或者是<see cref="F:Rafy.PagingInfo.Empty"/>，表示不需要进行分页查询，直接返回整个结果集。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Criteria.EagerLoad">
            <summary>
            需要贪婪加载的属性列表。默认为 null 表示不进行贪婪加载。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Criteria.CanLocalFilter">
            <summary>
            此属性指示当前查询条件类型是否用于本地过滤。
            
            默认是 false。
            </summary>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.CommonQueryCriteria"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.#ctor(Rafy.Domain.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.CommonQueryCriteria"/> class.
            </summary>
            <param name="concat">组与组之间的连接方式。</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.Domain.PropertyMatchGroup)">
            <summary>
            添加一个 And 连接的属性匹配组。
            </summary>
            <param name="group"></param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.Domain.PropertyMatch)">
            <summary>
            添加一个属性匹配条件为一个单独的组。
            </summary>
            <param name="propertyMatch">The property match.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。使用 Equal 进行对比。
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.Add(Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            添加一个属性匹配条件到最后一个组中。
            </summary>
            <param name="property">The property.</param>
            <param name="op">The op.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.AddToLastGroup(Rafy.Domain.PropertyMatch)">
            <summary>
            添加一个属性匹配条件到最后一个组中。
            如果此时不没有任何一个组，则会自动创建一个新组。
            </summary>
            <param name="propertyMatch">The property match.</param>
        </member>
        <member name="M:Rafy.Domain.CommonQueryCriteria.AddToGroup(Rafy.Domain.IPropertyMatchGroup,Rafy.Domain.PropertyMatch)">
            <summary>
            添加指定的属性匹配到组集合中。
            </summary>
            <param name="group"></param>
            <param name="item"></param>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.Groups">
            <summary>
            所有进行 Or 连接查询的组。每个组中的属性使用 And 进行连接。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.Concat">
            <summary>
            组与组之间的连接方式，默认使用 And 连接。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.IgnoreNull">
            <summary>
            如果值为空（包括空字符串），则忽略该对比项。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.OrderBy">
            <summary>
            根据该属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.OrderByAscending">
            <summary>
            是否正序排列。默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CommonQueryCriteria.GroupsCount">
            <summary>
            返回当前已经拥有的组的个数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyMatchGroup">
            <summary>
            一组属性匹配。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IPropertyMatchGroup">
            <summary>
            一组属性匹配。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Item(System.Int32)">
            <summary>
            获取指定索引的元素。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Count">
            <summary>
            有多个属性属性在其中。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IPropertyMatchGroup.Concat">
            <summary>
            属性条件之间的连接符，默认是 Or。
            </summary>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.PropertyMatchGroup"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.#ctor(Rafy.Domain.BinaryOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.PropertyMatchGroup"/> class.
            </summary>
            <param name="concat">属性条件之间的连接符。</param>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.Add(Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。使用 Equal 进行对比。
            </summary>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Rafy.Domain.PropertyMatchGroup.Add(Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            添加一个属性匹配条件到本组中。
            </summary>
            <param name="property">The property.</param>
            <param name="op">The op.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:Rafy.Domain.PropertyMatchGroup.Concat">
            <summary>
            属性条件之间的连接符，默认是 Or。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyMatch">
            <summary>
            属性的对比条件
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.PropertyName">
            <summary>
            属性名称。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.Operator">
            <summary>
            属性操作符。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMatch.Value">
            <summary>
            对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ODataFilterParser">
            <summary>
            用于解析类 OData 查询中的 filter 查询字符串。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ODataFilterParser.ReadPart">
            <summary>
            Part 有以下类型：括号、单词。
            </summary>
            <returns>
            空字符串：表示没有字符，无法读取。
            null：表示读取到空值。
            </returns>
        </member>
        <member name="T:Rafy.Domain.ODataQueryCriteria">
            <summary>
            <para>一个简单的支持 OData 协议的查询器。</para>
            <para>
            OData 语法简介：
            http://www.cnblogs.com/PurpleTide/archive/2010/12/21/1912299.html
            http://www.cnblogs.com/PurpleTide/archive/2010/12/21/1912395.html
            </para>
            <para>支持的操作符：</para>
            <para>只支持以下 OData 操作符：</para>
            <para>    $orderby、$filter、$inlinecount、$expand                                                                        </para>
            <para>新操作符：                                                                                                          </para>
            <para>    $pageNumber：从 1 开始的页码；                                                                                   </para>
            <para>    $pageSize：一页中的数据量。                                                                                      </para>
            <para>$expand 说明：                                                                                                      </para>
            <para>    除了可以需要贪婪加载的属性列表，还可以指定属性名为 TreeChildren，表示贪婪加载树节点的所有子节点。                    </para>
            <para>$filter 说明：                                                                                                      </para>
            <para>    * 支持的对比操作符：eq,ne,lt,le,gt,ge。                                                                          </para>
            <para>    * 支持字符串的模糊匹配操作符：contains、startsWith、endsWith、notContains、notStartsWith、notEndsWith。           </para>
            <para>    * 对时间类型进行比较时，直接使用字符串来表示时间值，如：CreateTime lt '2014-12-18 10:30'。                         </para>
            <para>    * Or 与 And 没有优先级之分。                                                                                     </para>
            <para>    * 可以使用空值 null。注意：null 表示空值，而 'null' 则表示字符串值。                                               </para>
            <para>    示例（详见源码单元测试）：                                                                                       </para>
            <para>        NickName eq 'huqf'                                                                                          </para>
            <para>        NickName eq 'huqf' and UserName eq 'huqf'                                                                   </para>
            <para>        NickName eq 'huqf' or UserName eq 'huqf' and ActiveTimeStamp lt '2014-12-17 19:00'                          </para>
            <para>        NickName eq 'huqf' and UserName eq 'huqf' or ActiveTimeStamp lt '2014-12-17 19:00'                          </para>
            <para>        ActiveTimeStamp lt '2014-12-17 19:00' and (NickName eq 'huqf' or UserName eq 'huqf')                        </para>
            <para>        (NickName eq 'huqf' or UserName eq 'huqf') and (Email eq 'email' or Present eq 'persent')                   </para>
            <para>        (NickName eq 'huqf' or UserName eq 'huqf')                                                                  </para>
            <para>        (NickName eq 'huqf')                                                                                        </para>
            <para>        (ActiveTimeStamp lt '2014-12-17 19:00') and (((NickName eq 'huqf' or UserName eq 'huqf')))                  </para>
            <para>        (NickName eq 'huqf' or (Email eq 'email' or Present eq 'persent')) and UserName eq 'huqf'                   </para>
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.OrderBy">
            <summary>
            根据该属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.Filter">
            <summary>
            过滤器。
            支持 OData 的六个操作符。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ODataQueryCriteria.Expand">
            <summary>
            EagerLoadProperties
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataQueryer">
            <summary>
            数据查询器
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.Init(Rafy.Domain.RepositoryDataProvider)">
            <summary>
            Initializes the specified data provider.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryList(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 linq 来查询实体。
            </summary>
            <param name="queryable">linq 查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryList(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryList(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.QueryListCore(Rafy.Domain.EntityQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnQuerying(Rafy.Domain.EntityQueryArgs)">
            <summary>
            所有使用 IQuery 的数据查询，在调用完应 queryBuilder 之后，都会执行此此方法。
            所以子类可以重写此方法实现统一的查询条件逻辑。
            （例如，对于映射同一张表的几个子类的查询，可以使用此方法统一对所有方法都过滤）。
            
            默认实现为：
            * 如果还没有进行排序，则进行默认的排序。
            * 如果单一参数实现了 IPagingCriteria 接口，则使用其中的分页信息进行分页。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadOnCompleted(Rafy.Domain.EntityQueryArgsBase,Rafy.Domain.EntityList,System.Int32)">
            <summary>
            在数据加载完成后，完成其它的贪婪加载。
            </summary>
            <param name="args"></param>
            <param name="entityList"></param>
            <param name="oldCount"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnDbLoaded(System.Collections.Generic.IList{Rafy.Domain.Entity},System.Int32)">
            <summary>
            通知所有的实体都已经被加载。
            </summary>
            <param name="allEntities"></param>
            <param name="fromIndex">从这个索引号开始的实体，才会被通知加载。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnDbLoaded(Rafy.Domain.Entity)">
            <summary>
            子类重写这个方法，用于在从数据库获取出来时，及时地加载一些额外的属性。
            
            注意：这个方法中只应该为一般属性计算值，不能有其它的数据访问。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.OnEntityQueryed(Rafy.Domain.EntityQueryArgsBase)">
            <summary>
            QueryList 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoad(Rafy.Domain.EntityList,System.Collections.Generic.IList{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对列表加载指定的贪婪属性。
            </summary>
            <param name="list"></param>
            <param name="eagerLoadProperties">所有需要贪婪加载的属性。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadChildren(Rafy.Domain.EntityList,Rafy.ManagedProperty.IListProperty,System.Collections.Generic.List{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对实体列表中每一个实体都贪婪加载出它的所有子实体。
            </summary>
            <param name="list"></param>
            <param name="listProperty">贪婪加载的列表子属性。</param>
            <param name="eagerLoadProperties">所有还需要贪婪加载的属性。</param>
        </member>
        <member name="M:Rafy.Domain.DataQueryer.EagerLoadRef(Rafy.Domain.EntityList,Rafy.ManagedProperty.IRefProperty,System.Collections.Generic.List{Rafy.ManagedProperty.ConcreteProperty})">
            <summary>
            对实体列表中每一个实体都贪婪加载出它的所有引用实体。
            </summary>
            <param name="list"></param>
            <param name="refProperty">贪婪加载的引用属性。</param>
            <param name="eagerLoadProperties">所有还需要贪婪加载的属性。</param>
        </member>
        <member name="P:Rafy.Domain.DataQueryer.Repo">
            <summary>
            对应的仓库
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataQueryer.DataProvider">
            <summary>
            对应的仓库数据提供程序
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataQueryer.CurrentIEQC">
            <summary>
            当前正在使用的查询参数
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataSaver">
            <summary>
            仓库数据提供程序中的数据保存器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Init(Rafy.Domain.RepositoryDataProvider)">
            <summary>
            Initializes the specified data provider.
            </summary>
            <param name="dataProvider">The data provider.</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.CreateRedundanciesUpdater">
            <summary>
            子类重写此方法实现冗余属性更新器的实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataSaver.UpdateRedundanciesIf(Rafy.Domain.Entity)">
            <summary>
            尝试更新冗余属性值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitComposition(Rafy.Domain.IDomainComponent)">
            <summary>
            数据门户调用本接口来保存数据。
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitChildrenComponent(Rafy.Domain.IDomainComponent,Rafy.Domain.Entity)">
            <summary>
            提交更新指定实体的组合子列表。
            </summary>
            <param name="child">The child.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitComponent(Rafy.Domain.IDomainComponent,System.Boolean)">
            <summary>
            完整提交指定的领域实体或领域实体列表。
            </summary>
            <param name="component"></param>
            <param name="markSaved">如果是最外层调用此方法，则在最终标记整个组件为保存完毕。</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTree(Rafy.Domain.Entity,System.Boolean)">
            <summary>
            提交以实体为根的一个树。
            </summary>
            <param name="tree"></param>
            <param name="markSaved"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeList(Rafy.Domain.EntityList,System.Boolean)">
            <summary>
            数据层 - 提交树节点
            </summary>
            <param name="list">The list.</param>
            <param name="markSaved">if set to <c>true</c> [mark saved].</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeDeletedItems(Rafy.Domain.ITreeComponent,System.Boolean)">
            <summary>
            删除整棵树中所有需要删除的节点。
            </summary>
            <param name="tree">The tree.</param>
            <param name="markSaved">if set to <c>true</c> [mark saved].</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitList(Rafy.Domain.EntityList,System.Boolean)">
            <summary>
            保存根对象列表
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitItem(Rafy.Domain.Entity,System.Boolean,System.Boolean)">
            <summary>
            根据实体状态来选择保存方法。
            </summary>
            <param name="entity">The entity.</param>
            <param name="markSaved">是否当前正在保存最外层组合根对象。如果是，则应该在保存完成后，把整个组合对象状态清空。</param>
            <param name="withTreeChildren">是否需要同时处理树的子节点。</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Submit(Rafy.Domain.SubmitArgs)">
            <summary>
            提交聚合对象到数据库中。
            
            子类重写此方法实现整个聚合对象保存到非关系型数据库的逻辑。
            如果只想重写单个对象的 CUD 逻辑，请重写 Insert、Update、Delete 方法。
            
            注意，不论是聚合父对象，还是聚合子对象，还是没有聚合子的对象，都会执行该方法。
            它与 Insert、Update、Delete 等方法的区别在于，重写此方法可以同时阻止对聚合子对象的默认保存逻辑。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Insert(Rafy.Domain.Entity)">
            <summary>
            插入这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Update(Rafy.Domain.Entity)">
            <summary>
            更新这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的更新逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitChildren(Rafy.Domain.Entity)">
            <summary>
            提交更新指定实体的组合子列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.SubmitTreeChildren(Rafy.Domain.Entity)">
            <summary>
            提交指定树节点的所有树子节点。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.Delete(Rafy.Domain.Entity)">
            <summary>
            从仓库中删除这个实体。
            
            子类重写此方法来实现非关系型数据库的删除逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteChildren(Rafy.Domain.Entity)">
            <summary>
            删除所有组合子。
            
            子类重写此方法来实现新的删除逻辑。
            注意，此方法只会在指定了 <see cref="P:Rafy.Domain.DataSaver.EnableDeletingChildrenInMemory"/> 时，才会调用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteTreeChildren(Rafy.Domain.Entity)">
            <summary>
            删除所有的子节点。
            
            子类重写此方法来实现新的删除逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteRef(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty,System.Type)">
            <summary>
            通过引用关系，来删除引用表中引用本对象的所有对象。
            
            一般情况下，子类可以在自己重写的 Submit 方法中调用此方法来先删除其它非级联有关系。
            
            注意，此方法暂时只会生成 SQL 删除引用表的对象，不主动处理更多的级联关系。（以后再实现。）
            </summary>
            <param name="entity">正在删除这个实体。</param>
            <param name="refProperty">这个引用属性表示了需要删除的另一个实体到 <c>entity</c> 的引用关系。</param>
            <param name="propertyOwner"><c>refProperty</c> 属性对应的拥有者实体类型。</param>
        </member>
        <member name="M:Rafy.Domain.DataSaver.DeleteRefCore(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            子类重写此方法，实现 <see cref="M:Rafy.Domain.DataSaver.DeleteRef(Rafy.Domain.Entity,Rafy.ManagedProperty.IRefProperty,System.Type)"/> 的具体逻辑。
            </summary>
            <param name="entity"></param>
            <param name="refProperty"></param>
        </member>
        <member name="P:Rafy.Domain.DataSaver.EnableDeletingChildrenInMemory">
            <summary>
            是否需要在内在中进行删除。
            
            SqlCe 的数据库，常常需要打开这个选项。
            因为 SqlCe 的级联删除在遇到组合子对象是 TreeEntity 时，会出现无法成功级联删除的问题。
            
            默认情况下，对象使用级联删除，所以不需要在内存中更新组合子，本值返回 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataSaver.DataProvider">
            <summary>
            对应的数据提供程序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RedundanciesUpdater">
            <summary>
            冗余属性更新器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancies(Rafy.Domain.Entity)">
            <summary>
            尝试更新冗余属性值。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByValue(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,System.Object)">
            <summary>
            值改变时引发的冗余值更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByIntermidateRef(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            冗余路径中非首位的引用属性变化时引发的冗余值更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="refChanged">该引用属性值变化了</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancyByRefValue(Rafy.Domain.Entity,Rafy.Domain.RedundantPath,Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            冗余路径中非首位的引用属的值作为值属性进行冗余，那么同样要进行值属性更新操作。
            </summary>
            <param name="entity">The entity.</param>
            <param name="path">The path.</param>
            <param name="refChanged">该引用属性值变化了</param>
        </member>
        <member name="M:Rafy.Domain.RedundanciesUpdater.UpdateRedundancy(Rafy.Domain.Entity,Rafy.ManagedProperty.ConcreteProperty,System.Object,System.Collections.Generic.IList{Rafy.ManagedProperty.ConcreteProperty},System.Object)">
            <summary>
            更新某个冗余属性
            </summary>
            <param name="entity">The entity.</param>
            <param name="redundancy">更新指定的冗余属性</param>
            <param name="newValue">冗余属性的新值</param>
            <param name="refPathes">从冗余属性声明类型开始的一个引用属性集合，
            将会为这个集合路径生成更新的 Where 条件。</param>
            <param name="lastRefId">引用路径中最后一个引用属性对应的值。这个值将会作为 Where 条件的值。</param>
        </member>
        <member name="T:Rafy.Domain.RepositoryDataProvider">
            <summary>
            通用的仓库数据层实现。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepositoryDataProvider">
            <summary>
            一个关系型数据库的数据提供器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.CountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="entityId">The entity identifier.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.SubmitComposition(Rafy.Domain.IDomainComponent)">
            <summary>
            数据门户调用本接口来保存数据。
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnDbLoaded(Rafy.Domain.Entity)">
            <summary>
            子类重写这个方法，用于在从数据库获取出来时，及时地加载一些额外的属性。
            
            注意：这个方法中只应该为一般属性计算值，不能有其它的数据访问。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnEntityQueryed(Rafy.Domain.EntityQueryArgsBase)">
            <summary>
            QueryList 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.OnQuerying(Rafy.Domain.EntityQueryArgs)">
            <summary>
            所有使用 IQuery 的数据查询，在调用完应 queryBuilder 之后，都会执行此此方法。
            所以子类可以重写此方法实现统一的查询条件逻辑。
            （例如，对于映射同一张表的几个子类的查询，可以使用此方法统一对所有方法都过滤）。
            
            默认实现为：
            * 如果还没有进行排序，则进行默认的排序。
            * 如果单一参数实现了 IPagingCriteria 接口，则使用其中的分页信息进行分页。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Submit(Rafy.Domain.SubmitArgs)">
            <summary>
            提交聚合对象到数据库中。
            
            子类重写此方法实现整个聚合对象保存到非关系型数据库的逻辑。
            如果只想重写单个对象的 CUD 逻辑，请重写 Insert、Update、Delete 方法。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Insert(Rafy.Domain.Entity)">
            <summary>
            插入这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Update(Rafy.Domain.Entity)">
            <summary>
            更新这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的更新逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.Delete(Rafy.Domain.Entity)">
            <summary>
            从仓库中删除这个实体。
            
            子类重写此方法来实现非关系型数据库的删除逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetAll 的数据层查询逻辑。
            </summary>
            <param name="paging">The paging information.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetTreeRoots 的数据层查询逻辑。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类可以重写这个方法，用于实现 GetById 的数据层查询逻辑。
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法，来实现自己的 GetByIdList 方法的数据层代码。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法，来实现自己的 GetByParentId 方法的数据层代码。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            子类重写此方法来实现通过父 Id 列表来获取所有组合子对象的列表
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过树型编码，找到所有对应的子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetAllTreeParents(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定树节点的所有父节点。
            </summary>
            <param name="treeIndex">Index of the tree.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 查询的数据层实现。
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 查询的数据层实现。
            </summary>
            <param name="criteria"></param>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.CountAll">
            <summary>
            子类重写此方法，来实现自己的 CountAll 方法的数据层代码。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            子类重写此方法，来实现自己的 GetEntityValue 方法的数据层代码。
            </summary>
            <param name="entityId"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryList(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 linq 来查询实体。
            </summary>
            <param name="queryable">linq 查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryList(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryList(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.RepositoryDataProvider.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.Repository">
            <summary>
            为此仓库提供数据。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.DataSaver">
            <summary>
            数据的保存器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.DataQueryer">
            <summary>
            数据的查询器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryDataProvider.ConnectionStringSettingName">
            <summary>
            数据库配置名称（每个库有一个唯一的配置名）
            
            默认使用 ConnectionStringNames.RafyPlugins 中配置的数据库。
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataProviderForAttribute">
            <summary>
            标记在某个数据提供器上，标识其为指定的仓库服务。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataProviderForAttribute.#ctor(System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="repositoryType">本数据层可以为指定的这个仓库及其子类服务。</param>
        </member>
        <member name="T:Rafy.Domain.IEntitySelectArgs">
            <summary>
            IDb Select 方法的参数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ISelectArgs">
            <summary>
            IDb 的查询参数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IQueryArgs">
            <summary>
            所有查询的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.IQueryArgs.FetchType">
            <summary>
            本次查询的类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ISelectArgs.EagerLoad(Rafy.Domain.IProperty,System.Type)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
            <param name="propertyOwner">这个属性的拥有者类型。</param>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.List">
            <summary>
            用于存储结果的实体列表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.FetchingFirst">
            <summary>
            是否只支持一个实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.PagingInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISelectArgs.MarkTreeFullLoaded">
            <summary>
            如果某次查询结果是一棵完整的子树，那么必须设置此属性为 true ，才可以把整个树标记为完整加载。
            否则，所有节点的子节点集合 TreeChildren 处在未加载完全的状态（IsLoaded = false）。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntitySelectArgs.Query">
            <summary>
            对应的查询条件定义。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityListExtension.ToDataTable(Rafy.Domain.EntityList)">
            <summary>
            把指定的实体列表中的数据完全转换到一个 DataTable 中。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.AggtDeserializer">
            <summary>
            实体反序列化器。
            序列化后的数据只是暴露了实体的数据，而忽略了实体的状态。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Serialization.Json.AggtDeserializer.PersistenceStatusProperty">
            <summary>
            实体的 Json 中可以使用这个属性来指定实体的状态。值是该枚举的名称。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.Deserialize(System.Type,System.String)">
            <summary>
            实体或实体列表的自定义反序列化方法。
            </summary>
            <param name="type">The type.</param>
            <param name="json">The json.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeEntity(System.Type,Newtonsoft.Json.Linq.JObject)">
            <summary>
            实体的自定义反序列化方法。
            </summary>
            <param name="type">The type.</param>
            <param name="jObject">The j object.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeEntity(System.Type,Newtonsoft.Json.Linq.JObject,System.Object)">
            <summary>
            实体的自定义反序列化方法。
            </summary>
            <param name="type">The type.</param>
            <param name="jObject">The j object.</param>
            <param name="id">实体的标识。如果已经在 jObject 中指定时，此参数可以传入 null。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeList(System.Type,Newtonsoft.Json.Linq.JArray)">
            <summary>
            反序列化指定的数组为一个实体的列表。
            </summary>
            <param name="listType"></param>
            <param name="jArray"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtDeserializer.DeserializeProperties(Newtonsoft.Json.Linq.JObject,Rafy.Domain.Entity)">
            <summary>
            遍历 JSON 对象的属性，并使用托管属性 API 来设置一般属性的值。
            </summary>
            <param name="jObject"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.Serialization.Json.AggtSerializer">
            <summary>
            聚合实体的序列化器。
            序列化后的数据只是暴露了实体的数据，而忽略了实体的状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent)">
            <summary>
            序列化指定的实体元素，并返回对应的 JSON。
            </summary>
            <param name="entityOrList"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent,System.IO.TextWriter)">
            <summary>
            序列化指定的实体元素到指定的 TextWriter 中。
            </summary>
            <param name="entityOrList"></param>
            <param name="textWriter"></param>
        </member>
        <member name="M:Rafy.Domain.Serialization.Json.AggtSerializer.Serialize(Rafy.Domain.IDomainComponent,Newtonsoft.Json.JsonTextWriter)">
            <summary>
            序列化指定的实体元素到指定的 JsonTextWriter 中。
            </summary>
            <param name="entityOrList">The entity or list.</param>
            <param name="jsonWriter">The json writer.</param>
            <exception cref="T:System.ArgumentNullException">jsonWriter</exception>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeAggt">
            <summary>
            是否需要同时序列化所有子对象。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.SerializeReference">
            <summary>
            是否需要同时序列化相关的引用属性。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.UseCamelProperty">
            <summary>
            是否使用舵峰式。
            默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.IgnoreDefault">
            <summary>
            是否需要在序列化时忽略默认值的属性。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Serialization.Json.AggtSerializer.Indent">
            <summary>
            是否采用缩进的格式。
            默认为 false。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ISqlSelectArgs">
            <summary>
            IDb Select 方法的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.EntityType">
            <summary>
            查询的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.FormattedSql">
            <summary>
            查询 Sql
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ISqlSelectArgs.Parameters">
            <summary>
            查询 Sql 对应的参数列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ITableQueryArgs">
            <summary>
            IDb QueryTable 方法的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.EntityType">
            <summary>
            查询的主实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.FormattedSql">
            <summary>
            查询 Sql
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.Parameters">
            <summary>
            查询 Sql 对应的参数列表。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.PagingInfo">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ITableQueryArgs.ResultTable">
            <summary>
            结果数据表。
            返回的结果不能为 null。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlQueryArgs">
            <summary>
            使用 Sql 查询的参数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityQueryArgsBase">
            <summary>
            所有实体查询的参数类型的基类。
            </summary>
        </member>
        <member name="T:Rafy.Domain.QueryArgs">
            <summary>
            所有查询的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.QueryArgs.FetchType">
            <summary>
            本次查询的类型。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityQueryArgsBase.MemoryList">
            <summary>
            如果是内存加载，则使用这个列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgsBase.EagerLoad(Rafy.Domain.IProperty,System.Type)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
            <param name="propertyOwner">这个属性的拥有者类型。</param>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgsBase.EagerLoad(Rafy.ManagedProperty.ConcreteProperty)">
            <summary>
            贪婪加载某个属性
            </summary>
            <param name="property">需要贪婪加载的托管属性。可以是一个引用属性，也可以是一个组合子属性。</param>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.FetchType">
            <summary>
            当前查询数据的类型。
            实体查询时，不会对应 <see cref="F:Rafy.Domain.FetchType.Table"/> 类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.EntityList">
            <summary>
            加载的列表对象
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.Filter">
            <summary>
            对查询出来的对象进行内存级别的过滤器，默认为 null。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.MarkTreeFullLoaded">
            <summary>
            如果某次查询结果是一棵完整的子树，那么必须设置此属性为 true ，才可以把整个树标记为完整加载。
            否则，所有节点的子节点集合 TreeChildren 处在未加载完全的状态（IsLoaded = false）。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgsBase.PagingInfo">
            <summary>
            要对结果进行分页的分页信息。
            默认为 PagingInfo.Empty。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor">
            <summary>
            空构造函数，配合属性使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor(Rafy.Data.FormattedSql)">
            <summary>
            通过一个 FormatSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlQueryArgs.#ctor(System.String,System.Object[])">
            <summary>
            通过标准跨库 Sql 及参数值来构造。
            </summary>
            <param name="formattedSql"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlQueryArgs.FormattedSql">
            <summary>
            格式化参数的标准 SQL。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlQueryArgs.Parameters">
            <summary>
            FormatSql 对应的参数值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataQueryer">
            <summary>
            关系数据库的查询器。
            对接 ORM 查询(<see cref="T:Rafy.Domain.ORM.RdbTable"/> )的实现。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryListCore(Rafy.Domain.EntityQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryListCore(Rafy.Domain.ORM.SqlQueryArgs,Rafy.Domain.EntityList)">
            <summary>
            子类重写此方法，查询从持久层加载列表的具体实现。
            </summary>
            <param name="args">The arguments.</param>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTableCore(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            子类重写此方法，查询从持久层加载表格的具体实现。
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryList(Rafy.Data.FormattedSql,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            使用 sql 语句来查询实体。
            </summary>
            <param name="sql">sql 语句，返回的结果集的字段，需要保证与属性映射的字段名相同。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryList(Rafy.Domain.ORM.SqlQueryArgs)">
            <summary>
            使用 sql 语句来查询实体。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            使用 sql 语句来查询数据表。
            </summary>
            <param name="sql">Sql 语句.</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.QueryTable(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            使用 sql 语句查询数据表。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataQueryer.OnTableQueryed(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            QueryTable 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:Rafy.Domain.EagerLoadOptions">
            <summary>
            贪婪加载选项。
            其中的每一个项都是一个需要即时加载属性。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWithTreeChildren">
            <summary>
            贪婪加载树实体的子节点。
            
            如果设置了此选项，那么会先加载所有的树子节点，然后再加载其它的贪婪属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IListProperty)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="childrenProperty">组合子属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IListProperty,System.Type)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="childrenProperty">组合子属性。</param>
            <param name="owner">该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。如果传入 null，则默认为属性的拥有类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="refProperty">引用实体属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EagerLoadOptions.LoadWith(Rafy.ManagedProperty.IRefEntityProperty,System.Type)">
            <summary>
            加载某个指定的组合子属性。
            </summary>
            <param name="refProperty">引用实体属性。</param>
            <param name="owner">该属性对应的具体类型。
            这个具体的类型必须是属性的拥有类型或者它的子类型。如果传入 null，则默认为属性的拥有类型。</param>
            <returns></returns>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityQueryArgs">
            <summary>
            使用 IQuery 进行查询的参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.EntityQueryArgs"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityQueryArgs.#ctor(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.EntityQueryArgs"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="P:Rafy.Domain.EntityQueryArgs.Query">
            <summary>
            对应的查询条件定义。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEQC">
            <summary>
            Internal Entity Query Criteria
            实体查询的参数。一个多参数查询的对象容器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityQueryCriteria">
            <summary>
            实体查询的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.MethodName">
            <summary>
            数据层查询方法。如果为空，表示使用约定的数据层方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.Parameters">
            <summary>
            所有的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEntityQueryCriteria.FetchType">
            <summary>
            获取数据的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.Parameters">
            <summary>
            所有的参数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.MethodName">
            <summary>
            数据层查询方法。如果为空，表示使用约定的数据层方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IEQC.FetchType">
            <summary>
            获取数据的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.FetchType">
            <summary>
            仓库返回数据的类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.FetchType.List">
            <summary>
            查询实体列表
            </summary>
        </member>
        <member name="F:Rafy.Domain.FetchType.First">
            <summary>
            查询单个实体
            </summary>
        </member>
        <member name="F:Rafy.Domain.FetchType.Count">
            <summary>
            查询数据条数统计
            </summary>
        </member>
        <member name="F:Rafy.Domain.FetchType.Table">
            <summary>
            查询数据表格
            </summary>
        </member>
        <member name="T:Rafy.Domain.DomainApp">
            <summary>
            领域模型启动环境
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.RepositoryCache">
            <summary>
            ServerCache，ClientCache 的基类。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindAll">
            <summary>
            使用Cache获取所有对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindByParent(Rafy.Domain.Entity)">
            <summary>
            使用Cache获取某个父对象下的所有子对象。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.FindById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.RepositoryCache.ConvertTable(System.Collections.Generic.IList{Rafy.Domain.Entity})">
            <summary>
            把一个 table 转换为新的实体列表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Caching.ServerCache">
            <summary>
            服务端使用的缓存。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Caching.ServerCache.ServerCacheAPI">
            <summary>
            应用层可以修改此属性来达到服务端缓存逻辑的变更。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ServerCache.IsEnabled">
            <summary>
            是否已经被启用。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.ClientCache">
            <summary>
            基本版本号更新方案的客户端缓存的 API
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.CacheRootEntity(Rafy.Domain.Entity)">
            <summary>
            直接设置根对象为缓存
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.FindById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            
            注意：
            根对象和子对象分别以不同的方式进行处理：
            根对象：使用单个根对象的内存缓存。
            子对象：在子对象的集合中查询。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.UpdateServerVersion">
            <summary>
            在某实体更新时，通知服务器更新对象整张表的版本号。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.UpdateServerVersion(Rafy.Domain.Entity)">
            <summary>
            在某实体更新时，通知服务器更新指定范围内对象的版本号。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.ClearOnClient">
            <summary>
            即刻清空该实体类型在客户端中的所有缓存对象。
            
            使用场景：
            在服务端的数据变化后，客户端缓存会定时更新，如果此时想用这个即时刷新客户端缓存，则可以调用此方法。
            
            注意，不要在服务端事务中调用此方法，这是因为其中会访问 SQLCE 数据库，这会导致事务提升为分布式事务。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.GetCachedTable">
            <summary>
            从缓存中获取整个列表。
            从缓存中读取指定实体类型的所有数据。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetAll 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.ClientCache.GetCachedTableByParent(Rafy.Domain.Entity)">
            <summary>
            从缓存中读取指定实体类型的某个父对象下的所有子对象。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetByParentId 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <param name="parent">The parent.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientCache.EntityType">
            <summary>
            本缓存对象对应的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientCache.Repository">
            <summary>
            对应的仓库对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientCache.ClientCacheDefinition">
            <summary>
            使用的客户端缓存方案
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.ClientCache.IsEnabled">
            <summary>
            指定当前的仓库是否支持Cache
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionSyncMgr">
            <summary>
            基于版本号同步方案的缓存 API
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.VersionSyncMgr.SetProvider(Rafy.Domain.Caching.IEntityListVersionRepository)">
            <summary>
            设置版本号同步方案的服务端提供程序。
            </summary>
            <param name="provider"></param>
        </member>
        <member name="P:Rafy.Domain.Caching.VersionSyncMgr.IsEnabled">
            <summary>
            是否启用了缓存同步方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.VersionSyncMgr.Repository">
            <summary>
            版本号同步方案的服务端提供程序。
            
            如果没有使用 SetProvider 来设置服务端提供程序，则基于版本号同步方案的缓存则不起作用。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRepository">
            <summary>
            仓库类
            用于某个实体类型及其实体列表类的管理
            注意：
            1. 其子类必须是线程安全的！
            2. 子类的构建函数建议使用protected，不要向外界暴露。使用者只能全部通过仓库工厂获取。
            </summary>
            <threadsafety static="true" instance="true" />
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryQueryBase">
            <summary>
            数据仓库查询基类。
            作为 EntityRepository、EntityRepositoryExt 两个类的基类，本类提取了所有数据访问的公共方法。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.CreateLinqQuery``1">
            <summary>
            创建一个实体 Linq 查询对象。
            只能在服务端调用此方法。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryList(System.Linq.IQueryable,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 linq 来查询实体。
            </summary>
            <param name="queryable">linq 查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.ConvertToQuery(System.Linq.IQueryable)">
            <summary>
            把一个 Linq 查询转换为 IQuery 查询。
            </summary>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryList(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions,System.Boolean)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="query">查询对象。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryList(Rafy.Domain.EntityQueryArgs)">
            <summary>
            通过 IQuery 对象来查询实体。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryQueryBase.QueryTable(Rafy.Domain.ORM.Query.IQuery,Rafy.PagingInfo)">
            <summary>
            通过 IQuery 对象来查询数据表。
            </summary>
            <param name="query">查询条件。</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryQueryBase.DataQueryer">
            <summary>
            本仓库使用的数据查询器。
            如果在仓库中直接实现数据层代码，则可以使用该查询器来查询数据。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepository">
            <summary>
            实体类模块使用的抽象的懒加载提供器。
            实体类只依赖这个抽象类，而不依赖具体的提供方案。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityInfoHost">
            <summary>
            EntityInfo的驻留器
            </summary>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.GetPropertiesInRedundancyPath">
            <summary>
            所有本实体中所有声明的冗余属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.GetChildProperties">
            <summary>
            所有本实体中所有声明的子属性。
            
            每一个子属性值可能是一个列表，也可能是一个单一实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IEntityInfoHost.FindParentPropertyInfo(System.Boolean)">
            <summary>
            找到本对象上层聚合父实体的实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <param name="throwOnNotFound">如果没有找到，是否需要抛出异常。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IEntityInfoHost.EntityMeta">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepository.New">
            <summary>
            创建一个全新的实体对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.NewList">
            <summary>
            创建一个全新的实体列表对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountByParentId(System.Object)">
            <summary>
            统计某个父对象下的子对象条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id获取指定的实体对象
            </summary>
            <param name="id">The identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            以分页的方式查询所有实体。
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList">The identifier list.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象的 Id 列表查询所有的实体。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找指定父索引的所有子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定节点的直接子节点。
            </summary>
            <param name="treePId"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            
            与 GetAll 的区别在于：只查询所有的根节点，不查询子节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="id"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepository.LoadAllTreeParents(Rafy.Domain.Entity)">
            <summary>
            递归加载某个节点的所有父节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Rafy.Domain.IRepository.Save(Rafy.Domain.IDomainComponent)">
            <summary>
            把这个组件中的所有改动保存到仓库中。
            
            <remarks>
            * 当本地保存时，方法返回的就是传入的实体。
            * 当客户端保存时，方法返回的是服务端保存后并向客户端回传的实体。
                此时，会对传入的实体或列表进行融合 Id 的操作。
                也就是说，在服务端生成的所有 Id 都会设置到参数实体中。
                而服务端设置其它的属性则会被忽略，如果想要使用其它的属性，则可以从返回值中获取。
                
            在客户端调用本方法保存实体的同时，服务端会把服务端保存完毕后的实体数据传输回客户端，这样才能保证客户端的实体能获取服务端生成的 Id 数据。
            如果希望不进行如何大数据量的传输，则尽量不要在客户端直接调用 Save 来进行实体的保存。（例如可以通过 Service 来定义数据的传输。）
            </remarks>
            </summary>
            <param name="component">需要保存的组件，可以是一个实体，也可以是一个实体列表。</param>
            <returns>
            返回在仓库中保存后的实体。
            </returns>
        </member>
        <member name="P:Rafy.Domain.IRepository.EntityType">
            <summary>
            该实体的仓库。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.SupportTree">
            <summary>
            对应的实体是否为树型实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.TreeIndexOption">
            <summary>
            如果本仓库对应的实体是一个树型实体，那么这个属性表示这个实体使用的树型编号方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.Extensions">
            <summary>
            所有可用的仓库扩展。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.ClientCache">
            <summary>
            基于版本号更新的客户端缓存 API。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.ServerCache">
            <summary>
            服务端内存缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.DataPortalLocation">
            <summary>
            是否声明本仓库为本地仓库（客户端只在客户端查询，服务端在服务端查询）
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepository.DataProvider">
            <summary>
            数据提供程序。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryInternal.GetLazyListByParent(Rafy.Domain.Entity)">
            <summary>
            通过父对象获取子对象的集合。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryInternal.ConvertRow(Rafy.Domain.Entity)">
            <summary>
            把行转换为对象
            
            （复制出一个新的实体对象）
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IRepositoryInternal.TableInfo">
            <summary>
            实体对应的数据表的信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.ITypeValidationsHost">
            <summary>
            类型规则的存储器。
            内部使用。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ITypeValidationsHost.Rules">
            <summary>
            类型规则集合
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ITypeValidationsHost.TypeRulesAdded">
            <summary>
            是否已经添加了所有的类型规则。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.Save(Rafy.Domain.IDomainComponent)">
            <summary>
            把这个组件中的所有改动保存到仓库中。
            
            <remarks>
            * 当本地保存时，方法返回的就是传入的实体。
            * 当客户端保存时，方法返回的是服务端保存后并向客户端回传的实体。
                此时，会对传入的实体或列表进行融合 Id 的操作。
                也就是说，在服务端生成的所有 Id 都会设置到参数实体中。
                而服务端设置其它的属性则会被忽略，如果想要使用其它的属性，则可以从返回值中获取。
                
            在客户端调用本方法保存实体的同时，服务端会把服务端保存完毕后的实体数据传输回客户端，这样才能保证客户端的实体能获取服务端生成的 Id 数据。
            如果希望不进行如何大数据量的传输，则尽量不要在客户端直接调用 Save 来进行实体的保存。（例如可以通过 Service 来定义数据的传输。）
            </remarks>
            </summary>
            <param name="component">需要保存的组件，可以是一个实体，也可以是一个实体列表。</param>
            <returns>
            返回在仓库中保存后的实体。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.SaveToPortal(Rafy.Domain.IDomainComponent)">
            <summary>
            通过门户来保存指定的实体类/列表。
            
            所有使用 Save 方法保存的实体，都会通过这个方法来选择是分布式保存、还是直接保存。
            此方法是仓库接口门户层的最后一个方法，之后将会在服务端（如果是分布式）发布 Submit 数据提交操作。
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.OnSaving(Rafy.Domain.IDomainComponent)">
            <summary>
            在使用 Save 方法保存实体数据时，进入数据门户前，Rafy 会调用此方法。
            <remarks>
            子类可重写此方法实现一些仓库保存前的检查。
            例如，一些仓库只允许在客户端进行调用时，可以在方法中判断，如果当前处在服务端，则抛出异常的逻辑。
            </remarks>
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.HasNewEntity(Rafy.Domain.Entity)">
            <summary>
            迭归检测一个组合实体中是否有新添加的实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类。
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有启用，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountByParentId(System.Object)">
            <summary>
            统计某个父对象下的子对象条数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体的个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找指定父索引号的节点下的所有子节点。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetAllTreeParents(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定索引对应的树节点的所有父节点。
            查询出的父节点同样以一个部分树的形式返回。
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetBy(System.Object)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetEntityValue(System.Object,System.String)">
            <summary>
            查询某个实体的某个属性的值。
            </summary>
            <param name="id"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheAll">
            <summary>
            使用Cache获取所有对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheByParent(Rafy.Domain.Entity)">
            <summary>
            使用Cache获取某个父对象下的所有子对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCacheById(System.Object)">
            <summary>
            使用Cache获取某个指定的对象。
            
            如果Cache中不存在时，则会主动查询数据层，并加入到缓存中。
            如果缓存没有被启用，则直接查询数据层，返回数据。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParent(Rafy.Domain.Entity)">
            <summary>
            获取指定父对象下的子对象集合。
            
            此方法会被组合父实体的 GetLazyList 方法的默认逻辑所调用。
            子类重写此方法来实现 GetLazyList 的默认查询逻辑。
            </summary>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有实体
            </summary>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 Id 查询某个实体
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetTreeRoots(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询所有的根节点。
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountTreeRoots">
            <summary>
            查询所有的根节点数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过 Id 列表查询实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList">The parent identifier list.</param>
            <param name="paging">The paging information.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.CommonQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(Rafy.Domain.ODataQueryCriteria)">
            <summary>
            通过 <see cref="T:Rafy.Domain.ODataQueryCriteria"/> 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetFirstBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询单一实体。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体个数。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountAll">
            <summary>
            统计仓库中所有的实体数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoCountByParentId(System.Object)">
            <summary>
            查询某个父对象下的子对象
            </summary>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetBy(System.Object)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            
            子类重写此方法来实现 <see cref="M:Rafy.Domain.EntityRepository.GetBy(System.Object)"/> 的接口层逻辑。
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DoGetEntityValue(System.Object,System.String)">
            <summary>
            通过某个具体的参数来调用数据层查询。
            子类重写此方法来实现 <see cref="M:Rafy.Domain.EntityRepository.GetEntityValue(System.Object,System.String)"/> 的接口层逻辑。
            </summary>
            <param name="id">The unique identifier.</param>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.PortalFetch(Rafy.Domain.IEQC)">
            <summary>
            来自数据门户的数据查询
            </summary>
            <param name="criteria">The criteria.</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException">
            </exception>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchBy(System.Object)">
            <summary>
            所有无法找到对应单一参数的查询，都会调用此方法。
            此方法会尝试使用仓库扩展类中编写的查询来响应本次查询。
            
            子类重写此方法来实现对所有未实现的查询。
            </summary>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchCount(System.Object[])">
            <summary>
            子类调用此方法来导向服务端执行仓库中对应参数的 FetchBy 数据层方法。
            </summary>
            <param name="parameters">对应数据层 FetchBy 方法的多个参数。</param>
            <returns>返回统计的行数。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchFirst(System.Object[])">
            <summary>
            子类在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回第一个实体。
            </summary>
            <param name="parameters">对应数据层 FetchBy 方法的多个参数。</param>
            <returns>返回第一个满足条件的实体。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchList(System.Object[])">
            <summary>
            子类在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回满足条件的实体列表。
            </summary>
            <param name="parameters">对应数据层 FetchBy 方法的多个参数。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchTable(System.Object[])">
            <summary>
            子类在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回满足条件的数据表格。
            </summary>
            <param name="parameters">对应数据层 FetchBy 方法的多个参数。</param>
            <returns>返回满足条件的数据表格。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchCount``1(System.Linq.Expressions.Expression{System.Func{``0,Rafy.Domain.EntityList}})">
            <summary>
            子类在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回统计的行数。
            </summary>
            <typeparam name="TRepository">子仓库的类型</typeparam>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回统计的行数。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchFirst``1(System.Linq.Expressions.Expression{System.Func{``0,Rafy.Domain.EntityList}})">
            <summary>
            子类在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回第一个满足条件的实体。
            </summary>
            <typeparam name="TRepository">子仓库的类型</typeparam>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回第一个满足条件的实体。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchList``1(System.Linq.Expressions.Expression{System.Func{``0,Rafy.Domain.EntityList}})">
            <summary>
            子类在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的实体列表。
            </summary>
            <typeparam name="TRepository">子仓库的类型</typeparam>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FetchTable``1(System.Linq.Expressions.Expression{System.Func{``0,Rafy.Data.LiteDataTable}})">
            <summary>
            子类在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的数据表格。
            </summary>
            <typeparam name="TRepository">子仓库的类型</typeparam>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的数据表格。</returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.OnFetching(Rafy.Domain.IEntityQueryCriteria)">
            <summary>
            在所有接口调用数据门户查询时调用此方法。
            <remarks>
            子类可重写此方法实现一些查询门户方法的检查。
            例如，一些仓库只允许在客户端进行调用时，可以在方法中判断，如果当前处在服务端，则抛出异常的逻辑。
            </remarks>
            </summary>
            <param name="criteria">当前查询的条件。</param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.ParseExpToIEQC(System.Linq.Expressions.LambdaExpression,Rafy.Domain.IEQC)">
            <summary>
            解析方法调用表达式，获取方法名及参数列表，存入到 IEQC 对象中。
            </summary>
            <param name="dataQueryExp"></param>
            <param name="ieqc"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.DisconnectFirst(Rafy.Domain.EntityList)">
            <summary>
            只返回列表中的唯一实体时，使用此方法。可防止 EntityList 内存泄漏。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NotifyLoaded(Rafy.Domain.Entity)">
            <summary>
            当一个实体最终要出仓库时，才调用此方法完成加载。
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NotifyLoaded(Rafy.Domain.EntityList)">
            <summary>
            当一个实体列表最终要出仓库时，才调用此方法完成加载。
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.Rafy#Domain#IRepositoryInternal#ConvertRow(Rafy.Domain.Entity)">
            <summary>
            把一行数据转换为一个实体。
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.New">
            <summary>
            创建一个新的实体。
            
            如果在已经获取 Repository 的场景下，使用本方法返回的实体会设置好内部的 Repository 属性，
            这会使得 FindRepository、GetRepository 方法更加快速。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.NewListOrderBy``1(System.Collections.Generic.IEnumerable{Rafy.Domain.Entity},System.Func{Rafy.Domain.Entity,``0})">
            <summary>
            把旧的实体列表中的实体按照一定的排序规则，排序后组装一个新的列表返回
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="oldList"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetConventionItem">
            <summary>
            获取当前的实体类型组合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetConventionItemCore">
            <summary>
            查询实体类型组合
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.LoadAllTreeParents(Rafy.Domain.Entity)">
            <summary>
            递归加载某个节点的所有父节点。
            使用此方法后，指定节点的父节点将被赋值到它的 TreeParent 属性上。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.FindParentPropertyInfo(System.Boolean)">
            <summary>
            找到实体中对应聚合关系中的父实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <param name="throwOnNotFound"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetPropertiesInRedundancyPath">
            <summary>
            所有本实体中所有声明的冗余属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.GetChildProperties">
            <summary>
            所有本实体中所有声明的子属性。
            
            每一个子属性值可能是一个列表，也可能是一个单一实体。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.EntityRepository._tableInfo">
            <summary>
            这个字段用于存储运行时解析出来的表的信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.CreateList(System.Collections.IEnumerable,System.Boolean)">
            <summary>
            创建一个列表。
            列表的数据来自于 srcList 中的所有项。
            </summary>
            <param name="srcList"></param>
            <param name="resetParent">此参数表示是否需要把 srcList 中的每一项的父列表对象都设置为返回的新列表。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepository.MergeIdRecur(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            把整个聚合对象的 Id 设置完整。
            </summary>
            <param name="oldEntity"></param>
            <param name="newEntity"></param>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.DataPortalLocation">
            <summary>
            获取或设置本仓库数据门户所在位置。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ClientCache">
            <summary>
            基于版本号更新的客户端缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ServerCache">
            <summary>
            服务端内存缓存 API
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.DataProvider">
            <summary>
            数据层提供程序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.ListType">
            <summary>
            被本仓库管理的列表类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.EntityType">
            <summary>
            被本仓库管理的实体类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.Extensions">
            <summary>
            本仓库对应所有插件的仓库扩展类实例。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.SupportTree">
            <summary>
            对应的实体是否为树型实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.TreeIndexOption">
            <summary>
            如果本仓库对应的实体是一个树型实体，那么这个属性表示这个实体使用的树型编号方案。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepository.EntityMeta">
            <summary>
            对应的实体元数据
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryExt">
            <summary>
            实体仓库类的扩展类。
            仓库扩展将是一个非常轻量级的对象。
            
            实体仓库扩展，支持在基类上进行扩展，这样所有的仓库子类都直接被扩展。
            
            如果本扩展是扩展在某个抽象的仓库基类上，那么系统会为被扩展的仓库基类的所有子类都建立一个本扩展的实例。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepositoryExt">
            <summary>
            仓库扩展接口
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepositoryExt.RepositoryType">
            <summary>
            对应的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRepositoryExt.Repository">
            <summary>
            被扩展的仓库
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRepositoryExt`1">
            <summary>
            泛型 API，简化上层使用。
            <see cref="T:Rafy.Domain.EntityRepositoryExt"/>
            </summary>
            <typeparam name="TRepository"></typeparam>
        </member>
        <member name="M:Rafy.Domain.IRepositoryExtInternal.IsExtending(Rafy.Domain.IRepository)">
            <summary>
            判断是否当前扩展是为指定的仓库编写的。
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryExtInternal.BindRepository(Rafy.Domain.EntityRepository)">
            <summary>
            使用一个具体的仓库子类来绑定这个对象
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryExt`1.FetchCount(`0,System.Object[])">
            <summary>
            子类调用此方法来导向服务端执行 EntityList 对应的数据层方法。
            </summary>
            <param name="repository">The repository.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            返回统计的行数。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryExt`1.FetchList(`0,System.Object[])">
            <summary>
            子类调用此方法来导向服务端执行 EntityList 对应的数据层方法。
            </summary>
            <param name="repository">The repository.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            返回加载好数据的实体列表。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityRepositoryExt`1.FetchFirst(`0,System.Object[])">
            <summary>
            子类调用此方法来导向服务端执行 EntityList 对应的数据层方法。
            </summary>
            <param name="repository">The repository.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            返回加载好数据的实体。
            </returns>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryExt`1.RepositoryType">
            <summary>
            被扩展的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRepositoryExt`1.Repository">
            <summary>
            被扩展的仓库对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryFactory">
            <summary>
            仓库工厂
            </summary>
        </member>
        <member name="M:Rafy.Domain.RepositoryFactory.Find(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFactory.Find``1">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RepositoryFactory.Concrete``1">
            <summary>
            用于查找指定类型的仓库。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataProvider">
            <summary>
            本类是为关系型数据库设计的数据提供器。
            IRepositoryDataProvider 则是更通用的接口。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IDbConnector">
            <summary>
            数据库连接器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDbConnector.CreateDbAccesser">
            <summary>
            临时创建一个IDb对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IDbConnector.DbSetting">
            <summary>
            数据库配置（每个库有一个唯一的配置名）
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.RdbDataProvider._ormTable">
            <summary>
            这个字段用于存储运行时解析出来的 ORM 信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.CreateDbAccesser">
            <summary>
            创建数据库操作对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.GetEntityValue(System.Object,System.String)">
            <summary>
            子类重写此方法，来实现自己的 GetEntityValue 方法的数据层代码。
            </summary>
            <param name="entityId"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.OnTableQueryed(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            QueryTable 方法完成后调用。
            
            子类可重写此方法来实现查询完成后的数据修整工具。
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryList(Rafy.Data.FormattedSql,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            使用 sql 语句来查询实体。
            </summary>
            <param name="sql">sql 语句，返回的结果集的字段，需要保证与属性映射的字段名相同。</param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryList(Rafy.Domain.ORM.SqlQueryArgs)">
            <summary>
            使用 sql 语句来查询实体。
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">使用内存过滤器的同时，不支持提供分页参数。</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryTable(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            使用 sql 语句来查询数据表。
            </summary>
            <param name="sql">Sql 语句.</param>
            <param name="paging">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.QueryTable(Rafy.Domain.ORM.TableQueryArgs)">
            <summary>
            使用 sql 语句查询数据表。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataProvider.Get(Rafy.Domain.IRepository)">
            <summary>
            强制转换指定仓库的数据提供程序为关系数据库的数据提供程。
            如果该仓库的 <see cref="P:Rafy.Domain.IRepository.DataProvider"/> 不是此类型的子类，则会抛出异常。
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DataSaver">
            <summary>
            数据的保存器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DataQueryer">
            <summary>
            数据的查询器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbDataProvider.DbSetting">
            <summary>
            数据库配置（每个库有一个唯一的配置名）
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbDataSaver">
            <summary>
            关系数据库使用的数据保存器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.Insert(Rafy.Domain.Entity)">
            <summary>
            插入这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的插入逻辑。
            重写时，注意：
            在插入完成后，把为实体新生成的 Id 赋值到实体中。否则组合子将插入失败。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.Update(Rafy.Domain.Entity)">
            <summary>
            更新这个实体到仓库中。
            
            子类重写此方法来实现非关系型数据库的更新逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbDataSaver.Delete(Rafy.Domain.Entity)">
            <summary>
            从仓库中删除这个实体。
            
            子类重写此方法来实现非关系型数据库的删除逻辑。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbRedundanciesUpdater.RefPropertyTable">
            <summary>
            某个引用属性与其所在类对应的表元数据
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.IPersistanceColumnInfo">
            <summary>
            数据表列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Table">
            <summary>
            对应的表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsIdentity">
            <summary>
            是否为自增长主键列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.IsPrimaryKey">
            <summary>
            是否主键列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceColumnInfo.Property">
            <summary>
            对应的托管属性
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.PersistanceTableInfoFactory.CreateTableInfo(Rafy.Domain.IRepositoryInternal)">
            <summary>
            为某个指定的仓库对象构造一个 DbTable
            </summary>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.IConnectionManager">
            <summary>
            一个连接的管理容器
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IConnectionManager.Connection">
            <summary>
            对应的连接对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IConnectionManager.DbSetting">
            <summary>
            对应的数据库配置信息
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TransactionDependentConnectionManager">
            <summary>
            依赖于 <see cref="T:Rafy.Data.LocalTransactionBlock"/> 的连接管理器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlServer.SqlBatchInsertHelper">
            <summary>
            如果使用 SqlServer 大量插入数据，可以使用本类来实现 Insert 方法。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.SqlBatchInsertHelper.BatchInsert(Rafy.Domain.Entity)">
            <summary>
            批量插入 Batch SQL
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.SqlBatchInsertHelper.AddBatch(Rafy.Domain.IRepositoryInternal,System.Collections.Generic.IList{Rafy.Domain.Entity})">
            <summary>
            批量插入大量实体
            </summary>
            <param name="repository">The repository.</param>
            <param name="entityList">The entity list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException">只支持 SqlServer</exception>
        </member>
        <member name="T:Rafy.Domain.SubmitArgs">
            <summary>
            提交参数。
            </summary>
        </member>
        <member name="M:Rafy.Domain.SubmitArgs.UpdateCurrent">
            <summary>
            标记本次操作，不但要保存所有的子实体，也要保存当前对象。
            场景：
            子类重写 Submit 方法后，在当前实体数据不脏、只更新组合子实体（ChildrenOnly）的模式下，
            如果修改了当前实体的状态，则需要使用这个方法把提交操作提升为保存整个组合对象（Update），这样当前实体才会被保存。
            
            注意，由于 SubmitArgs 是一个结构体，所以调用此方法只会更改当前对象的值。需要把这个改了值的对象传入基类的方法，才能真正地更新当前的实体对象。
            </summary>
            <exception cref="T:System.InvalidOperationException">只有在 ChildrenOnly 模式下，才可以调用此方法。</exception>
        </member>
        <member name="F:Rafy.Domain.SubmitArgs.WithTreeChildren">
            <summary>
            是否需要同时处理当前树的子节点。
            本属性只用于判断当前类型的树节点，不用于指定组合子中出现的其它树。
            </summary>
        </member>
        <member name="P:Rafy.Domain.SubmitArgs.Entity">
            <summary>
            被保存的领域实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.SubmitArgs.Action">
            <summary>
            保存的操作
            </summary>
        </member>
        <member name="T:Rafy.Domain.SubmitAction">
            <summary>
            提交数据的操作类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Update">
            <summary>
            更新实体
            将会执行 Update、SubmitChildren、SubmitTreeChildren。
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Insert">
            <summary>
            插入实体
            将会执行 Insert、SubmitChildren、SubmitTreeChildren。
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.Delete">
            <summary>
            删除实体
            将会执行 DeleteChildren、DeleteTreeChildren、Delete
            </summary>
        </member>
        <member name="F:Rafy.Domain.SubmitAction.ChildrenOnly">
            <summary>
            当前对象未变更，只提交其中的子对象。
            将会执行 UpdateChildren、UpdateTreeChildren。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TableQueryArgs">
            <summary>
            数据表查询的参数
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor">
            <summary>
            空构造函数，配合属性使用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Domain.ORM.ConditionalSql)">
            <summary>
            通过一个 ConditionalSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Data.FormattedSql)">
            <summary>
            通过一个 FormattedSql 来构造。
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(Rafy.Data.FormattedSql,Rafy.PagingInfo)">
            <summary>
            通过 FormattedSql 及分页信息来构造。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="pagingInfo">The paging information.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.TableQueryArgs.#ctor(System.String,System.Object[])">
            <summary>
            通过标准跨库 Sql 及参数值来构造。
            </summary>
            <param name="formattedSql"></param>
            <param name="parameters"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.FetchType">
            <summary>
            获取数据的类型。
            返回 <see cref="F:Rafy.Domain.FetchType.Table"/>
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.ResultTable">
            <summary>
            结果数据表
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.FormattedSql">
            <summary>
            格式化参数的标准 SQL。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.Parameters">
            <summary>
            FormatSql 对应的参数值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.TableQueryArgs.PagingInfo">
            <summary>
            要对结果进行分页的分页信息。
            默认为 PagingInfo.Empty。
            </summary>
        </member>
        <member name="T:Rafy.Domain.AutoCollectHelper">
            <summary>
            组合实体自动进行汇总数据的帮助类
            </summary>
        </member>
        <member name="M:Rafy.Domain.AutoCollectHelper.AutoCollectAsChanged(Rafy.Domain.Entity,Rafy.ManagedProperty.ManagedPropertyChangedEventArgs,System.Boolean,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            当实体的某个属性变更时，自动向父级实体的指定属性汇总。
            </summary>
            <param name="entity">实体对象</param>
            <param name="changedPropertyArgs">实体属性变更时的参数</param>
            <param name="toTreeParent">
            如果实体是树型对象，那么这个参数表明是否需要把值汇总到树中的父对象的同一个属性值上。
            </param>
            <param name="toParentProperty">
            指示需要把值汇总到组合父对象的哪一个属性上。这个属性只支持直接父对象，不支持多级父对象。
            </param>
            <threadsafety static="true" instance="true"/>
        </member>
        <member name="M:Rafy.Domain.Entity`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Entity"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Entity`1.OnIdChanged(Rafy.ManagedProperty.ManagedPropertyChangedEventArgs)">
            <summary>
            Id 变更后事件。
            </summary>
            <param name="e">The <see cref="T:Rafy.ManagedProperty.ManagedPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Rafy.Domain.Entity`1.GetProperty``1(Rafy.Domain.IProperty,Rafy.Domain.Entity{`0}.FastField{``0}@)">
            <summary>
            使用快速字段完成数据的读取。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="fastfield"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Entity`1.SetProperty``1(Rafy.Domain.IProperty,Rafy.Domain.Entity{`0}.FastField{``0}@,``0)">
            <summary>
            使用快速字段进行属性值的设置。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="fastfield"></param>
            <param name="value"></param>
        </member>
        <member name="P:Rafy.Domain.Entity`1.KeyProvider">
            <summary>
            实体标识属性的算法程序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Entity`1.Id">
            <summary>
            实体的标识属性。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Entity`1.FastField`1">
            <summary>
            属性使用的快速字段。
            
            设计此类的原因是CSLA属性的ReadProperty方法往往比较耗时，
            而且目前并不使用CSLA的属性权限等内容，
            所以可以使用这个类对一些被频繁调用的类进行缓存。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Rafy.Domain.Entity`1.FastField`1.Value">
            <summary>
            字段的值。 
            框架内部使用。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Entity`1.FastField`1.IsEmpty">
            <summary>
            Bool值表示当前的值是否还没有和属性值进行同步。
            框架内部使用。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntitySerializableFlags">
            <summary>
            前三位一起表示 PersistenceStatus，其它位表示一些 boolean 值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsModified">
            <summary>
            数据变更
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsNew">
            <summary>
            新对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.IsDeleted">
            <summary>
            标记删除
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.UpdateRedundancies">
            <summary>
            是否需要在数据层更新对应的冗余值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySerializableFlags.isTreeLeaf">
            <summary>
            是否为树的叶子节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.TreeComponentType">
            <summary>
            树中的所有组件。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.NodeList">
            <summary>
            最上层节点的列表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.Node">
            <summary>
            实体节点。
            </summary>
        </member>
        <member name="F:Rafy.Domain.TreeComponentType.TreeChildren">
            <summary>
            某个节点的所有子节点的集合。
            </summary>
        </member>
        <member name="F:Rafy.Domain.IntKeyProvider.Zero">
            <summary>
            先装箱完成
            </summary>
        </member>
        <member name="T:Rafy.Domain.KeyProviders">
            <summary>
            所有支持的主键的算法容器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.KeyProviders.Get(System.Type)">
            <summary>
            获取指定类型的主键算法。
            </summary>
            <param name="keyType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.StringEntity">
            <summary>
            以 string 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.StringEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.GuidEntity">
            <summary>
            以 Guid 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.GuidEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IntEntity">
            <summary>
            以 Int 作为主键的实体基类。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IntEntity.TreePId">
            <summary>
            树型父实体的 Id 属性
            
            默认使用存储于数据库中的字段，子类可以重写此属性以实现自定义的父子结构逻辑。
            </summary>
        </member>
        <member name="T:Rafy.Domain.LOBProperty`1">
            <summary>
            大对象属性
            <remarks>大对象属性的查询，是使用懒加载的方式。</remarks>
            </summary>
            <typeparam name="TPropertyType">属性的类型，只支持两种类型：String，Byte[]</typeparam>
        </member>
        <member name="T:Rafy.Domain.Property`1">
            <summary>
            Rafy 中所有实体的属性标记都使用这个类或者这个类的子类
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="P:Rafy.Domain.IPropertyInternal.InRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性路径
            </summary>
        </member>
        <member name="T:Rafy.Domain.IProperty">
            <summary>
            Rafy 实体框架中的托管属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.Category">
            <summary>
            Rafy 属性的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.IsRedundant">
            <summary>
            本托管属性是否是一个冗余属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.RedundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这里返回它对应的冗余路径。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.IsInRedundantPath">
            <summary>
            本托管属性是否在其它类上被声明了冗余属性的路径上
            </summary>
        </member>
        <member name="P:Rafy.Domain.IProperty.InRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性路径
            </summary>
        </member>
        <member name="F:Rafy.Domain.Property`1._redundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这个字段表示它的依赖路径
            </summary>
        </member>
        <member name="F:Rafy.Domain.Property`1._inRedundantPathes">
            <summary>
            其它类声明的本依赖属性的冗余属性
            </summary>
        </member>
        <member name="M:Rafy.Domain.Property`1.AsRedundantOf(Rafy.Domain.RedundantPath)">
            <summary>
            声明本属性为只读属性
            </summary>
            <param name="path">The path.</param>
            <exception cref="T:System.InvalidOperationException">
            属性已经注册完毕，不能修改！
            or
            冗余属性不能被其它冗余属性再次冗余，请直接写全冗余路径。
            </exception>
        </member>
        <member name="P:Rafy.Domain.Property`1.IsRedundant">
            <summary>
            本托管属性是否是一个冗余属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Property`1.RedundantPath">
            <summary>
            如果本托管属性是一个冗余属性，则这里返回它对应的冗余路径。
            </summary>
        </member>
        <member name="F:Rafy.Domain.LOBProperty`1._defaultLoader">
            <summary>
            为了提高性能，在这个属性上添加一个 IRepository 的缓存字段。
            </summary>
        </member>
        <member name="P:Rafy.Domain.LOBProperty`1.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyDefailtValues">
            <summary>
            Rafy 中属性的默认值。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultDateTime">
            <summary>
            应用层可以修改此属性来变更管理属性在注册时的默认值。
            
            默认是 2000-01-01，这个默认值可以插入到各个数据库中。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultLOBBinary">
            <summary>
            默认的 LOB 二进制流
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyDefailtValues.DefaultLOBString">
            <summary>
            默认的 LOB 字符串
            </summary>
        </member>
        <member name="M:Rafy.Domain.Serialization.SerializationEntityGraph.CreateSerializer(Rafy.Domain.Entity)">
            <summary>
            为指定的实体创建一个 DataContractSerializer。
            此过程会通过引用属性、列表属性，递归搜索实体类中所涉及到的其它所有实体类型，
            并传递给 DataContractSerializer 作为已知类型，否则，将无法序列化。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Serialization.SerializationEntityGraph.DeepSearch(Rafy.Domain.Entity)">
            <summary>
            通过引用属性、列表属性，递归搜索实体类中所涉及到的所有实体类型。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.TreeIndexHelper">
            <summary>
            目前本类只支持 Rdb。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TreeIndexHelper.ResetTreeIndex(Rafy.Domain.EntityRepository)">
            <summary>
            重新设置整个表的所有 TreeIndex。
            注意，此方法只保证生成的 TreeIndex 有正确的父子关系，同时顺序有可能被打乱。
            </summary>
            <param name="repository"></param>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationHelper">
            <summary>
            实体验证的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationHelper.Revalidate(Rafy.Domain.Entity,Rafy.Domain.IProperty[])">
            <summary>
            通知上层应用，需要重新验证某个指定的属性。
            一般在某个属性变更时调用此方法来通知另一属性需要进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="properties">The properties.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationHelper.Revalidate(Rafy.Domain.Entity,Rafy.Domain.IProperty)">
            <summary>
            通知上层应用，需要重新验证某个指定的属性。
            一般在某个属性变更时调用此方法来通知另一属性需要进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.PropertyFinder">
            <summary>
            访问一个属性的表达式，如 A.B.C.Name，并执行以下操作：
            * 对其中使用到的引用属性，在查询对象中添加表的 Join。
            * 返回找到的最终属性（如上面的 Name，或者是 A.Children 中的 Children），以及该属性对应的表对象。
            * 如果引用属性是可空引用属性，则同时还会生成该可空引用属性不为空的条件。（因为是对这个引用实体的属性进行判断，所以需要这个引用不能为空。）
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.Property">
            <summary>
            查找到的属性。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.PropertyOwnerTable">
            <summary>
            查找到的属性对应的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder.NullableRefConstraint">
            <summary>
            如果使用了引用属性，而且是可空的引用属性，那么添加这可空外键不为空的条件。
            这个属性将返回这个条件，外界使用时，需要主动将这个条件添加到查询中。
            
            例如：
            Book.Category.Name = 'a'
            应该转换为
            Book.CategoryId IS NOT NULL AND BookCategory.Name = 'a'；
            如果同时 <see cref="F:Rafy.Domain.ORM.Linq.PropertyFinder._reverseConstraint"/> 是 true，则应该转换为
            Book.CategoryId IS NULL OR BookCategory.Name != 'a'；
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder._lastJoinRefResult">
            <summary>
            关联操作的最后一个引用属性。
            用于在访问 A.B.C.Name 时记录 C；在访问完成后，值回归到 null。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.PropertyFinder._visitRefProperties">
            <summary>
            是否当前正在访问引用对象中的属性。
            主要用于错误提示，引用属性不能进行对比。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.PropertyFinder.VisitRefEntity(System.Linq.Expressions.Expression)">
            <summary>
            如果是 A.B.C.Name，则先读取 A.B.C
            </summary>
            <param name="exp"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.PropertyFinder.ReverseConstraint">
            <summary>
            是否需要在查询中反转所有条件。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.SubEntityQueryBuilder.Build(System.Linq.Expressions.Expression,Rafy.Domain.ORM.Query.IQuery,Rafy.Domain.ORM.Linq.PropertyFinder)">
            <summary>
            <![CDATA[
            将聚合子表达式解析为嵌入式子查询条件。
            例如：
            将表达式
            book.ChapterList.Cast<Chapter>().Any(c => c.Name == chapterName)
            转换为：
            f.Exists(f.Query(chapter,
                where: f.And(
                    f.Constraint(chapter.Column(Chapter.BookIdProperty), book.IdColumn),
                    f.Constraint(chapter.Column(Chapter.NameProperty), chapterName)
                )
            ))
            SQL：
            SELECT * FROM [Book] b
            WHERE EXISTS(
                SELECT * FROM [Chapter] c
                WHERE c.BookId = b.Id AND
                    c.Name = {0}
            )
            ]]>
            </summary>
            <param name="exp">需要解析的表达式</param>
            <param name="parentQuery"></param>
            <param name="propertyFinder">The property finder.</param>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryGenerationContext">
            <summary>
            生成 Sql 时的上下文对象。用于生成过程的上下文共享。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryGenerationContext.NextTableAlias">
            <summary>
            自动生成的 SQL 需要使用这个方法来统一生成表名。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.QueryGenerationContext.TablesCount">
            <summary>
            当前已经使用过 <see cref="M:Rafy.Domain.ORM.Query.QueryGenerationContext.NextTableAlias"/> 生成的表的个数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeTester">
            <summary>
            方便测试使用的测试器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryNodeTester.GenerateTestSql(Rafy.Domain.ORM.Query.IQueryNode)">
            <summary>
            生成 SqlServer 可用的测试 Sql 语句。
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.IPersistanceTableInfo">
            <summary>
            某个实体类型对应的‘逻辑表’的元数据。
            这个表并不一定就是数据库中的表，而可能是 MongoDb 中的表、一个 XML 文档等。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Class">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.PKColumn">
            <summary>
            主键列（每个表肯定有一个主键列）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IPersistanceTableInfo.Columns">
            <summary>
            所有的列
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Class">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.PKColumn">
            <summary>
            主键列（每个表肯定有一个主键列）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.PersistanceTableInfo.Columns">
            <summary>
            所有的列
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainHelper.IsNotEmpty(System.Object)">
            <summary>
            判断某个值是否非空。
            
            如果是字符串，则检测它是否为非空字符。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.Validation.NotUsedByReferenceRule">
            <summary>
            限制实体的键没有被指定的引用属性对应的表所使用的规则。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationRule">
            <summary>
            验证规则对象
            
            注意，验证规则的对象对于一个实体来说，是单例的。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Validate(Rafy.Domain.Entity,Rafy.MetaModel.RuleArgs)">
            <summary>
            子类重写此方法实现验证规则逻辑。
            当验证出错时，需要设置 e.BrokenDescription。
            </summary>
            <param name="entity"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Display(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRule.Display(System.Type)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取实体对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[实体类型名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRule.ConnectToDataSource">
            <summary>
            子类重写此属性指示本规则中是否需要连接数据仓库。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.NotUsedByReferenceRule.#ctor(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Domain.Validation.NotUsedByReferenceRule"/> class.
            </summary>
            <param name="refProperty">可以是引用属性，也可以是冗余属性。.</param>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.ConnectToDataSource">
            <summary>
            本规则需要连接数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.ReferenceProperty">
            <summary>
            需要检查的
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotUsedByReferenceRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            int 参数表示已经被使用的次数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.HandlerRule">
            <summary>
            一个使用指定代理方法的验证器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.NumberRangeRule">
            <summary>
            限制某数值类型属性的数据范围的规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.Min">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.Max">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NumberRangeRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.PositiveNumberRule">
            <summary>
            限制某数值类型属性正数限制规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.PositiveNumberRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.NotDuplicateRule">
            <summary>
            限制实体的某一个或几个属性的值在数据库中不重复的规则。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.Validate(Rafy.Domain.Entity,Rafy.MetaModel.RuleArgs)">
            <summary>
            限制实体的某一个或几个属性的值在数据库中不存在的规则。
            </summary>
            <param name="entity"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.InitProperties(Rafy.MetaModel.RuleArgs)">
            <summary>
            获取传入的要验证的属性列表
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Domain.Validation.NotDuplicateRule.AddToCriteria(Rafy.Domain.Entity,Rafy.Domain.CommonQueryCriteria)">
            <summary>
            根据传入的属性列表，来构造 CommonQueryCriteria
            返回是否有非空属性需要验证。
            </summary>
            <param name="entity"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.ConnectToDataSource">
            <summary>
            本规则需要连接数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.Properties">
            <summary>
            可以设置多个属性进行验证。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.NotDuplicateRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RegexMatchRule">
            <summary>
            限制某数值类型属性最小的数据限制规则。
            注意：此规则不对空字符串作判断。如果需要值非空的约束，请使用 RequiredRule。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.Regex">
            <summary>
            最小值。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.RegexLabel">
            <summary>
            正则的名称。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RegexMatchRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RequiredRule">
            <summary>
            约束某属性不能为空值（null）。
            字符串还应该不能为空字符串。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.RequiredRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.StringLengthRangeRule">
            <summary>
            限制某字符串属性的字符长度范围的规则。
            
            如果字段串属性的值是 null 或空字段串，则验证规则会失效。此时可使用 <see cref="T:Rafy.Domain.Validation.RequiredRule"/> 类型单独验证。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.Min">
            <summary>
            最小长度。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.Max">
            <summary>
            最大长度。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.StringLengthRangeRule.MessageBuilder">
            <summary>
            设置此属性可以自定义要显示的错误信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ValidationDeclarer">
            <summary>
            用于声明验证规则的类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ValidationDeclarer.#ctor(System.Type)">
            <summary>
            获取指定实体类型对应的验证规则声明器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ValidationDeclarer.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ValidationDeclarer.RulesCount">
            <summary>
            获取当前已经声明的规则的个数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.Validator">
            <summary>
            规则验证器
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.Validator.DefaultActions">
            <summary>
            默认的验证行为：ValidatorActions.ValidateChildren | ValidatorActions.StopOnFirstBroken。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.Validation.ValidatorActions)">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="actions">验证时的行为。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.Validation.ValidatorActions,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查某个属性是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="property">托管属性</param>
            <param name="actions">验证时的行为。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target
            or
            property</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity)">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.Domain.Validation.ValidatorActions)">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="actions">验证时的行为。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="M:Rafy.Domain.Validation.Validator.Validate(Rafy.Domain.Entity,Rafy.Domain.Validation.ValidatorActions,System.Func{Rafy.MetaModel.IRule,System.Boolean})">
            <summary>
            检查整个实体对象是否满足规则
            </summary>
            <param name="target">要验证的实体。</param>
            <param name="actions">验证时的行为。</param>
            <param name="ruleFilter">要验证的规则的过滤器。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">target</exception>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidatorActions">
            <summary>
            验证时的行为
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.None">
            <summary>
            默认没有任何行为。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.ValidateChildren">
            <summary>
            验证整个实体时，是否需要验证该实体的组合子实体。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.IgnoreDataSourceValidations">
            <summary>
            是否需要验证连接数据源的验证规则。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Validation.ValidatorActions.StopOnFirstBroken">
            <summary>
            是否在第一规则被破坏时，即刻停止。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyOperator">
            <summary>
            属性的对比操作符
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityListEnumerator`1">
            <summary>
            实体列表的强类型遍历器。
            </summary>
            <typeparam name="TEntity">要保证 TEntity 是 Entity 的子类，否则会转换出错。</typeparam>
        </member>
        <member name="T:Rafy.Domain.PropertyCategory">
            <summary>
            Rafy 中可用的属性类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Normal">
            <summary>
            一般属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.ReferenceId">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.ReferenceEntity">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.List">
            <summary>
            列表属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Readonly">
            <summary>
            只读属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.Redundancy">
            <summary>
            冗余属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.PropertyCategory.LOB">
            <summary>
            LOB 属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.RefIdProperty`1">
            <summary>
            引用实体属性的 Id 标记
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRefIdPropertyInternal.RefEntityProperty">
            <summary>
            如果当前属性是一个引用 Id 属性，则这个属性值返回对应的引用实体属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.ReferenceType">
            <summary>
            实体引用的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.Nullable">
            <summary>
            该引用属性是否可空
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.RefEntityProperty">
            <summary>
            返回对应的引用实体属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.RefEntityType">
            <summary>
            引用实体的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefIdProperty`1.KeyProvider">
            <summary>
            引用的实体的主键的算法程序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RegisterRefIdArgs`1">
            <summary>
            声明引用 Id 属性的参数对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.PropertyMetadata`1">
            <summary>
            Rafy 中的属性元数据都从这个类继承下来。
            </summary>
            <typeparam name="TPropertyType"></typeparam>
        </member>
        <member name="P:Rafy.Domain.PropertyMetadata`1.DateTimePart">
            <summary>
            如果当前是一个时间类型，则这个属性表示该时间类型正在被使用的部分。
            </summary>
        </member>
        <member name="P:Rafy.Domain.PropertyMetadata`1.AffectStatus">
            <summary>
            此属性的变更，是否会造成实体状态的变更（变脏）。
            
            默认为真。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefIdArgs`1.ReferenceType">
            <summary>
            引用属性的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateSQL">
            <summary>
            聚合SQL的简单API。
            “Facade”
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL``1(System.Action{Rafy.Domain.ORM.PropertySelector{``0}},System.Object)">
            <summary>
            生成指定加载选项的聚合SQL。
            此方法使用父对象的Id作为查询条件。
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="loader">The loader.</param>
            <param name="parentId">The parent unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL``1(System.Action{Rafy.Domain.ORM.PropertySelector{``0}},System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="loader">The loader.</param>
            <param name="whereCondition">简单的过滤条件，如：
            PBS.PBSTypeId = '...'</param>
            <param name="joinCondition">The join condition.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.BeginLoadOptions``1">
            <summary>
            开始为TEntity进行加载。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL(Rafy.Domain.ORM.LoadOptionSelector,System.Object)">
            <summary>
            生成指定加载选项的聚合SQL。
            
            此方法使用父对象的Id作为查询条件。
            </summary>
            <param name="loadOptions"></param>
            <param name="parentId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.GenerateQuerySQL(Rafy.Domain.ORM.LoadOptionSelector,System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <param name="loadOptions">The load options.</param>
            <param name="whereCondition">简单的过滤条件，如：
            PBS.PBSTypeId = '...'</param>
            <param name="joinCondition">The join condition.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQL.LoadEntities(Rafy.Domain.EntityList,System.String,Rafy.Domain.ORM.LoadOptionSelector)">
            <summary>
            通过聚合SQL加载整个聚合对象列表。
            </summary>
            <param name="list">The list.</param>
            <param name="sql">聚合SQL</param>
            <param name="loadOptions">聚合加载选项</param>
        </member>
        <member name="T:Rafy.Domain.ORM.LoadOptionSelector">
            <summary>
            存储了加载的项
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.PropertySelector`1">
            <summary>
            属性选择器
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.ORM.PropertySelector`1.LoadFK``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            需要同时加载外键
            </summary>
            <typeparam name="TFKEntity"></typeparam>
            <param name="fkEntityExp">
            需要加载的外键实体属性表达式
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.PropertySelector`1.LoadChildren``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            需要同时加载孩子
            </summary>
            <typeparam name="TChildren"></typeparam>
            <param name="propExp">
            需要加载的孩子属性表达式
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.IDataTable">
            <summary>
            一个存储表格数据的对象
            
            注意：
            以此为参数的方法只能在服务端执行
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IDataTable.Count">
            <summary>
            行数
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.IDataTable.Item(System.Int32)">
            <summary>
            获取指定的行。
            </summary>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SubTable">
            <summary>
            这是个子表格。
            
            它表示的是某一表格中的一些指定的行。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SubTable.#ctor(Rafy.Domain.ORM.IDataTable,System.Int32,System.Int32)">
            <summary>
            构造一个指定table的子表。
            </summary>
            <param name="table"></param>
            <param name="startRow">这个表在table中的开始行。</param>
            <param name="endRow">这个表在table中的结束行。</param>
        </member>
        <member name="P:Rafy.Domain.ORM.SubTable.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="rowIndex">
            这里的索引其实是相对startRow的偏移量。
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ListProperty`1">
            <summary>
            列表属性
            </summary>
            <typeparam name="TEntityList"></typeparam>
        </member>
        <member name="P:Rafy.Domain.ListProperty`1.ListEntityType">
            <summary>
            列表对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListProperty`1.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.IListPropertyMetadata">
            <summary>
            引用属性元数据
            </summary>
        </member>
        <member name="P:Rafy.Domain.IListPropertyMetadata.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListPropertyMetadata`1">
            <summary>
            泛型版本的引用属性元数据
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
        </member>
        <member name="M:Rafy.Domain.ListPropertyMetadata`1.#ctor">
            <summary>
            for merge
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListPropertyMetadata`1.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListPropertyMeta">
            <summary>
            列表属性注册参数
            </summary>
            名称取为 Meta，主要是使用者可以更好地理解为元数据。
        </member>
        <member name="P:Rafy.Domain.ListPropertyMeta.DataProvider">
            <summary>
            自定义列表数据提供器
            </summary>
        </member>
        <member name="P:Rafy.Domain.ListPropertyMeta.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ListLoaderProvider">
            <summary>
            列表数据提供程序
            </summary>
            <param name="owner">The owner.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RafyPropertyDescriptor">
            <summary>
            Rafy 属性描述器
            
            Rafy 引用属性和子属性的值的获取与设置，不是直接返回 GetProperty 的内部原生属性值，
            而是通过 GetLazyRef().NullableId、GetLazyList 返回值。
            
            同时，由于只能是界面使用 RafyPropertyDescriptor 这个类型来操作属性值，
            所以还需要把枚举值转换为字符串。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RafyPropertyDescriptorFactory">
            <summary>
            Rafy 属性描述器工厂
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbAccesserFactory">
            <summary>
            使用此工厂来创建一个被管理连接的数据库访问器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbAccesserFactory.Create(System.String)">
            <summary>
            根据配置文件，构造一个数据库访问器。
            </summary>
            <param name="dbSettingName">数据库配置的名称。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbAccesserFactory.Create(Rafy.Data.DbSetting)">
            <summary>
            根据配置文件，构造一个数据库访问器。
            </summary>
            <param name="dbSetting">数据库配置。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbTable">
            <summary>
            数据表的 ORM 运行时对象
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            判断指定的分页操作，支持在哪个层面进行分页。
            </summary>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryList(Rafy.Data.IDbAccesser,Rafy.Domain.IEntitySelectArgs)">
            <summary>
            使用 IQuery 条件进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AutoSelectionForLOB(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            如果没有选择项，而且有 LOB 字段时，Selection 需要被自动生成，则按生成的属性的顺序来生成列的获取。
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryList(Rafy.Data.IDbAccesser,Rafy.Domain.ORM.ISqlSelectArgs)">
            <summary>
            使用 Sql 进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.QueryTable(Rafy.Data.IDbAccesser,Rafy.Domain.ORM.ITableQueryArgs)">
            <summary>
            使用 Sql 进行查询。
            分页默认实现为使用内存进行分页。
            </summary>
            <param name="dba">The dba.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.FillDataIntoList(System.Data.IDataReader,Rafy.Domain.ORM.RdbTable.ReadDataType,System.Collections.Generic.IList{Rafy.Domain.Entity},System.Boolean,Rafy.PagingInfo,System.Boolean)">
            <summary>
            在内存中对 IDataReader 进行读取。
            注意！！！
            此方法中会释放 Reader。外层不能再用 Using。
            </summary>
            <param name="reader">表格类数据。</param>
            <param name="readType">是否索引还是名称去读取 IDataReader。</param>
            <param name="list">需要把读取的实体，加入到这个列表中。</param>
            <param name="fetchingFirst">是否只读取一条数据即返回。</param>
            <param name="pagingInfo">如果不是只取一行数据，则这个参数表示列表内存分页的信息。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.FillTreeIntoList(System.Data.IDataReader,Rafy.Domain.ORM.RdbTable.ReadDataType,System.Collections.Generic.IList{Rafy.Domain.Entity},System.Boolean,Rafy.PagingInfo)">
            <summary>
            在内存中对 IDataReader 进行读取，并以树的方式进行节点的加载。
            </summary>
            <param name="reader">表格类数据。</param>
            <param name="readType">是否索引还是名称去读取 IDataReader。</param>
            <param name="list">需要把读取的实体中的第一级的节点，加入到这个列表中。</param>
            <param name="markTreeFullLoaded">如果某次查询结果是一棵完整的子树，那么必须设置此参数为 true ，才可以把整个树标记为完整加载。</param>
            <param name="pagingInfo">对根节点进行分页的信息。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.CreateByIndex(System.Data.IDataReader)">
            <summary>
            把某一行翻译成一个实体对象
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.TryReplaceByContext(Rafy.Domain.IEntity)">
            <summary>
            如果目前使用了 EntityContext，则应该使用内存中已经存在的对象。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.NotifyLoaded(Rafy.Domain.IEntity)">
            <summary>
            如果目前使用了 EntityContext，则应该把加载好的对象都存储在内存中。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.Translate(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            把属性名转换为列名
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.Translate(System.String)">
            <summary>
            把属性名转换为列名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AppendQuote(System.IO.TextWriter,System.String)">
            <summary>
            引用某个标识符后，向 sql 输出。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTable.AppendPrepare(System.IO.TextWriter,System.String)">
            <summary>
            每个标记符被 SQL 语句使用前都需要使用此语句进行准备。
            </summary>
            <param name="sql"></param>
            <param name="identifier"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Info">
            <summary>
            表的信息
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.PKColumn">
            <summary>
            主键列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.IdentityColumn">
            <summary>
            自增列。
            （某些表可以会没有自增列。）
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbTable.Columns">
            <summary>
            本表中可用的所有字段信息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.PagingLocation">
            <summary>
            分页的位置
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.PagingLocation.Memory">
            <summary>
            内存分页
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.PagingLocation.Database">
            <summary>
            数据库分页
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RdbTableFinder">
            <summary>
            DbTable 查找器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTableFinder.TableFor(System.Type)">
            <summary>
            获取该实体对应的 ORM 运行时对象。
            
            如果该实体没有对应的实体元数据或者该实体没有被配置为映射数据库，
            则本方法则无法创建对应的 ORM 运行时，此时会返回 null。
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.ManagedConnectionDbAccesser">
            <summary>
            使用 ConnectionManager 管理链接的数据库访问器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DisabledTypedEntityContext">
            <summary>
            一个没有任何功能的上下文。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.TypedEntityContext">
            <summary>
            某一特定实体类型对应的实体上下文
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.TypedEntityContext._entities">
            <summary>
            从 id 到 实体 的键值对。
            Key：id
            Value：Entity
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.TypedEntityContext.EntityType">
            <summary>
            特定的实体类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.TryGetById(System.Object)">
            <summary>
            通过 id 在上下文中查找对应的实体。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.Add(System.Object,Rafy.Domain.IEntity)">
            <summary>
            直接添加一个实体到上下文中
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.TypedEntityContext.Set(System.Object,Rafy.Domain.IEntity)">
            <summary>
            设置或者刷新上下文中对应 id 的实体
            </summary>
            <param name="id"></param>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContext">
            <summary>
            实体唯一上下文
            
            保证了同一个 id 的实体在内存中只有一个运行时对象：
            申请实体上下文块后，块中的所有代码经过实体仓库操作的实体，都会被保存在内存中。
            当再次查询出同样的实体时，则会返回出之前已经查询出来的实体。
            
            注意，目前此功能只能在服务端使用。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext.Current">
            <summary>
            当前线程所对应的实体上下文
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext.Disabled">
            <summary>
            是否已经禁用了 EntityContext 功能。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext._lastContext">
            <summary>
            为最后一次被查询的对象进行缓存，提高查询效率。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.EntityContext._contexts">
            <summary>
            所有实体类型对应的上下文对象。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.GetOrCreateTypeContext(System.Type)">
            <summary>
            查找或者直接创建某一特定实体类型的上下文对象。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.FindTypeContext(System.Type)">
            <summary>
            查找对应实体的类型上下文
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.Enter">
            <summary>
            申明一个实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.EntityContext.Disable">
            <summary>
            声明一个禁用了 EntityContext 功能的代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContextWrapper">
            <summary>
            一个实现 IDisposable 模式，辅助声明实体上下文代码块的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.EntityContextDisableWrapper">
            <summary>
            一个实现 IDisposable 模式，辅助禁用实体上下文代码块的类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.MigrateService">
            <summary>
            在服务端升级数据库的服务
            </summary>
        </member>
        <member name="T:Rafy.Domain.Service">
            <summary>
            跨 C/S，B/S 的服务基类
            
            注意，如果该服务要被使用到 B/S 上，输入和输出参数都应该是基本的数据类型、EntityList 类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.ExecuteByDataPortal">
            <summary>
            数据门户会调用此方法来实现执行逻辑。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.Execute">
            <summary>
            子类重写此方法实现具体的业务逻辑
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.Invoke">
            <summary>
            调用服务并把返回值转换为指定的类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Service.ReadOutput(Rafy.Domain.IService)">
            <summary>
            使用反射把返回结果的值修改到当前对象上。
            </summary>
            <param name="res"></param>
        </member>
        <member name="M:Rafy.Domain.Service.OnInvoking">
            <summary>
            在服务被调用前发生。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Service.OnInvoked">
            <summary>
            在服务被调用后发生。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Service.DataPortalLocation">
            <summary>
            当前服务是否需要在本地运行。（有时需要设置此值来强制服务在客户端运行。）
            
            当在服务端时，默认值为 Local，表示直接在服务端运行。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.MigratingOptions">
            <summary>
            需要升级的数据库集合选项。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.RunDataLossOperation">
            <summary>
            是否执行删除操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.ReserveHistory">
            <summary>
            是否需要保存数据库的升级记录到 <see cref="F:Rafy.Domain.ConnectionStringNames.DbMigrationHistory"/> 的库中。
            如果本属性为 true，需要在连接字符串配置中添加该库对应的连接配置。
            默认为 false。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.Databases">
            <summary>
            要升级的数据库列表。不能为 null。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.MigratingOptions.IgnoreTables">
            <summary>
            在自动升级过程中，需要忽略掉的表的列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityList">
            <summary>
            所有实体集合类的基类。
            
            仓库的所有数据查询，都是通过 EntityList 来完成的。包括：FetchCount、FetchFirst、FetchList。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IEntityList">
            <summary>
            实体列表
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.MarkSaved">
            <summary>
            将当前列表中所有的组合对象树都标记为未变更状态。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.OnDeserialized">
            <summary>
            This method is called on a newly deserialized object
            after deserialization is complete.
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.Find(System.Object,System.Boolean)">
            <summary>
            通过 Id 来查找某个实体。
            </summary>
            <param name="id">需要查找的实体的 id 值。</param>
            <param name="coreceType">
            如果传入的 id 的类型与实体的类型不一致，则强制转换为一致的类型。
            如果不确定传入的类型是否一致，则可以指定这个参数为 true。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetTotalCount(System.Int32)">
            <summary>
            当查询 Count 时，调用此方法设置最终查询出的总条数。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.TryAutoIndex(System.Int32,System.Boolean)">
            <summary>
            对从指定的索引开始的根节点进行自动索引。
            </summary>
            <param name="from">从指定索引的节点开始。</param>
            <param name="force">是否强制修改 TreeIndex。</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.EachNode(System.Func{Rafy.Domain.Entity,System.Boolean})">
            <summary>
            如果实体支持树，那么递归对于整个树中的每一个节点都调用 action。
            否则，只是简单地遍历整个集合。
            </summary>
            <param name="action">对每一个节点调用的方法。方法如何返回 true，则表示停止循环，返回该节点。</param>
            <returns>
            第一个被调用 action 后返回 true 的节点。
            </returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.ResetTreeIndex">
            <summary>
            如果当前集合是一个根节点的集合，那么可以使用此方法来重新生成树中所有节点的索引。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.FindRepository">
            <summary>
            尝试找到这个实体列表对应的仓库类。
            
            没有标记 RootEntity/ChildEntity 的类型是没有仓库类的，例如所有的条件类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.GetRepository">
            <summary>
            获取该实体列表对应的仓库类，如果没有找到，则抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.FindListProperty">
            <summary>
            查找本实体对应的列表属性
            
            以下情况下返回 null：
            * 这是一个根对象的集合。
            * 这是一个子对象的集合，但是这个集合不在根对象聚合树中。（没有 this.Parent 属性。）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.MovingItems">
            <summary>
            设置本列表是否正在调整元素的位置。
            为使得排序性能更好，可使用此方法声明一个只变更元素顺序的代码块，
            此代码块中，列表会认为所有的 Remove、Add、Set 操作，都只是在维护元素顺序，而不会添加新元素、删除旧元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityList.ClearItems">
            <summary>
            清空所有项。
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetItem(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Sets the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.RemoveItem(System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.InsertItem(System.Int32,Rafy.Domain.Entity)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
            <exception cref="T:System.InvalidOperationException">当前列表中已经存在这个实体，添加操作不可用。</exception>
        </member>
        <member name="M:Rafy.Domain.EntityList.SetParentEntity(Rafy.Domain.Entity)">
            <summary>
            设置组合父对象。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.SyncParentEntityId(Rafy.Domain.Entity)">
            <summary>
            由于有时父引用实体没有发生改变，但是父引用实体的 Id 变了，此时需要调用此方法同步二者的 Id。
            </summary>
            <param name="parent">由于外部调用时，已经有 parent 的值了，所以直接传进来。</param>
        </member>
        <member name="M:Rafy.Domain.EntityList.Clone(Rafy.Domain.EntityList,Rafy.Domain.CloneOptions)">
            <summary>
            复制目标集合中的所有对象。
            </summary>
            <param name="sourceList"></param>
            <param name="options"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.RaiseRoutedEvent(Rafy.Domain.EntityRoutedEvent,System.EventArgs)">
            <summary>
            触发某个路由事件
            </summary>
            <param name="indicator"></param>
            <param name="args"></param>
        </member>
        <member name="M:Rafy.Domain.EntityList.AddRange(System.Collections.Generic.IEnumerable{Rafy.Domain.Entity})">
            <summary>
            把指定的实体集合都回到本集合中来。
            </summary>
            <param name="list">The list.</param>
        </member>
        <member name="P:Rafy.Domain.EntityList.DeletedList">
            <summary>
            本列表中已经被移除的所有对象。
            这些对象将会从仓库中删除。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.IsDirty">
            <summary>
            返回当前列表是否需要保存。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.Parent">
            <summary>
            获取此集合所属于的父实体。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.TotalCount">
            <summary>
            查询出来的当前列表在数据库中存在的总数据条数。
            
            一是用于统计数据条数查询的数据传输。
            二是是分页时保存所有数据的行数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.AutoTreeIndexEnabled">
            <summary>
            是否启用树型的自动生成索引功能。默认为 true。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.SupportTree">
            <summary>
            如果支持树型操作，需要重写 TreeId、OrderNo。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.IsTreeRootList">
            <summary>
            返回当前的这个列表是否作为树结构中的根节点的集合。
            注意，如果集合中没有元素时，同样会返回 false。
            
            如果本属性是 false 时，那么 EntityList 中与树相关的功能都不再可用。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.HasManyType">
            <summary>
            当前集合的一对多类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.SupressSetItemParent">
            <summary>
            是否需要关闭此行为：
            在添加每一项时，设置父列表为当前列表，并设置它的父对象为本列表对象的父对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityList.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.GetEnumerator">
            <summary>
            获取本实体列表的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Concrete">
            <summary>
            返回子实体的强类型迭代接口，方便使用 Linq To Object 操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Add(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            添加指定的实体到集合中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Contains(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            判断本集合是否包含指定的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.IndexOf(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            判断指定的实体在本集合中的索引号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Insert(System.Int32,Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            在指定的位置插入实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Remove(Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory)">
            <summary>
            在集合中删除指定的实体。返回是否成功删除。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryList.Item(System.Int32)">
            <summary>
            获取或设置指定位置的实体。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchFirst(System.Object[])">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回第一个实体。
            </summary>
            <param name="parameters">可传递多个参数。</param>
            <returns>返回服务端返回的列表中的第一个实体。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchList(System.Object[])">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回满足条件的实体列表。
            </summary>
            <param name="parameters">可传递多个参数。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchCount(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回统计的行数。
            </summary>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回统计的行数。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchFirst(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回第一个满足条件的实体。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回第一个满足条件的实体。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchList(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的实体列表。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.FetchTable(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository,Rafy.Data.LiteDataTable}})">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的数据表格。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的数据表格。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CreateLinqQuery">
            <summary>
            创建一个实体类的 Linq 查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.New">
            <summary>
            创建一个新的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体类
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistoryRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.GetEnumerator">
            <summary>
            获取本实体列表的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Concrete">
            <summary>
            返回子实体的强类型迭代接口，方便使用 Linq To Object 操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Add(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            添加指定的实体到集合中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Contains(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            判断本集合是否包含指定的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.IndexOf(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            判断指定的实体在本集合中的索引号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Insert(System.Int32,Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            在指定的位置插入实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Remove(Rafy.Domain.ORM.DbMigration.Presistence.DbVersion)">
            <summary>
            在集合中删除指定的实体。返回是否成功删除。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionList.Item(System.Int32)">
            <summary>
            获取或设置指定位置的实体。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchFirst(System.Object[])">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回第一个实体。
            </summary>
            <param name="parameters">可传递多个参数。</param>
            <returns>返回服务端返回的列表中的第一个实体。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchList(System.Object[])">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行对应参数的 FetchBy 数据层方法，并返回满足条件的实体列表。
            </summary>
            <param name="parameters">可传递多个参数。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchCount(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回统计的行数。
            </summary>
            <param name="dataQueryExp">调用子仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回统计的行数。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchFirst(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来导向服务端执行指定的数据层查询方法，并返回第一个满足条件的实体。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回第一个满足条件的实体。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchList(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository,Rafy.Domain.EntityList}})">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的实体列表。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的实体列表。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.FetchTable(System.Linq.Expressions.Expression{System.Func{Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository,Rafy.Data.LiteDataTable}})">
            <summary>
            在查询接口方法中，调用此方法来向服务端执行指定的数据层查询方法，并返回满足条件的数据表格。
            </summary>
            <param name="dataQueryExp">调用仓库类中定义的数据查询方法的表达式。</param>
            <returns>返回满足条件的数据表格。</returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CreateLinqQuery">
            <summary>
            创建一个实体类的 Linq 查询器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.New">
            <summary>
            创建一个新的实体。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.NewList">
            <summary>
            创建一个全新的列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CacheById(System.Object)">
            <summary>
            优先使用缓存中的数据来通过 Id 获取指定的实体对象
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetById 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.CacheAll">
            <summary>
            优先使用缓存中的数据来查询所有的实体类
            
            如果该实体的缓存没有打开，则本方法会直接调用 GetAll 并返回结果。
            如果缓存中没有这些数据，则本方法同时会把数据缓存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过Id在数据层中查询指定的对象
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetFirst(Rafy.Domain.EagerLoadOptions)">
            <summary>
            查询第一个实体类
            </summary>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetAll(Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            分页查询所有的实体类
            </summary>
            <param name="paging"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByIdList(System.Object[],Rafy.Domain.EagerLoadOptions)">
            <summary>
            获取指定 id 集合的实体列表。
            </summary>
            <param name="idList"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByParentIdList(System.Object[],Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过组合父对象的 Id 列表，查找所有的组合子对象的集合。
            </summary>
            <param name="parentIdList"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByParentId(System.Object,Rafy.PagingInfo,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过父对象 Id 分页查询子对象的集合。
            </summary>
            <param name="parentId"></param>
            <param name="paging">分页信息。</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetBy(Rafy.Domain.CommonQueryCriteria)">
            <summary>
            通过 CommonQueryCriteria 来查询实体列表。
            </summary>
            <param name="criteria">常用查询条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByTreeParentIndex(System.String,Rafy.Domain.EagerLoadOptions)">
            <summary>
            递归查找所有树型子
            </summary>
            <param name="treeIndex"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.Presistence.DbVersionRepository.GetByTreePId(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            查找指定树节点的直接子节点。
            </summary>
            <param name="treePId">需要查找的树节点的Id.</param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryable`1">
            <summary>
            实体查询器。
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryable`1.#ctor(Rafy.Domain.EntityRepository)">
            <summary>
            为指定的仓库进行查询
            </summary>
            <param name="repo"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryable`1.#ctor(Rafy.Domain.ORM.Linq.EntityQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
            为反射提供，见：EntityQueryProvider.CreateQuery(Expression)
            </summary>
            <param name="provider"></param>
            <param name="exp"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.ElementType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Linq.EntityQueryable`1.Provider">
            <summary>
            提供程序
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryProvider">
            <summary>
            实体 Linq 查询提供器。
            
            作为 EntityRepository 的一个字段，单例。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryProvider.Execute(System.Linq.Expressions.Expression)">
            <summary>
            通过查询表达式来查询实体。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryProvider.QueryEntityList(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            通过查询表达式来查询实体。
            </summary>
            <param name="expression">The expression.</param>
            <param name="counting">if set to <c>true</c> [counting].</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.Evaluator.PartialEval(System.Linq.Expressions.Expression)">
            <summary> 
            <![CDATA[ 
            Performs evaluation & replacement of independent sub-trees > 
            ]]>
            </summary>
            <param name="expression">The root of the expression tree.</param>
            <returns>A new tree with sub-trees evaluated and replaced.</returns> 
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.Evaluator.SubtreeEvaluator">
            <summary> 
            <![CDATA[ 
            Evaluates & replaces sub-trees when first candidate is reached (top-down) 
            ]]>
            </summary> 
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.Evaluator.EvaluableTreeFinder">
            <summary> 
            Performs bottom-up analysis to determine which nodes can possibly 
            be part of an evaluated sub-tree. 
            </summary> 
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.Evaluator.EvaluableTreeFinder.Find(System.Linq.Expressions.Expression)">
            <summary>
            查找出所有可被计算值的表达式。
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Linq.EntityQueryBuilder">
            <summary>
            通过 Linq 表达式，调用 SqlSelect 来构造查询。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._query">
            <summary>
            正在组织的查询对象。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._reverseWhere">
            <summary>
            是否需要反转查询中的所有条件操作符。
            场景：当转换 Linq 表达式中的 All 方法到 Sql 的 NotExsits 时，需要把内部的条件都转换为反向操作符。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Linq.EntityQueryBuilder._hasNot">
            <summary>
            是否有 Not 操作。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryBuilder.MakeConstraint">
            <summary>
            通过目前已经收集到的属性、操作符、值，来生成一个属性条件结果。
            并清空已经收集的信息。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Linq.EntityQueryBuilder.MakeBooleanConstraintIfNoValue">
            <summary>
            如果只读取到了一个 Boolean 属性，没有读取到操作符、对比值，
            而这时已经完成了条件的组装，那么必须把这个属性变成一个对判断条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbColumn.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.RdbColumn.Info">
            <summary>
            列的信息
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlOraTable">
            <summary>
            SqlServer 、 Oracle 两个数据库都支持的一些功能，封装在这个类中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlOraTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            SqlServer 、 Oracle 都支持在数据库层面进行分页。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlOraTable.QueryTotalCountIf(Rafy.Data.IDbAccesser,Rafy.PagingInfo,Rafy.Domain.ORM.SqlOraTable.PagingSqlParts,System.Object[])">
            <summary>
            如果需要统计，则生成统计语句进行查询。
            </summary>
            <param name="dba"></param>
            <param name="pagingInfo"></param>
            <param name="parts"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.RawSql">
            <summary>
            原始 SQL
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.Select">
            <summary>
            Select 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.FromWhere">
            <summary>
            From 以及 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.OrderBy">
            <summary>
            OrderBy 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlOraTable.PagingSqlParts.PagingSql">
            <summary>
            转换后的分页 SQL
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ConnectionManager">
            <summary>
            它把自己存储在上下文中，
            以提供一个简单的方式来在一个数据上下文环境中重用单个连接。
            
            分析：
            多个线程使用多个连接，会造成分布式事务的情况。
            多个线程使用同一个连接，可以解决大部分不需要分布式事务的情况，但是连接变为共享资源，混用会出错（如线程A在读取数据时，线程B想写数据则会报错）。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ConnectionManager.GetManager(Rafy.Data.DbSetting)">
            <summary>
            根据数据库配置获取一个连接管理器
            </summary>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.ConnectionManager.Dispose">
            <summary>
            Dispose 时减少引用数
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ConnectionManager.Connection">
            <summary>
            Dispose object, dereferencing or
            disposing the connection it is
            managing.
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ConnectionManager.DbSetting">
            <summary>
            对应的数据库配置信息
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.OrderDirection">
            <summary>
            排序方向。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.OrderDirection.Ascending">
            <summary>
            正序排列。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.OrderDirection.Descending">
            <summary>
            反序排列。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryExtensions">
            <summary>
            链式查询条件拼装接口。
            
            简单封装了 QueryFactory 类型。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraintIf(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            如果提供的值是不可空的，则为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">当 value 不可空时，才添加这个对比约束条件。</param>
            <param name="propertySource">指定该属性所属的实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,System.Object)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="value">对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.AddConstraint(Rafy.Domain.ORM.Query.IQuery,Rafy.ManagedProperty.IManagedProperty,Rafy.Domain.PropertyOperator,System.Object,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            为查询添加一个对应的约束条件，并以 And 与原条件进行连接。
            </summary>
            <param name="query">查询.</param>
            <param name="property">要约束的属性.</param>
            <param name="op">约束条件操作符.</param>
            <param name="value">对比的值。</param>
            <param name="propertySource">指定该属性所属的实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.FindTable(Rafy.Domain.ORM.Query.ISource,System.Type,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <param name="source">The source.</param>
            <param name="entityType">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个实体源，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个实体源，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.FindTable``1(Rafy.Domain.ORM.Query.ISource,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <typeparam name="TRepository">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</typeparam>
            <param name="source">The source.</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个实体源，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个实体源，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryExtensions.Add(System.Collections.Generic.ICollection{Rafy.Domain.ORM.Query.IOrderBy},Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.OrderDirection)">
            <summary>
            构造一个排序节点并添加到当前集合中。。
            </summary>
            <param name="orderByList">实例.</param>
            <param name="property">使用这个属性进行排序。</param>
            <param name="direction">使用这个方向进行排序。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.Impl.TableSourceFinder">
            <summary>
            从指定的数据源中查找指定仓库对应的实体数据源的查询器类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeVisitor">
            <summary>
            如果需要遍历 IQuery 对象，可以使用本类来进行访问。
            
            Rafy.Domain.ORM.Query 中的所有接口，构成了新的面向 Entity、IManagedProperty 的查询语法树。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSourceFinder._resultMatched">
            <summary>
            此字段表明结果是否已经被精确找到。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IExistsConstraint">
            <summary>
            是否存在查询结果的约束条件节点
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IConstraint">
            <summary>
            表示一个约束条件对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IQueryNode">
            <summary>
            表示查询语法树中的一个节点。
            Rafy.Domain.ORM.Query 中的接口，构成了面向 IManagedProperty 的查询语法树。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQueryNode.NodeType">
            <summary>
            节点的类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IExistsConstraint.Query">
            <summary>
            要检查的查询。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IArray">
            <summary>
            节点的数组
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IArray.Items">
            <summary>
            集合中的所有项。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IBinaryConstraint">
            <summary>
            二位操作符连接的节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Left">
            <summary>
            二位运算的左操作结点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Opeartor">
            <summary>
            二位运算类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IBinaryConstraint.Right">
            <summary>
            二位运算的右操作节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ITableSource">
            <summary>
            一个表数据源。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.INamedSource">
            <summary>
            一个拥有名字、可被引用的数据源。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISource">
            <summary>
            查询的数据源。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISource.FindTable(Rafy.Domain.IRepository,System.String)">
            <summary>
            从当前数据源中查找指定仓库对应的表。
            </summary>
            <param name="repo">要查找这个仓库对应的表。
            如果这个参数传入 null，则表示查找主表（最左边的表）。</param>
            <param name="alias">
            要查找表的别名。
            如果仓库在本数据源中匹配多个表，那么将使用别名来进行精确匹配。
            如果仓库在本数据源中只匹配一个表，那么忽略本参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.INamedSource.GetName">
            <summary>
            获取需要引用本数据源时可用的名字。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.Column(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            查找出某个列对应的节点。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.Column(Rafy.ManagedProperty.IManagedProperty,System.String)">
            <summary>
            在查找出某个列的同时，设置它的查询的别名。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <param name="alias">The alias.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ITableSource.FindColumn(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            查找出某个属性对应的列节点。
            没有找到，不会抛出异常。
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.EntityRepository">
            <summary>
            本表数据源来对应这个实体仓库。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.Alias">
            <summary>
            同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ITableSource.IdColumn">
            <summary>
            返回 Id 属性对应的列节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IJoin">
            <summary>
            数据源与实体数据源连接后的结果节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Left">
            <summary>
            左边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.JoinType">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Right">
            <summary>
            右边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IJoin.Condition">
            <summary>
            连接所使用的约束条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.JoinType">
            <summary>
            支持的连接方式。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.JoinType.Inner">
            <summary>
            内连接
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.JoinType.LeftOuter">
            <summary>
            左外连接
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ILiteral">
            <summary>
            查询文本。
            查询文本可以表示一个条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ILiteral.FormattedSql">
            <summary>
            查询文本。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ILiteral.Parameters">
            <summary>
            对应的参数值列表
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlArray">
            <summary>
            表示一组树结点合成的一个集合结点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNode">
            <summary>
            表示 Sql 语法树中的一个节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlNode.NodeType">
            <summary>
            返回当前树节点的类型。
            </summary>
            <value>
            The type of the node.
            </value>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlArray.Items">
            <summary>
            所有项。
            其中每一个项必须是一个 SqlNode。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint">
            <summary>
            表示作用于两个操作结点的二位运算结点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlConstraint">
            <summary>
            一个可用于 Where 条件的 Sql 约束
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Left">
            <summary>
            二位运算的左操作节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Opeartor">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraint.Right">
            <summary>
            二位运算的右操作节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSelect">
            <summary>
            表示一个 Sql 查询语句。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.IsCounting">
            <summary>
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.IsDistinct">
            <summary>
            是否需要查询不同的结果。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.Top">
            <summary>
            如果指定此属性，表示需要查询的条数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.Selection">
            <summary>
            要查询的内容。
            如果本属性为空，表示要查询所有列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.From">
            <summary>
            要查询的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.Where">
            <summary>
            查询的过滤条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelect.OrderBy">
            <summary>
            查询的排序规则。
            可以指定多个排序条件，其中每一项都必须是一个 SqlOrderBy 对象。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IQuery">
            <summary>
            表示一个可进行查询的节点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.IsCounting">
            <summary>
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.IsDistinct">
            <summary>
            是否需要查询不同的结果。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.Top">
            <summary>
            如果指定此属性，表示需要查询的条数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.Selection">
            <summary>
            要查询的内容。
            如果本属性为空，表示要查询所有数据源的所有属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.From">
            <summary>
            要查询的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.Where">
            <summary>
            查询的过滤条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.OrderBy">
            <summary>
            查询的排序规则。
            可以指定多个排序条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IQuery.MainTable">
            <summary>
            获取这个查询中的主实体数据源。
            
            在使用 QueryFactory.Query 方法构造 IQuery 时，需要传入 from 参数，
            如果传入的就是一个 IEntitySource，那么它就是本查询的主实体数据源；
            如果传入的是一个连接的结果，那么整个连接中最左端的实体数据源就是主数据源。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableQuery._allJoinTables">
            <summary>
            除基础表外，所有连接的表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.Impl.TableQuery.FindOrCreateJoinTable(Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            在查询对象中查找或者创建指定引用属性对应的连接表对象。
            </summary>
            <param name="propertyOwner">引用属性所在的实体对应的表。也是外键关系中外键列所在的表。</param>
            <param name="refProperty">指定的引用属性。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.Impl.TableQuery.MainTable">
            <summary>
            本查询所对应的基础表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.Impl.SqlTableSource">
            <summary>
            这个类型用于表示某一个 SqlTable 是由哪一个属性关联出来的。
            属性可以是一个引用属性，也可以是一个组合子属性。
            
            同一个属性关联出来的表，在整个 Select 中，应该是唯一的。这样可以防止为同一个引用属性生成多个重复的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.ForeignKeyTable">
            <summary>
            外键所在表。
            引用属性所在的实体对应的表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.RefProperty">
            <summary>
            引用属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.SqlTableSource.PrimaryKeyTable">
            <summary>
            主键所在的表。
            被引用的表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlTable">
            <summary>
            表示一个具体的表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNamedSource">
            <summary>
            一个拥有名字、可被引用的数据源。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSource">
            <summary>
            可查询的数据源，可用于 From 语句之后 。
            目前有：SqlTable、SqlJoin、SqlSubSelect。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlTree.SqlNamedSource.GetName">
            <summary>
            获取需要引用本数据源时可用的名字。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlTable.Alias">
            <summary>
            查询中使用的别名
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSource._tableInfo">
            <summary>
            对应 ORM 中的运行时表。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.Impl.TableSource._columns">
            <summary>
            这个表中的所有可用的列。
            一次性生成这些表，方便查找。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.Impl.TableSource.LoadAllColumns">
            <summary>
            返回所有列对应的节点。
            本方法会生成所有还没有生成的列的节点。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlExistsConstraint">
            <summary>
            表示对指定的查询进行是否存在查询行的逻辑的判断。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlExistsConstraint.Select">
            <summary>
            要检查的查询。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlJoin">
            <summary>
            一个数据源与一个具体表的连接结果，同时它也是一个新的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Left">
            <summary>
            左边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.JoinType">
            <summary>
            连接方式
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Right">
            <summary>
            右边需要连接的数据源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlJoin.Condition">
            <summary>
            连接所使用的约束条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlLiteral">
            <summary>
            表示一个文本
            
            SqlLiteral 需要从 SqlConstraint 上继承，否则将不可用于 Where 语句。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlLiteral.FormattedSql">
            <summary>
            Sql 文本。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlLiteral.Parameters">
            <summary>
            对应的参数值列表
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNotConstraint">
            <summary>
            表示一个取反规则的条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlNotConstraint.Constraint">
            <summary>
            需要被取反的条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.INotConstraint">
            <summary>
            对指定约束条件节点执行取反规则的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.INotConstraint.Constraint">
            <summary>
            需要被取反的条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlOrderBy">
            <summary>
            排序结点。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlOrderBy.Column">
            <summary>
            使用这个列进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlOrderBy.Direction">
            <summary>
            使用这个方向进行排序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IOrderBy">
            <summary>
            排序节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IOrderBy.Column">
            <summary>
            使用这个属性进行排序。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IOrderBy.Direction">
            <summary>
            使用这个方向进行排序。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint">
            <summary>
            表示某个列与某个值进行对比的约束条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Column">
            <summary>
            要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Operator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnConstraint.Value">
            <summary>
            要对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnConstraint">
            <summary>
            列的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Column">
            <summary>
            要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Operator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnConstraint.Value">
            <summary>
            要对比的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumn">
            <summary>
            表示某个表、或者查询结果中的某一列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.Table">
            <summary>
            只能是<see cref="T:Rafy.Domain.ORM.SqlTree.SqlTable"/>、<see cref="T:Rafy.Domain.ORM.SqlTree.SqlSubSelect"/>
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumn.Alias">
            <summary>
            别名。
            列的别名只用在 Select 语句之后。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnNode">
            <summary>
            一个列节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Owner">
            <summary>
            本列属于指定的数据源
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Property">
            <summary>
            本属性对应一个实体的托管属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnNode.Alias">
            <summary>
            本属性在查询结果中使用的别名。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSelectAll">
            <summary>
            用于表示选择所有列、或者表示选择某个表的所有列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSelectAll.Table">
            <summary>
            如果本属性为空，表示选择所有数据源的所有列；否则表示选择指定表的所有列。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISelectAll">
            <summary>
            表示查询数据源中的所有属性的节点、也可以表示查询某个指定数据源的所有属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISelectAll.Source">
            <summary>
            如果本属性为空，表示选择所有数据源的所有属性；否则表示选择指定数据源的所有属性。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlSubSelect">
            <summary>
            子查询。
            对一个子查询分配别名后，可以作为一个新的源。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSubSelect.Select">
            <summary>
            子查询
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlSubSelect.Alias">
            <summary>
            别名，必须填写
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.ISubQuery">
            <summary>
            子查询。
            对一个子查询分配别名后，可以作为一个新的源。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISubQuery.Column(Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            为这个子查询结果中的某个列来生成一个属于这个 ISubQueryRef 对象的结果列。
            </summary>
            <param name="rawColumn">子查询结果中的某个列。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.ISubQuery.Column(Rafy.Domain.ORM.Query.IColumnNode,System.String)">
            <summary>
            为这个子查询结果中的某个列来生成一个属于这个 ISubQueryRef 对象的结果列。
            同时，设置它的查询的别名。
            </summary>
            <param name="rawColumn">子查询结果中的某个列。</param>
            <param name="alias">别名。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISubQuery.Query">
            <summary>
            内部的查询对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.ISubQuery.Alias">
            <summary>
            必须对这个子查询指定别名。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint">
            <summary>
            表示两个列进行对比的约束条件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.LeftColumn">
            <summary>
            第一个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.RightColumn">
            <summary>
            第二个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlTree.SqlColumnsComparisonConstraint.Operator">
            <summary>
            对比条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.IColumnsComparison">
            <summary>
            两个列进行对比的约束条件节点
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.LeftColumn">
            <summary>
            第一个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.RightColumn">
            <summary>
            第二个需要对比的列。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.Query.IColumnsComparison.Operator">
            <summary>
            对比条件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryNodeType">
            <summary>
            查询树节点的类型。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Query">
            <summary>
            查询结果
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.SubQuery">
            <summary>
            可嵌套的子查询
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Array">
            <summary>
            节点的数组
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.TableSource">
            <summary>
            查询的表数据源
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.SelectAll">
            <summary>
            表示查询数据源中的所有属性的节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Join">
            <summary>
            数据源与实体数据源连接后的结果节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.OrderBy">
            <summary>
            排序节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Column">
            <summary>
            列节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ColumnConstraint">
            <summary>
            列的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ColumnsComparisonConstraint">
            <summary>
            两个列进行对比的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.BinaryConstraint">
            <summary>
            二位操作符连接的节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.ExistsConstraint">
            <summary>
            是否存在查询结果的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.NotConstraint">
            <summary>
            对指定约束条件节点执行取反规则的约束条件节点
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.Query.QueryNodeType.Literal">
            <summary>
            查询文本
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.Query.QueryFactory">
            <summary>
            查询构造工厂
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query(Rafy.Domain.IRepository)">
            <summary>
            为指定的仓库构造一个查询。
            </summary>
            <param name="mainTableRepository">主表对应的实体的仓库。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query``1">
            <summary>
            为指定的仓库构造一个查询。
            </summary>
            <typeparam name="TEntity">主表对应的实体。</typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Query(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.IQueryNode,Rafy.Domain.ORM.Query.IConstraint,System.Collections.Generic.List{Rafy.Domain.ORM.Query.IOrderBy},System.Boolean,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            构造一个查询对象。
            </summary>
            <param name="from">要查询的数据源。</param>
            <param name="selection">
            要查询的内容。
            如果本属性为空，表示要查询所有数据源的所有属性。
            </param>
            <param name="where">查询的过滤条件。</param>
            <param name="orderBy">
            查询的排序规则。
            可以指定多个排序条件。
            </param>
            <param name="isCounting">
            是否只查询数据的条数。
            
            如果这个属性为真，那么不再需要使用 Selection。
            </param>
            <param name="isDistinct">是否需要查询不同的结果。</param>
            <param name="top">如果指定此属性，表示需要查询的条数。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Array(Rafy.Domain.ORM.Query.IQueryNode[])">
            <summary>
            构造一个数组节点。
            </summary>
            <param name="nodes">所有数组中的项。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Array(System.Collections.Generic.IEnumerable{Rafy.Domain.ORM.Query.IQueryNode})">
            <summary>
            构造一个数组节点。
            </summary>
            <param name="nodes">所有数组中的项。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.SelectAll(Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            构造一个 SelectAll 节点。
            </summary>
            <param name="table">如果本属性为空，表示选择所有数据源的所有属性；否则表示选择指定数据源的所有属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Table``1(System.String)">
            <summary>
            构造一个实体的数据源节点。
            </summary>
            <typeparam name="TEntity">本实体数据源来自于这个实体对应的仓库。</typeparam>
            <param name="alias">同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Table(Rafy.Domain.IRepository,System.String)">
            <summary>
            构造一个实体的数据源节点。
            </summary>
            <param name="repository">本实体数据源来自于这个实体仓库。</param>
            <param name="alias">同一个实体仓库可以表示多个不同的数据源。这时，需要这些不同的数据源指定不同的别名。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">entityRepository</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.FindOrCreateJoinTable(Rafy.Domain.ORM.Query.IQuery,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefEntityProperty)">
            <summary>
            在查询对象中查找或者创建指定引用属性对应的连接表对象。
            </summary>
            <param name="query">需要在这个查询对象中查找或创建连接表。</param>
            <param name="propertyOwner">引用属性对应外键所在的表。</param>
            <param name="refProperty">指定的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,System.Object)">
            <summary>
            构造一个属性与指定值"相等"的约束条件节点。
            </summary>
            <param name="column">要对比的属性。</param>
            <param name="value">要对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.PropertyOperator,System.Object)">
            <summary>
            构造一个属性的约束条件节点。
            </summary>
            <param name="column">要对比的属性。</param>
            <param name="op">对比操作符</param>
            <param name="value">要对比的值。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            构造一个两个属性"相等"的约束条件节点。
            </summary>
            <param name="leftColumn">第一个需要对比的列。</param>
            <param name="rightColumn">第二个需要对比的列。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Constraint(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.PropertyOperator,Rafy.Domain.ORM.Query.IColumnNode)">
            <summary>
            构造一个两个属性进行对比的约束条件节点。
            </summary>
            <param name="leftColumn">第一个需要对比的列。</param>
            <param name="op">对比条件。</param>
            <param name="rightColumn">第二个需要对比的列。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            leftProperty
            or
            rightProperty
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Exists(Rafy.Domain.ORM.Query.IQuery)">
            <summary>
            构造一个 是否存在查询结果的约束条件节点
            </summary>
            <param name="query">要检查的查询。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">query</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Not(Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个对指定约束条件节点执行取反规则的约束条件节点。
            </summary>
            <param name="constraint">需要被取反的条件。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">constraint</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Literal(System.String,System.Object[])">
            <summary>
            构造一个查询文本。
            </summary>
            <param name="formattedSql">查询文本。</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">text</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.And(Rafy.Domain.ORM.Query.IConstraint[])">
            <summary>
            对指定的所有约束构造一个 And 连接串节点。
            </summary>
            <param name="constraints">需要使用 And 进行连接的所有约束。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.And(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个 And 连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="right">二位运算的右操作节点。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Or(Rafy.Domain.ORM.Query.IConstraint[])">
            <summary>
            对指定的所有约束构造一个 Or 连接串节点。
            </summary>
            <param name="constraints">需要使用 Or 进行连接的所有约束。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Or(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个 Or 连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="right">二位运算的右操作节点。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Binary(Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.BinaryOperator,Rafy.Domain.ORM.Query.IConstraint)">
            <summary>
            构造一个二位操作符连接的节点。
            </summary>
            <param name="left">二位运算的左操作结点。</param>
            <param name="op">二位运算类型。</param>
            <param name="right">二位运算的右操作节点。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            left
            or
            right
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.ITableSource)">
            <summary>
            通过左实体数据源和右实体数据源，来找到它们之间的第一个的引用属性，用以构造一个连接。
            </summary>
            <param name="left">拥有引用关系的左数据源。</param>
            <param name="right">右实体数据源。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            通过左数据源和右实体数据源，以及从左到右的引用属性，来构造一个连接。
            </summary>
            <param name="left">左实体数据源。</param>
            <param name="right">右实体数据源。</param>
            <param name="leftToRight">从左到右的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.ITableSource,Rafy.ManagedProperty.IRefProperty)">
            <summary>
            通过左数据源和右实体数据源，以及从左到右的引用属性，来构造一个连接。
            </summary>
            <param name="left">左数据源。</param>
            <param name="right">右实体数据源。</param>
            <param name="leftToRight">从左到右的引用属性。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.Join(Rafy.Domain.ORM.Query.ISource,Rafy.Domain.ORM.Query.ITableSource,Rafy.Domain.ORM.Query.IConstraint,Rafy.Domain.ORM.Query.JoinType)">
            <summary>
            构造一个数据源与实体数据源连接后的结果节点
            </summary>
            <param name="left">左边需要连接的数据源。</param>
            <param name="right">右边需要连接的数据源。</param>
            <param name="condition">连接所使用的约束条件。</param>
            <param name="joinType">连接方式</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            left
            or
            right
            or
            condition
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.SubQuery(Rafy.Domain.ORM.Query.IQuery,System.String)">
            <summary>
            构造一个子查询。
            </summary>
            <param name="query">内部的查询对象。</param>
            <param name="alias">必须对这个子查询指定别名。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            query
            or
            alias
            </exception>
        </member>
        <member name="M:Rafy.Domain.ORM.Query.QueryFactory.OrderBy(Rafy.Domain.ORM.Query.IColumnNode,Rafy.Domain.ORM.OrderDirection)">
            <summary>
            构造一个排序节点。
            </summary>
            <param name="property">使用这个属性进行排序。</param>
            <param name="direction">使用这个方向进行排序。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">property</exception>
        </member>
        <member name="T:Rafy.Domain.ORM.SingleConnectionTrasactionScope">
            <summary>
            单连接事务块。
            
            可用于声明一个事务块，在这个事务块中，同一个线程执行的代码，如果是访问同一个数据库，则只会用到同一个数据库连接。
            这样也就不会造成为分布式事务。（分布式事务在一些数据库中并不支持，例如 SQLCE。）
            
            注意：
            -多个数据库之间的事务，将会完全独立，互不干扰！
            -如果想主动使用分布式事务，请在最外层使用 ADO.NET 的 TransactionScope 类。
            -一个事务的代码只能在同一个线程中执行。（事务是存储在当前线程中的。多线程不共享事务。）
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SingleConnectionTrasactionScope.#ctor(Rafy.Data.DbSetting)">
            <summary>
            构造一个事务块
            </summary>
            <param name="dbSetting">整个数据库的配置名</param>
        </member>
        <member name="M:Rafy.Domain.ORM.SingleConnectionTrasactionScope.#ctor(Rafy.Data.DbSetting,System.Data.IsolationLevel)">
            <summary>
            构造一个事务块
            </summary>
            <param name="dbSetting">整个数据库的配置名</param>
            <param name="level">事务的孤立级别</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalContext">
            <summary>
            Provides consistent context information between the client
            and server DataPortal objects. 
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.Principal">
            <summary>
            The current principal object
            if CSLA security is being used.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.ClientCulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalContext.ClientUICulture">
            <summary>
            The culture setting on the client
            workstation.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalFacade">
            <summary>
            Implements the server-side DataPortal 
            message router as discussed
            in Chapter 4.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalFacade.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalFacade.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.DataPortalResult">
            <summary>
            Returns data from the server-side DataPortal to the 
            client-side DataPortal. Intended for internal CSLA .NET
            use only.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalResult.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.DataPortalResult.#ctor(System.Object)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="returnObject">Object to return as part
            of the result.</param>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalResult.ReturnObject">
            <summary>
            The business object being returned from
            the server.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.DataPortalResult.GlobalContext">
            <summary>
            The global context being returned from
            the server.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.FinalDataPortal">
            <summary>
            最终调用实体的 IDataPortalServer 门户实现。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortal.FinalDataPortal.FetchMethod">
            <summary>
            非仓库类在使用 Fetch 时的回调方法名。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DataPortal.FinalDataPortal.CurrentCriteria">
            <summary>
            当前查询正在使用的单一条件。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Fetch(System.Type,System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="objectType">Type of business object to retrieve.</param>
            <param name="criteria">Criteria object describing business object.</param>
            <param name="context"><see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Update(System.Object,Rafy.Domain.DataPortal.DataPortalContext)">
            <summary>
            Update a business object.
            </summary>
            <param name="obj">Business object to update.</param>
            <param name="context">
            <see cref="T:Rafy.Domain.DataPortal.DataPortalContext"/> object passed to the server.
            </param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Fetch(System.Type,System.Object)">
            <summary>
            调用某个类型的查询方法以返回它的数据。
            </summary>
            <param name="objectType"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DataPortal.FinalDataPortal.Update(System.Object)">
            <summary>
            直接更新某个对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.IWcfPortal">
            <summary>
            Defines the service contract for the WCF data
            portal.
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.IWcfPortal.Fetch(Rafy.Domain.DataPortal.WCF.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.IWcfPortal.Update(Rafy.Domain.DataPortal.WCF.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.FetchRequest">
            <summary>
            Request message for retrieving
            an existing business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.ObjectType">
            <summary>
            The type of the business object
            to be retrieved.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.Criteria">
            <summary>
            Criteria object describing business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.FetchRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.UpdateRequest">
            <summary>
            Request message for updating
            a business object.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.UpdateRequest.Object">
            <summary>
            Business object to be updated.
            </summary>
        </member>
        <member name="P:Rafy.Domain.DataPortal.WCF.UpdateRequest.Context">
            <summary>
            Data portal context from client.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.WcfResponse">
            <summary>
            Response message for returning
            the results of a data portal call.
            </summary>
        </member>
        <member name="T:Rafy.Domain.DataPortal.WCF.ServerPortal">
            <summary>
            使用 WCF 实现的统一的数据门户。
            
            标记了 ConcurrencyMode.Multiple 来表示多线程进行
            </summary>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ServerPortal.Fetch(Rafy.Domain.DataPortal.WCF.FetchRequest)">
            <summary>
            Get an existing business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="M:Rafy.Domain.DataPortal.WCF.ServerPortal.Update(Rafy.Domain.DataPortal.WCF.UpdateRequest)">
            <summary>
            Update a business object.
            </summary>
            <param name="request">The request parameter object.</param>
        </member>
        <member name="T:Rafy.Domain.PersistenceStatus">
            <summary>
            实体状态
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Unchanged">
            <summary>
            未改动
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Modified">
            <summary>
            数据变更。仓库保存时，需要执行更新操作。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.New">
            <summary>
            新对象。仓库保存时，需要执行添加操作。
            </summary>
        </member>
        <member name="F:Rafy.Domain.PersistenceStatus.Deleted">
            <summary>
            已删除。仓库保存时，需要执行删除操作。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.MemoryEntityRepository">
            <summary>
            本地实体的仓库基类。
            
            提供了为本地实体生成 Id 的功能。
            本仓库会把所有的生成的实体的数据都存储在内存中。
            （
            不用存储到数据库，只存在于内存中。
            不论是客户端还是服务端，在哪调用仓库的查询接口，就存在哪的内存中。
            在内存中，只存在实体的数据，在查询时，会把这些数据转换为实体。
            ）
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.GetRealKey(Rafy.Domain.Entity)">
            <summary>
            获取给定实体的真实键。
            
            由于这些实体的 Id 是自动生成的，所以子类需要提供真实的字符串类型的主键。
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.DoGetById(System.Object,Rafy.Domain.EagerLoadOptions)">
            <summary>
            通过本地 Id 查找实体。
            </summary>
            <param name="id"></param>
            <param name="eagerLoad">需要贪婪加载的属性。</param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider._memoryRows">
            <summary>
            当前已经生成 Id
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.Clear">
            <summary>
            清除本地内存数据库
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.FindByRealKey(System.String)">
            <summary>
            通过真实的键查找目标实体。
            </summary>
            <param name="realKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.LoadAll">
            <summary>
            子类重写此方法来实现一次性加载所有对象到内存中的逻辑。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.MemoryEntityRepository.MemoryRepositoryDataProvider.MemoryClone(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            从指定的对象中拷贝所有数据到另一对象中。
            
            默认实体只拷贝所有数据属性。
            子类可重写此方法来拷贝更多一般字段。
            </summary>
            <param name="src">数据源对象。</param>
            <param name="dst">目标对象。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlCe.SqlCeTable.GetPagingLocation(Rafy.PagingInfo)">
            <summary>
            在 sqlce 下，不支持 rowNumber 方案，但是支持 not in 方案。
            鉴于实现 not in 方案比较耗时，所以暂时决定使用 IDataReader 分页完成。
            
            not in 分页，参见以下 Sql：
            select top 10 [AuditItem].* from 
            [AuditItem] where 
            [AuditItem].id not in
            (
                select top 100 [AuditItem].id from [AuditItem] order by LogTime desc
            )
            order by LogTime desc
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ConditionalSql">
            <summary>
            Sql 构造器
            
            调用本类对象的 Write 打头的一系统方法来构造条件，本类型会自动添加 Where、And 等连接符。
            相关配置可以查看属性 AutoConcat 及 HasWhere。
            
            如果想直接面向 Sql 字符串进行操作，可以使用 Append 打头的方法，或者使用 InnerStringBuider 属性获取内部的 StringBuider 后再进行操作。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteWhereSqlIf(System.String,System.Object)">
            <summary>
            如果值不为空，则添加自定义 Where 语句 Sql
            </summary>
            <param name="sql"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性与某值相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性与某值不相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性比某值大的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 >= 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 <![CDATA[<]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessEqualIf(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            如果值不为空，则添加某属性 <![CDATA[<=]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteContainsIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性包含某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteStartWithIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性以某字符串值开头的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLikeIf(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            如果值不为空，则添加某属性以某字符串值为模糊匹配的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">将会对该值进行是否为空的检测。值中需要带有通配符。如 '%'</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.IsNotEmpty(System.Object)">
            <summary>
            判断某个值是否非空。
            
            如果是字符串，则检测它是否为非空字符。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteWhereSql(System.String,System.Object[])">
            <summary>
            添加自定义 Where 语句 Sql
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性与某值相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性与某值不相等的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreater(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性比某值大的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteGreaterEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 >= 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLess(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 <![CDATA[<]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLessEqual(Rafy.ManagedProperty.IManagedProperty,System.Object,System.Type)">
            <summary>
            添加某属性 <![CDATA[<=]]> 某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteContains(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性包含某值的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteStartWith(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性以某字符串值开头的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteLike(Rafy.ManagedProperty.IManagedProperty,System.String,System.Type)">
            <summary>
            添加某属性以某字符串值为模糊匹配的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="value">作为比较的值。值中需要带有通配符。如 '%'</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteIn(Rafy.ManagedProperty.IManagedProperty,System.Collections.IList,System.Type)">
            <summary>
            添加某属性在某个序列中的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="values">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.WriteNotIn(Rafy.ManagedProperty.IManagedProperty,System.Collections.IList,System.Type)">
            <summary>
            添加某属性不在某个序列中的条件。
            </summary>
            <param name="property">作为条件判断的属性。</param>
            <param name="values">作为比较的值。</param>
            <param name="propertyOwner">
            如果该属性的声明者没有映射具体的表（例如该属性为抽象基类的属性），则需要指定 propertyOwner 为具体的子类。
            </param>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.GetDbTable(Rafy.ManagedProperty.IManagedProperty,System.Type)">
            <summary>
            找到指定托管属性对应的 ORM 表元数据。
            </summary>
            <param name="property">The property.</param>
            <param name="propertyOwner">The property owner.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.ConditionalSql.GetPropertyTable(Rafy.ManagedProperty.IManagedProperty,System.Type,System.Collections.Generic.Dictionary{System.Type,Rafy.Domain.ORM.RdbTable})">
            <summary>
            通过托管属性及其对应的实体类型，并通过可用的缓存列表，查找对应的 DbTable。
            </summary>
            <param name="property"></param>
            <param name="propertyOwner"></param>
            <param name="tablesCache"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.ConditionalSql.HasWhere">
            <summary>
            是否当前 SQL 中已经存在了 Where 关键字。
            
            如果没有存在 Where，则会在再次添加条件时，自动添加 Where 关键字。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.ConditionalSql.AutoConcat">
            <summary>
            自动添加的连接符。
            默认是 AND
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlConditionAutoConcat">
            <summary>
            自动添加的连接符。
            默认是 AND
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.And">
            <summary>
            自动用 And 连接两个 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.Or">
            <summary>
            自动用 Or 连接两个 Where 语句
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.SqlConditionAutoConcat.None">
            <summary>
            关闭自动连接
            </summary>
        </member>
        <member name="T:Rafy.Domain.RedundantPath">
            <summary>
            冗余属性路径
            </summary>
        </member>
        <member name="M:Rafy.Domain.RedundantPath.#ctor(System.Object[])">
            <summary>
            冗余属性路径
            </summary>
            <param name="pathes">
            此数组内只接受两个类型：IProperty，ConcreteProperty。
            
            一个集合列表，由 N 个引用属性和 1 个一般值类型属性组成。
            表示从第一个引用属性开始的一个引用链条，一直到最后一个值属性对应的值。例如：
            D.CRef, C.BRef, B.ARef, A.Name 这样的一个集合表示以下冗余路径：D->C->B->A.Name
            </param>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.Redundancy">
            <summary>
            冗余属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.RefPathes">
            <summary>
            所有引用属性路径。
            
            注意，第一个引用属性，必须和冗余属性同在一个实体类型中。
            
            注意，此集合中直接存储的是引用 Id 属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RedundantPath.ValueProperty">
            <summary>
            最终的值属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlGenerator">
            <summary>
            为 SqlNode 语法树生成相应 Sql 的生成器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNodeVisitor">
            <summary>
            SqlNode 语法树的访问器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.ModifyToPagingTree(Rafy.Domain.ORM.SqlTree.SqlSelect,Rafy.Domain.ORM.SqlTree.SqlColumn,Rafy.PagingInfo)">
            <summary>
            为指定的原始查询生成指定分页效果的新查询。
            </summary>
            <param name="raw">原始查询</param>
            <param name="pkColumn">需要指定主键列</param>
            <param name="pagingInfo">分页信息。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.Generate(Rafy.Domain.ORM.SqlTree.SqlNode)">
            <summary>
            访问 sql 语法树中的每一个结点，并生成相应的 Sql 语句。
            </summary>
            <param name="tree"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.QuoteAppend(System.String)">
            <summary>
            把标识符添加到 Sql 语句中。
            子类可重写此方法来为每一个标识符添加引用符。
            SqlServer 生成 [identifier]
            Oracle 生成 "IDENTIFIER"
            </summary>
            <param name="identifier"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlGenerator.PrepareIdentifier(System.String)">
            <summary>
            准备所有标识符。
            Oracle 可重写此方法，使得标识符都是大写的。
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.Indent">
            <summary>
            当前需要的缩进量。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.AutoQuota">
            <summary>
            是否自动添加标识符的括号
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.SqlGenerator.Sql">
            <summary>
            生成完毕后的 Sql 语句及参数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlBinaryConstraintType">
            <summary>
            二位运算类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlColumnConstraintOperator">
            <summary>
            对比操作符
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlJoinType">
            <summary>
            支持的连接方式。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlTree.SqlNodeType">
            <summary>
            语法树节点类型。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ContractAttribute">
            <summary>
            表明某个类型是一个服务的契约。
            </summary>
            暂时没有用到，未来可能需要对所有的契约遍历。
        </member>
        <member name="T:Rafy.Domain.ServiceLocator">
            <summary>
            服务实现的定位器
            <threadsafety static="true" instance="true"/>
            </summary>
        </member>
        <member name="F:Rafy.Domain.ServiceLocator.ContractImplList._contractType">
            <summary>
            对应这个契约类型
            </summary>
        </member>
        <member name="M:Rafy.Domain.ServiceLocator.ContractImplList.Add(Rafy.Domain.ServiceLocator.ContractImpl)">
            <summary>
            添加一个契约实现到服务中。
            </summary>
            <param name="impl"></param>
        </member>
        <member name="M:Rafy.Domain.ServiceLocator.ContractImplList.Find(System.Version)">
            <summary>
            通过版本号来查找对应的契约实现。
            </summary>
            <param name="version"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.FlowService">
            <summary>
            一种过程化服务的基类
            
            过程化简单地指：进行一系列操作，返回是否成功以及相应的提示消息。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ISaveListService">
            <summary>
            一个用于保存实体列表的服务。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ISaveListService.EntityList">
            <summary>
            需要保存的列表。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.RawTable">
            <summary>
            封装了DataRowCollection的一般Table
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.EntityListVersion">
            <summary>
            逻辑上实体列表的版本号。
            用于客户端缓存。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ClassRegion">
            <summary>
            属性哪个实体类的范围
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ScopeClass">
            <summary>
            是否基于某个父类型来进行分开缓存。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.ScopeId">
            <summary>
            如果是基于父类型来缓存，则这个属性表示当前列表对应的父对象的 Id。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.EntityListVersion.Value">
            <summary>
            当前这个列表缓存的时间戳。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.IEntityListVersionRepository">
            <summary>
            实体列表版本号的仓库。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.GetOrNew(System.Type,System.Type,System.String)">
            <summary>
            获取指定的列表范围，如果不存储，则构造一个新的。
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Add(System.Type,System.Type,System.String)">
            <summary>
            添加一个指定的范围版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Get(System.Type,System.Type,System.String)">
            <summary>
            获取一个指定的范围版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.Clear">
            <summary>
            清空所有版本号，所有缓存都会过期。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.UpdateVersion(System.Type)">
            <summary>
            通知整个表被改变
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.UpdateVersion(System.Type,System.Type,System.String)">
            <summary>
            更新指定的范围的版本号
            </summary>
            <param name="region"></param>
            <param name="scopeClass"></param>
            <param name="scopeId"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.IEntityListVersionRepository.BatchSaveScope">
            <summary>
            如果要进行批量的更新，请先调用此方法。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntityRoutedEventArgs">
            <summary>
            LogicalView 路由事件的参数
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Source">
            <summary>
            事件源头的实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Event">
            <summary>
            发生的事件标记
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityRoutedEventArgs.Args">
            <summary>
            事件参数
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityRoutedEvent">
            <summary>
            Entity 路由事件的标记
            </summary>
        </member>
        <member name="T:Rafy.Domain.IHasHame">
            <summary>
            有名称的对象
            </summary>
        </member>
        <member name="P:Rafy.Domain.IHasHame.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Rafy.Domain.P`1">
            <summary>
            Property Register
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRedundancy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RedundantPath)">
            <summary>
            注册一个冗余属性
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExp"></param>
            <param name="path">属性冗余的路径</param>
            <returns></returns>
            不使用 lambda 表达式来注册冗余路径，这是因为可能会与属性生命周期冲突，同时也没有这个必要。
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},Rafy.ManagedProperty.ReferenceType)">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp">指向相应 CLR 的表达式。</param>
            <param name="referenceType">引用的类型</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},Rafy.Domain.RegisterRefIdArgs{``0})">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp"></param>
            <param name="args">一系列相关的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.ManagedProperty.ReferenceType)">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp">指向相应 CLR 的表达式。</param>
            <param name="referenceType">引用的类型</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRefId``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RegisterRefIdArgs{``0})">
            <summary>
            声明一个引用 Id 属性
            </summary>
            <param name="propertyExp"></param>
            <param name="args">一系列相关的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRef``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.ManagedProperty.IRefIdProperty)">
            <summary>
            声明一个引用实体属性。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="propertyExp">指向引用实体属性的表达式。</param>
            <param name="refIdProperty">对应的引用 Id 属性，将为其建立关联。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterRef``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.RegisterRefArgs)">
            <summary>
            声明一个引用实体属性。
            </summary>
            <typeparam name="TRefEntity"></typeparam>
            <param name="propertyExp">指向引用实体属性的表达式。</param>
            <param name="args">引用实体属性相应的参数对象。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.OverrideRefMeta``2(Rafy.Domain.RefEntityProperty{``0},``1,System.Action{``1})">
            <summary>
            为某个实体类型重写指定引用属性对应的元数据。
            </summary>
            <typeparam name="TRefEntity">The type of the reference entity.</typeparam>
            <typeparam name="TMeta">The type of the meta.</typeparam>
            <param name="property">The property.</param>
            <param name="args">The arguments.</param>
            <param name="overrideValues">The override values.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">args</exception>
            <exception cref="T:System.InvalidOperationException">不支持重写 Loader 属性。</exception>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterList``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            注册一个列表属性
            </summary>
            <typeparam name="TEntityList">The type of the entity list.</typeparam>
            <param name="propertyExp">The property exp.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.P`1.RegisterList``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Rafy.Domain.ListPropertyMeta)">
            <summary>
            注册一个列表属性
            </summary>
            <typeparam name="TEntityList"></typeparam>
            <param name="propertyExp"></param>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RefEntityProperty`1">
            <summary>
            引用实体属性的实体标记
            </summary>
            <typeparam name="TRefEntity">引用实体的类型</typeparam>
        </member>
        <member name="M:Rafy.Domain.IRefEntityPropertyInternal.Load(System.Object,Rafy.Domain.Entity)">
            <summary>
            加载某个 id 对应的引用实体。
            </summary>
            <param name="id"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.RefEntityProperty`1._loader">
            <summary>
            自定义加载器。
            </summary>
        </member>
        <member name="F:Rafy.Domain.RefEntityProperty`1._defaultLoader">
            <summary>
            为了提高性能，在这个属性上添加一个 IRepository 的缓存字段。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RefEntityProperty`1.Loader">
            <summary>
            自定义的引用实体加载器。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RefEntityLoader">
            <summary>
            引用实体加载器方法。
            </summary>
            <param name="id">引用实体的 id。</param>
            <param name="owner">拥有该引用属性的实体。</param>
            <returns>返回对应的引用实体。</returns>
        </member>
        <member name="T:Rafy.Domain.RegisterRefArgs">
            <summary>
            声明引用实体属性的参数对象。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.RefIdProperty">
            <summary>
            对应的引用 Id 属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.Serializable">
            <summary>
            是否需要序列化引用实体
            
            如果不设置任何值，默认情况下：引用实体对象只会从服务端序列化到客户端。从客户端传输到服务端时，不会序列化。
            （
            这是因为服务端可以简单地查询出所有的数据，而不需要客户端传输过来。
            客户端如何需要把多个实体一同传输到服务端时，应该使用服务把多个实体同时设置为服务的输入。
            ）
            </summary>
        </member>
        <member name="P:Rafy.Domain.RegisterRefArgs.Loader">
            <summary>
            实例加载器（使用外键拥有者作为加载上下文）
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.ClassMetaReader">
            <summary>
            从 Rafy 元数据中读取整个数据库的元数据。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader._foreigns">
            <summary>
            临时存储在这个列表中，最后再整合到 Database 中。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.BuildTable(Rafy.MetaModel.EntityMeta)">
            <summary>
            根据实体类型创建表的描述信息，并添加到数据库中
            </summary>
            <param name="em">The memory.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.InvalidOperationException">refMeta.ReferenceInfo == null</exception>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.AddTable(Rafy.DbMigration.Model.Table)">
            <summary>
            将表添加到数据库中，对于已经存在的表进行全并
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.BuildFKRelations">
            <summary>
            构造外键的描述，并创建好与数据库、表、列的相关依赖关系
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.ClassMetaReader.TypesMetaReader.ForeignConstraintInfo">
            <summary>
            简单描述外键约束的信息，在表构建完成后，用些信息构造外键约束
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.DbHistoryRepository">
            <summary>
            使用 DbMigrationHistory 库来记录数据库升级日志的日志仓库类。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext">
            <summary>
            在 DbMigrationContext 的基础上实现以下功能：
            * 读取元数据，获取目标数据库 Schema
            * 使用 DbMigrationHistory 库来支持历史日志
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.RafyDbMigrationContext.ClassMetaReader">
            <summary>
            从实体类型元数据中读取数据库结构的读取器。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory.TimeId">
            <summary>
            SqlCE 数据库的 DateTime 类型的精度不够，会造成数据丢失，使得历史记录的时间对比出错。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.DbMigration.Presistence.DbMigrationHistory.TimeString">
            <summary>
            由于 TimeId 不利于显示，所以添加一个 TimeString 冗余字符专用于显示时间。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.RdbTableFactory.CreateORMTable(Rafy.Domain.IRepositoryInternal)">
            <summary>
            为某个指定的仓库对象构造一个 DbTable
            </summary>
            <param name="repo"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.FullAddIntoList(Rafy.Domain.ITreeComponent,System.Collections.Generic.IList{Rafy.Domain.Entity})">
            <summary>
            先让树完整加载，然后再把树中的节点全部加入到指定的列表中。
            </summary>
            <param name="tree"></param>
            <param name="nodes"></param>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.LoadTreeData(System.Collections.Generic.IList{Rafy.Domain.Entity},System.Collections.IEnumerable,Rafy.MetaModel.TreeIndexOption)">
            <summary>
            以树节点加载算法加载数据。
            </summary>
            <param name="list">The list.</param>
            <param name="nodes">The nodes.</param>
            <param name="indexOption">The index option.</param>
        </member>
        <member name="M:Rafy.Domain.TreeHelper.TryAddToList(System.Collections.Generic.IList{Rafy.Domain.Entity},Rafy.Domain.Entity,Rafy.MetaModel.TreeIndexOption)">
            <summary>
            必须要同一级的节点才能加入到实体列表中。
            Test：TET_Query_LoadSubTreeIgnoreOtherNodes
            </summary>
            <param name="list"></param>
            <param name="node"></param>
            <param name="indexOption"></param>
        </member>
        <member name="T:Rafy.Domain.DiffSaveService">
            <summary>
            差异保存类
            </summary>
        </member>
        <member name="M:Rafy.Domain.DiffSaveService.CreateClear">
            <summary>
            创建一个数据的“清理器”
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.IDataClear">
            <summary>
            数据清理器
            </summary>
        </member>
        <member name="M:Rafy.Domain.IDataClear.ClearData(Rafy.Domain.Entity)">
            <summary>
            删除不必要的对象，只留下需要保存的数据
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.IDataClear.MakeSaved(Rafy.Domain.Entity)">
            <summary>
            设置对象树的状态为“已保存”。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="T:Rafy.Domain.CleanDataClear">
            <summary>
            把未修改的数据都清除的清理器
            </summary>
        </member>
        <member name="M:Rafy.Domain.CleanDataClear.ClearDataCore(Rafy.Domain.Entity,Rafy.MetaModel.EntityMeta)">
            <summary>
            删除不必要的对象，只留下需要保存的“脏”数据
            </summary>
            <param name="diffEntity">The difference entity.</param>
            <param name="entityInfo">The entity information.</param>
        </member>
        <member name="M:Rafy.Domain.CleanDataClear.MakeSavedCore(Rafy.Domain.Entity,Rafy.MetaModel.EntityMeta)">
            <summary>
            清除子对象集合
            </summary>
            <param name="oldEntity">The old entity.</param>
            <param name="entityInfo">The entity information.</param>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateDescriptor">
            <summary>
            聚合加载描述器。
            
            目前只包含一些聚合加载选项“AggregateSQLItem”
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateDescriptor.AddItem(Rafy.Domain.ORM.LoadOptionItem)">
            <summary>
            追加一个聚合加载选项
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Rafy.Domain.ORM.AggregateDescriptor.Items">
            <summary>
            所有的AggregateSQLItem
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.AggregateDescriptor.DirectlyQueryType">
            <summary>
            直接加载的实体类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateEntityLoader">
            <summary>
            聚合实体的加载器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.Query(Rafy.Domain.EntityList,System.String)">
            <summary>
            通过聚合SQL加载整个聚合对象列表。
            </summary>
            <param name="list">The list.</param>
            <param name="sql">The SQL.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.ReadFromTable(Rafy.Domain.EntityList,Rafy.Domain.ORM.IDataTable,System.Collections.Generic.LinkedListNode{Rafy.Domain.ORM.LoadOptionItem})">
            <summary>
            根据 optionNode 中的描述信息，读取 table 中的数据组装为对象列表并返回。
            如果 optionNode 中指定要加载更多的子/引用对象，则会递归调用自己实现聚合加载。
            </summary>
            <param name="list">The list.</param>
            <param name="table">The table.</param>
            <param name="optionNode">The option node.</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.AggregateEntityLoaderHelper.ReadFromTable(Rafy.Domain.EntityList,Rafy.Domain.ORM.IDataTable,System.Action{Rafy.Domain.Entity,Rafy.Domain.ORM.IDataTable})">
            <summary>
            这个方法把table中的数据全部读取并转换为对象存入对象列表中。
            
            算法简介：
            由于子对象的数据都是存储在这个IGTable中，所以每一个TEntity可能对应多个行，
            每一行数据其实就是一个子对象的数据，而TEntity的属性值是重复的。
            所以这里找到每个TEntity对应的第一行和最后一行，把它封装为一个子表格，传给子对象集合进行加载。
            这样的设计是为了实现重用这个方法：集合加载IGTable中的数据。
            </summary>
            <param name="list">转换的对象存入这个列表中</param>
            <param name="table">表格数据，数据类型于以下形式：
            TableA  TableB  TableC  TableD...
            a1      b1      c1
            a1      b1      c2
            a2      b2      NULL
            a3      NULL    NULL
            ...</param>
            <param name="relationLoader">为每个TEntity调用此方法，从IGTable中加载它对应的孩子对象。
            加载完成后的对象会被加入到list中，所以此方法有可能返回一个全新的TEntity。</param>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateEntityLoader.AggregateEntityLoaderHelper.CreateEntity(System.Type,Rafy.Domain.ORM.IDataTable,System.Int32,System.Int32,System.Action{Rafy.Domain.Entity,Rafy.Domain.ORM.IDataTable})">
            <summary>
            把 table 从 startRow 到 endRow 之间的数据，都转换为一个 TEntity 并返回。
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="table">The table.</param>
            <param name="startRow">The start row.</param>
            <param name="endRow">The end row.</param>
            <param name="relationLoader">The relation loader.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateSQLGenerator">
            <summary>
            聚合SQL的生成器
            
            使用了以下约定：
            主键名是 "Id"
            属性名就是列名。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.#ctor(Rafy.Domain.ORM.AggregateDescriptor,System.String,System.String)">
            <summary>
            生成指定加载选项的聚合SQL。
            </summary>
            <param name="aggregate">
            聚合加载选项
            </param>
            <param name="whereCondition">
            简单的过滤条件，如：
            PBS.PBSTypeId = '...'
            
            如果传入Null，则默认生成以根对象为条件的格式化字符串。
            </param>
            <param name="joinFilterCondition">
            用于配合where条件进行过滤的join条件
            select 
            {0},
            {1}
            from PBS 
                join ProjectPBS pp on pbs.Id = pp.PBSId
                left outer join PBSBQItem i on pbs.Id = i.PBSId
            where pp.ProjectId = '{{0}}'
            order by pbs.Id, i.Id"
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.Generate">
            <summary>
            生成对应的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.AggregateSQLGenerator.GetTableAlias(System.String)">
            <summary>
            获取/生成表名的临时表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.LoadOptionItem">
            <summary>
            生成聚合SQL的加载项中的某一项
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.PropertyMeta">
            <summary>
            加载这个属性。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.LoadType">
            <summary>
            指标这个属性是一般的实体
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.OwnerType">
            <summary>
            拥有这个属性的实体类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.ORM.LoadOptionItem.PropertyEntityType">
            <summary>
            这个属性对应的实体类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.AggregateLoadType">
            <summary>
            属性的加载类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.AggregateLoadType.Children">
            <summary>
            加载子对象集合属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.ORM.AggregateLoadType.ReferenceEntity">
            <summary>
            加载外键引用实体。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ChildrenSelector">
            <summary>
            孩子选择器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.ChildrenSelector.Continue``1">
            <summary>
            把孩子集合转换为实体对象，需要继续加载它的子对象
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SQLColumnsGenerator">
            <summary>
            聚合SQL列名的生成器
            
            从原有的EntityRepository中直接抽取出来的类。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SQLColumnsGenerator.ReadDataDirectly(System.Data.DataRow)">
            <summary>
            数据行中的列名必须由 SQLColumnsGenerator 生成的列名对应。
            </summary>
            <param name="rowData"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlServer.BatchInsert">
            <summary>
            批量插入实体的类
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.BatchInsert.#ctor(System.Collections.Generic.IList{Rafy.Domain.Entity},System.Data.SqlClient.SqlConnection,Rafy.Domain.ORM.RdbTable)">
            <summary>
            为指定的实体列表构造一个批处理命令。
            </summary>
            <param name="entityList"></param>
            <param name="db"></param>
            <param name="table"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.BatchInsert.Execute">
            <summary>
            执行插入命令
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.BatchInsert.SaveBulk(System.Data.DataTable)">
            <summary>
            保存数据到数据库中。
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.BatchInsert.SetMappings(System.Data.SqlClient.SqlBulkCopyColumnMappingCollection)">
            <summary>
            设置DataTable到数据库中表的映射
            </summary>
            <param name="mappings"></param>
        </member>
        <member name="T:Rafy.Domain.Caching.AggregateChecker">
            <summary>
            组合检测条件的检测器
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateChecker.Add(Rafy.Utils.Caching.ChangeChecker)">
            <summary>
            添加一个新的检测器
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateChecker.Check">
            <summary>
            所有条件通过，才算通过。
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.AggregateRootCache">
            <summary>
            聚合根对象的内存缓存对象
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.ModifyRootEntity(Rafy.Domain.IRepository,Rafy.Domain.Entity)">
            <summary>
            直接设置根对象为缓存
            </summary>
            <param name="repository">The repository.</param>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.CacheById(Rafy.Domain.IRepository,System.Object)">
            <summary>
            从缓存中读取指定实体类型的所有数据。
            如果缓存中不存在，或者缓存数据已经过期，则调用 GetByIdCore 方法获取数据，并把最终数据加入到缓存中。
            </summary>
            <param name="repository">The repository.</param>
            <param name="id">The unique identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.Caching.AggregateRootCache.GetAggregateChildrenTypes(System.Type,System.Collections.Generic.IList{System.Type})">
            <summary>
            递归获取指定类型下所有的子类型
            </summary>
            <param name="entityType"></param>
            <param name="types"></param>
        </member>
        <member name="T:Rafy.Domain.DomainMetaExtension">
            <summary>
            Rafy.Library 对元数据的扩展
            </summary>
        </member>
        <member name="F:Rafy.Domain.DomainMetaExtension.SaveListServiceTypeKey">
            <summary>
            '列表保存服务类型'属性在扩展属性中的键。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableServerCache(Rafy.MetaModel.EntityMeta)">
            <summary>
            启用服务端内存缓存。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableClientCache(Rafy.MetaModel.EntityMeta,System.Int32)">
            <summary>
            启用缓存，并估计缓存的数量。
            </summary>
            <param name="meta"></param>
            <param name="estimatedDataCount">
            预估的数据行数。
            系统会根据此数量来选择使用的缓存策略。例如：超过 1000 条的组合子对象使用组合缓存。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.EnableClientCache(Rafy.MetaModel.EntityMeta,Rafy.MetaModel.ClientCacheScopeType)">
            <summary>
            根据简单策略来启用缓存。
            </summary>
            <param name="meta"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.SetSaveListServiceType(Rafy.MetaModel.EntityMeta,System.Type)">
            <summary>
            设置对象的'列表保存服务类型'属性。
            </summary>
            <param name="ext">扩展属性的对象。</param>
            <param name="value">设置的属性值。</param>
            <returns>扩展属性的对象。</returns>
        </member>
        <member name="M:Rafy.Domain.DomainMetaExtension.GetSaveListServiceType(Rafy.MetaModel.EntityMeta)">
            <summary>
            获取对象的'列表保存服务类型'属性。
            </summary>
            <param name="ext">扩展属性的对象。</param>
            <returns>被扩展的属性值，或者该属性的默认值。</returns>
        </member>
        <member name="T:Rafy.Domain.Caching.CacheInstance">
            <summary>
            缓存的几个默认实例。
            
            应用层可修改这些属性来实现自己的缓存逻辑。
            </summary>
        </member>
        <member name="F:Rafy.Domain.Caching.CacheInstance.CACHE_FILE_NAME">
            <summary>
            默认使用的硬盘 sqlce 缓存文件。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstance.Memory">
            <summary>
            内存缓存
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstance.Disk">
            <summary>
            硬盘缓存。
            默认使用 SqlCe 的硬盘缓存
            </summary>
        </member>
        <member name="P:Rafy.Domain.Caching.CacheInstance.MemoryDisk">
            <summary>
            一个先用内存，后用硬盘的二级缓存
            默认使用 SqlCe 作为二级缓存的硬盘缓存
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionChecker">
            <summary>
            Rafy中使用的版本号检测器。
            </summary>
        </member>
        <member name="M:Rafy.Domain.Caching.VersionChecker.#ctor">
            <summary>
            Used by Memoto
            </summary>
        </member>
        <member name="T:Rafy.Domain.Caching.VersionChecker.VCM">
            <summary>
            VersionChecker的Memoto
            “VersionCheckerMemoto”
            </summary>
        </member>
        <member name="T:Rafy.Domain.ConnectionStringNames">
            <summary>
            数据库使用的连接字符串名
            统一管理Connection字符串
            </summary>
        </member>
        <member name="F:Rafy.Domain.ConnectionStringNames.RafyPlugins">
            <summary>
            默认情况下 Rafy 插件使用的库配置名。
            
            外界可以在程序启动时修改这个值以使得它和其它的库使用同一个配置。
            </summary>
        </member>
        <member name="F:Rafy.Domain.ConnectionStringNames.DbMigrationHistory">
            <summary>
            默认情况下迁移记录库使用的库配置名。
            
            外界可以在程序启动时修改这个值以使得它和其它的库使用同一个配置。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RF">
            <summary>
            Repository Factory的API门户
            
            封装了一些静态代理方法的实体分为代理类。
            主要是方便上层的调用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.RF.Find(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.Find``1">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <typeparam name="TEntity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.Concrete``1">
            <summary>
            用于查找指定类型的仓库。
            </summary>
            <typeparam name="TRepository"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.Save(Rafy.Domain.EntityList)">
            <summary>
            保存某个实体列表。
            </summary>
            <param name="entityList">The entity list.</param>
        </member>
        <member name="M:Rafy.Domain.RF.Save(Rafy.Domain.Entity)">
            <summary>
            保存某个实体。
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.RF.Save(Rafy.Domain.Entity,Rafy.Domain.EntitySaveType)">
            <summary>
            保存某个实体。
            </summary>
            <param name="entity"></param>
            <param name="saveWay"></param>
        </member>
        <member name="M:Rafy.Domain.RF.TransactionScope(System.String)">
            <summary>
            通过数据库配置名构造一个 单连接事务块。
            </summary>
            <param name="dbSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.TransactionScope(Rafy.Domain.EntityRepository)">
            <summary>
            通过数据库配置名的代理：实体仓库，构造一个 单连接事务块。
            </summary>
            <param name="dbDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.EnterEntityContext">
            <summary>
            申明一个实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.RF.DisableEntityContext">
            <summary>
            申明一个禁用了实体上下文操作代码块。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.EntitySaveType">
            <summary>
            实体保存时的类型
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySaveType.DiffSave">
            <summary>
            差异保存
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntitySaveType.Normal">
            <summary>
            一般保存
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneOptions">
            <summary>
            克隆方法选项
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.ReadSingleEntity">
            <summary>
            读取数据行的数据
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.ReadDbRow">
            <summary>
            读取数据行的数据
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.NewComposition">
            <summary>
            组合克隆。
            会克隆其所有的孩子对象。
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.MergeOldEntity">
            <summary>
            从旧实体中合并值。
            
            复制完成后，旧实体不再可用。
            </summary>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.NotifyCloned(Rafy.Domain.Entity,Rafy.Domain.Entity)">
            <summary>
            某一个 Entity 拷贝完成后，会调用此方法。
            </summary>
            <param name="oldEntity"></param>
            <param name="newEntity"></param>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.IgnoreProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            调用此方法，通知框架在复制CSLA值时，过滤掉一些无用的属性。
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:Rafy.Domain.CloneOptions.RetrieveIgnoreListOnce">
            <summary>
            获取一次性的 IgoreList
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Actions">
            <summary>
            所有要进行的复制操作。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Method">
            <summary>
            值在复制时使用的方法。
            </summary>
        </member>
        <member name="P:Rafy.Domain.CloneOptions.Mappings">
            <summary>
            如果设置了这个属性，则会在复制过程中记住所有的映射序列。
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneActions">
            <summary>
            克隆操作的参数。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.NormalProperties">
            <summary>
            拷贝一般的属性
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.IdProperty">
            <summary>
            拷贝Id
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.RefEntities">
            <summary>
            拷贝引用的对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.ParentRefEntity">
            <summary>
            拷贝引用的父对象
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.GrabChildren">
            <summary>
            抢夺对方的组合子。
            组合子集合属性中的所有孩子对象的父指针也已经被更改为新实体。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneActions.ChildrenRecur">
            <summary>
            使用相同的拷贝方案，递归拷贝子对象及树的子节点。
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneValueMethod">
            <summary>
            值在复制时的方法
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneValueMethod.LoadProperty">
            <summary>
            直接把值加载到对象中。
            </summary>
        </member>
        <member name="F:Rafy.Domain.CloneValueMethod.SetProperty">
            <summary>
            使用较慢的设置值方法来拷贝值，但是发生对应的属性变更事件。
            </summary>
        </member>
        <member name="T:Rafy.Domain.CloneMappings">
            <summary>
            此类职责：记录所有被复制的对象和原有对象间的映射关系
            </summary>
        </member>
        <member name="T:Rafy.Domain.DictionaryRepositoryFactory">
            <summary>
            实体仓库工厂类
            
            用于创建指定实体的仓库。
            
            Repository 全部使用单例模式
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRepositoryFactory">
            <summary>
            ILazyProvider的抽象工厂
            </summary>
        </member>
        <member name="M:Rafy.Domain.IRepositoryFactory.FindByEntity(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IRepositoryFactory.Find(System.Type)">
            <summary>
            通过仓库类型查找指定的仓库。
            </summary>
            <param name="repoType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._repoByEntityType">
            <summary>
            使用 EntityType 作为查询键的字典。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._repoByType">
            <summary>
            使用 RepositoryType 作为查询键的字典。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._lastRepository">
            <summary>
            使用这个字段高速缓存最后一次使用的Repository。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.Find(System.Type)">
            <summary>
            通过仓库类型查找指定的仓库。
            </summary>
            <param name="repositoryType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.FindByEntity(System.Type)">
            <summary>
            用于查找指定实体的仓库。
            如果还没有创建，则直接创建一个。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.DoCreate(System.Type)">
            <summary>
            创建一个实体类型的仓库。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._extLoaded">
            <summary>
            是否所有的仓库扩展已经加载完成。
            </summary>
        </member>
        <member name="F:Rafy.Domain.DictionaryRepositoryFactory._extByType">
            <summary>
            所有的仓库扩展类。
            
            Key: 仓库类型。
            Value: 一个仓库扩展类型的列表。
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.AddExtensions(Rafy.Domain.EntityRepository)">
            <summary>
            为指定的仓库加载所有的仓库扩展类。
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.LoadAllExtensions">
            <summary>
            加载所有插件中的实体仓库扩展类
            </summary>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.CreateDefaultRepository(System.Type)">
            <summary>
            如果上面在约定中没有找到，则直接生成一个默认的实体仓库。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.DictionaryRepositoryFactory.GenerateDefaultRepositoryType(System.Type)">
            <summary>
            为实体类型生成一个默认的实体类。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.ORM.SqlServer.EntityChldrenBatchReader">
            <summary>
            根实体的所有孩子的读取器
            </summary>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.EntityChldrenBatchReader.#ctor(Rafy.Domain.Entity)">
            <summary>
            为指定的根实体构造一个读取器
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.EntityChldrenBatchReader.Read">
            <summary>
            执行读取操作，返回读取到的实体字典。
            
            实体字典：
            Key：实体的类型
            Value：对应实体类型的所有实体。
            
            注意，本字典中Key的类型排序和聚合对象的父子关系一致。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.EntityChldrenBatchReader.ReadChildren(Rafy.Domain.Entity)">
            <summary>
            递归读取根对象的所有子对象
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Rafy.Domain.ORM.SqlServer.EntityChldrenBatchReader.FindAggregateList(System.Type)">
            <summary>
            找到对应实体的全部对象列表
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Domain.RepositoryFactoryHost">
            <summary>
            这个类主要用于依赖注入ILazyProviderFactory
            </summary>
        </member>
        <member name="F:Rafy.Domain.RepositoryFactoryHost.Factory">
            <summary>
            依赖注入的ILazyProviderFactory。
            </summary>
        </member>
        <member name="T:Rafy.Domain.GetByParentIdCriteria">
            <summary>
            本类中的 Id 即是 ParentId 的值。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RafyDomainLibrary">
            <summary>
            Rafy Domain 本身也是一个 DomainPlugin
            </summary>
        </member>
        <member name="T:Rafy.Domain.ORM.ORMException">
            <summary>
            ORM 操作异常
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.BrokenRule">
            <summary>
            表示触犯的规则的明细。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Rule">
            <summary>
            触犯的规则。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Description">
            <summary>
            触发规则的描述信息。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.BrokenRule.Property">
            <summary>
            如果这是某个属性关联的规则参数，则这个属性表示关联的托管属性
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.BrokenRulesCollection">
            <summary>
            违反的业务规则的集合。
            </summary>
            <remarks>
            This collection is readonly and can be safely made available
            to code outside the business object such as the UI. This allows
            external code, such as a UI, to display the list of broken rules
            to the user.
            </remarks>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString">
            <summary>
            Returns the text of all broken rule descriptions, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(Rafy.MetaModel.RuleLevel)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity, each
            separated by a <see cref="P:System.Environment.NewLine"/>.
            </summary>
            <param name="level">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(System.String)">
            <summary>
            Returns the text of all broken rule descriptions.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <returns>The text of all broken rule descriptions.</returns>
        </member>
        <member name="M:Rafy.Domain.Validation.BrokenRulesCollection.ToString(System.String,Rafy.MetaModel.RuleLevel)">
            <summary>
            Returns the text of all broken rule descriptions
            for a specific severity.
            </summary>
            <param name="separator">
            String to place between each broken rule description.
            </param>
            <param name="level">The severity of rules to
            include in the result.</param>
            <returns>The text of all broken rule descriptions
            matching the specified severtiy.</returns>
        </member>
        <member name="T:Rafy.Domain.Validation.Rule">
            <summary>
            Tracks all information for a rule.
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.RulesContainer">
            <summary>
            简单的规则列表。
            
            提供排序的方法
            </summary>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationException">
            <summary>
            Exception class indicating that there was a validation
            problem with a business object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor">
            <summary>
            Creates an instance of the object.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.String)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the object.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates an instance of the object for serialization.
            </summary>
            <param name="context">Serialization context.</param>
            <param name="info">Serialization info.</param>
        </member>
        <member name="T:Rafy.Domain.Validation.ValidationRulesManager">
            <summary>
            Maintains rule methods for a business object
            or business object type.
            </summary>
        </member>
        <member name="M:Rafy.Domain.Validation.ValidationRulesManager.GetRulesForProperty(Rafy.ManagedProperty.IManagedProperty,System.Boolean)">
            <summary>
            获取指定属性对应的属性规则容器。
            </summary>
            <param name="property">托管属性。</param>
            <param name="createList">如果还没有创建容器，是否需要同时创建该容器。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.TypeRules">
            <summary>
            这些规则不与某个属性关联，是直接作用在整个实体上的。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.TypeRulesCount">
            <summary>
            所有类型规则的总数。
            </summary>
        </member>
        <member name="P:Rafy.Domain.Validation.ValidationRulesManager.PropertyRulesCount">
            <summary>
            所有属性规则的总数。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ContractImplAttribute">
            <summary>
            标记在服务类型上的契约实现标记。
            用于描述一个服务实现了何种契约，以及相应的具体元数据。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ContractImplAttribute.#ctor">
            <summary>
            构造函数。用于构造一个使用当前服务为契约的契约实现标记。
            </summary>
        </member>
        <member name="M:Rafy.Domain.ContractImplAttribute.#ctor(System.Type)">
            <summary>
            构造函数。用于构造一个使用指定契约的契约实现标记。
            </summary>
            <param name="contractType"></param>
        </member>
        <member name="P:Rafy.Domain.ContractImplAttribute.ContractType">
            <summary>
            实现的契约的类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.ContractImplAttribute.Version">
            <summary>
            服务实现的版本号
            默认版本号是 1.0.0.0。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceFactory">
            <summary>
            服务工厂
            <remarks>
            本类是线程安全的。
            </remarks>
            </summary>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create``1">
            <summary>
            创建一个具体的服务。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create(System.Type)">
            <summary>
            创建一个具体的服务。
            </summary>
            <param name="contractType">契约类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.ServiceFactory.Create(System.Type,System.Version)">
            <summary>
            创建一个指定版本的服务。
            </summary>
            <param name="contractType">服务类型.</param>
            <param name="version">需要的服务的版本号.</param>
            <returns></returns>
        </member>
    </members>
</doc>
