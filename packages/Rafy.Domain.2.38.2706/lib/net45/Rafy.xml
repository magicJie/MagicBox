<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy</name>
    </assembly>
    <members>
        <member name="T:Rafy.ComponentModel.AppImplementationBase">
            <summary>
            这个类为 ClientApp、ServerApp、WebApp 等类提供了一致的基类。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IServerApp">
            <summary>
            服务端应用程序生命周期定义
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IApp">
            <summary>
            应用程序生成周期定义
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.AllPluginsIntialized">
            <summary>
            所有实体元数据初始化完毕，包括实体元数据之间的关系。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.MetaCompiled">
            <summary>
            所有初始化期定义的元数据初始化完成时事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ModuleOperations">
            <summary>
            模块的定义先于其它模型的操作。这样可以先设置好模板默认的按钮。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ModuleOperationsCompleted">
            <summary>
            模块的定义完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.AppMetaCompleted">
            <summary>
            所有初始化工作完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.ComposeOperations">
            <summary>
            组件的组合操作。
            组合可以在此事件中添加自己的组合逻辑，例如 A 订阅 B 的某个事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.Composed">
            <summary>
            所有组件组合完毕。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.RuntimeStarting">
            <summary>
            应用程序运行时行为开始。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.MainProcessStarting">
            <summary>
            主过程开始前事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.StartupCompleted">
            <summary>
            AppStartup 完毕
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IApp.Exit">
            <summary>
            应用程序完全退出
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.StartupApplication">
            <summary>
            子类在合适的时间调用此方法来启动整个 Rafy 应用程序。
            
            注意，为了支持重新启动，这个类中的所有方法都应该可以运行多次。
            
            但是，第二次及之后的重启，不应该使用同一个 AppImplementationBase 的实例，否则可能会造成插件重复监听同一事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.PrepareToStartup">
            <summary>
            此方法中会重置整个 Rafy 环境。这样可以保证各插件的注册机制能再次运行。
            例如，当启动过程中出现异常时，可以重新使用 Startup 来启动应用程序开始全新的启动流程。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.InitEnvironment">
            <summary>
            初始化应用程序的环境。
            子类可在此方法中添加所需的插件、设置 <see cref="P:Rafy.RafyEnvironment.Location"/> 等。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.InitAllPlugins">
            <summary>
            初始化所有Plugins
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.SetupLanguage">
            <summary>
            设置当前语言
            
            需要在所有 Translator 依赖注入完成后调用。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.CompileMeta">
            <summary>
            初始化必须在初始化期定义的各种元数据。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.StartMainProcess">
            <summary>
            子类重写此方法实现启动主逻辑。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnAllPluginsIntialized">
            <summary>
            触发 AllPluginsIntialized 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnMetaCompiled">
            <summary>
            触发 MetaCompiled 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.RaiseModuleOpertions">
            <summary>
            触发 ModuleOperations 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnModuleOpertionsCompleted">
            <summary>
            触发 ModuleOperationsCompleted 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnAppMetaCompleted">
            <summary>
            触发 AppMetaCompleted 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.RaiseComposeOperations">
            <summary>
            触发 ComposeOperations 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnComposed">
            <summary>
            触发 Composed 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnRuntimeStarting">
            <summary>
            触发 RuntimeStarting 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnMainProcessStarting">
            <summary>
            触发 MainProcessStarting 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnExit">
            <summary>
            触发 Exit 事件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.AppImplementationBase.OnStartupCompleted">
            <summary>
            触发 StartupCompleted 事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.AllPluginsIntialized">
            <summary>
            所有实体元数据初始化完毕，包括实体元数据之间的关系。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.MetaCompiled">
            <summary>
            所有初始化期定义的元数据初始化完成时事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ModuleOperations">
            <summary>
            模块的定义先于其它模型的操作。这样可以先设置好模板默认的按钮。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ModuleOperationsCompleted">
            <summary>
            模块的定义完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.AppMetaCompleted">
            <summary>
            所有初始化工作完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.ComposeOperations">
            <summary>
            组件的组合操作。
            组合可以在此事件中添加自己的组合逻辑，例如 A 订阅 B 的某个事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.Composed">
            <summary>
            所有组件组合完毕。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.RuntimeStarting">
            <summary>
            应用程序运行时行为开始。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.MainProcessStarting">
            <summary>
            主过程开始前事件。
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.Exit">
            <summary>
            应用程序完全退出
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.AppImplementationBase.StartupCompleted">
            <summary>
            AppStartup 完毕
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.Composer">
            <summary>
            组件组合器。
            实现组件间组合的通信机制。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.Composer.RegisterAllPluginsByAttribute">
            <summary>
            组合所有组件中标记了 <see cref="T:Rafy.ComponentModel.ContainerItemAttribute"/> 的类型到 IOC 容器中。
            
            此方法只能调用一次，
            而且应该重写 <see cref="M:Rafy.ComponentModel.AppImplementationBase.RaiseComposeOperations"/> 方法中调用。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.Composer.RegisterByAttribute(Rafy.ComponentModel.IPlugin)">
            <summary>
            注册指定插件中标记了 <see cref="T:Rafy.ComponentModel.ContainerItemAttribute"/> 的类型到 IOC 容器中。
            此方法应该在 ComposeOperations 周期中执行。
            
            <example>
            <![CDATA[
            使用方法
            app.ComposeOperations += app_ComposeOperations;
            void app_ComposeOperations(object sender, EventArgs e)
            {
                //直接通过 ContainerItemAttribute 注册整个程序集。
                //Composer.AutoRegisterByContainerItemAttribute(this);
            
                //使用 ObjectContainer 来注册。
                //var container = Composer.ObjectContainer;
                //container.RegisterType<IPlugin, UnityAdapterPlugin>();
            
                //引用 Rafy.ComponentModel.UnityAdapter 插件后，还可以使用 UnityContainer 来注册，并同时注册拦截器。
                //var container = UnityAdapterHelper.GetUnityContainer(Composer.ObjectContainer);
                //container.RegisterType<IPlugin, UnityAdapterPlugin>();
            }
            ]]>
            </example>
            </summary>
            <param name="plugin">The plugin.</param>
            <exception cref="T:System.ArgumentNullException">plugin</exception>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.ObjectContainer">
            <summary>
            默认的 IOC 容器。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.ServiceContainer">
            <summary>
            组件的服务容器。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.Composer.EventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.ContainerItemAttribute">
            <summary>
            在某个类型上指定的标记，说明该类型将会注册到 IOC 默认容器中。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ContainerItemAttribute.#ctor(System.Type)">
            <summary>
            构造器。
            </summary>
            <param name="provideFor">为这个类型提供实例。</param>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.ProvideFor">
            <summary>
            为这个类型提供实例。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.RegisterWay">
            <summary>
            注册到 IOC 容器中的方式。默认值为 <see cref="F:Rafy.ComponentModel.RegisterWay.Type"/>。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.ContainerItemAttribute.Key">
            <summary>
            注册时使用的键。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.RegisterWay">
            <summary>
            注册到 IOC 容器中的方式。
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.RegisterWay.Instance">
            <summary>
            以单一实例的方式注册。
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.RegisterWay.Type">
            <summary>
            以类型的方式注册。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IEventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Publish(System.Object)">
            <summary>
            向总线发布一个指定的事件。
            </summary>
            <param name="eventModel"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Publish``1(``0)">
            <summary>
            向总线发布一个指定的事件。
            </summary>
            <typeparam name="TEvent"></typeparam>
            <param name="eventModel"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Subscribe``1(System.Object,System.Action{``0})">
            <summary>
            向总线订阅一个指定的事件。
            </summary>
            <typeparam name="TEvent">事件类型。</typeparam>
            <param name="owner">事件的监听者。</param>
            <param name="handler">监听函数。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.Unsubscribe``1(System.Object)">
            <summary>
            向总线取消一个指定的事件的订阅。
            </summary>
            <typeparam name="TEvent">事件类型。</typeparam>
            <param name="owner">事件的监听者。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IEventBus.GetSubscribers``1">
            <summary>
            获取指定事件的所有监听者。
            </summary>
            <typeparam name="TEvent">指定的事件类型。</typeparam>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.IEventSubscribers">
            <summary>
            某个事件的处理者列表。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IEventSubscribers.Publish(System.Object)">
            <summary>
            直接向所有监听者发布该事件。
            </summary>
            <param name="eventModel"></param>
        </member>
        <member name="P:Rafy.ComponentModel.IEventSubscribers.EventType">
            <summary>
            对应的事件类型。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.IEventSubscribers.Count">
            <summary>
            返回当前已有的监听者个数。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IObjectContainer">
            <summary>
            IOC 容器
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.ResolveAll(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.Resolve(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="type"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="key">如果有必须，则传入实例的键。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterInstance(System.Type,System.Type,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <param name="type">The type.</param>
            <param name="instanceType">唯一实例的类型，该类型的实例会在第一次使用时被创建。</param>
            <param name="key">如果有必须，则传入实例的键。</param>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainer.RegisterType(System.Type,System.Type,System.String)">
            <summary>
            注册类型
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="key">如果有必须，则传入实例的键。否则传入 null。</param>
        </member>
        <member name="T:Rafy.ComponentModel.IServiceContainer">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IServiceContainer.GetAllInstances(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.IServiceContainer.GetService(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="serviceType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.IObjectContainerFactory">
            <summary>
            IOC 容器工厂。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IObjectContainerFactory.CreateContainer">
            <summary>
            创建一个独立的的 IOC 容器
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.CompositionExtension">
            <summary>
            IServiceContainer 扩展方法集
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetService``1(System.IServiceProvider)">
            <summary>
            获取指定类型的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetService``1(Rafy.ComponentModel.IServiceContainer,System.String)">
            <summary>
            获取指定类型指定键名的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.GetAllInstances``1(Rafy.ComponentModel.IServiceContainer)">
            <summary>
            获取指定类型的所有实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.Resolve``1(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            获取指定类型的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.Resolve``1(Rafy.ComponentModel.IObjectContainer,System.String)">
            <summary>
            获取指定类型指定键名的实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.ResolveAll``1(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            获取指定类型的所有实例。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.RegisterInstance``1(Rafy.ComponentModel.IObjectContainer,``0,System.String)">
            <summary>
            注册唯一实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="container">The container.</param>
            <param name="instance">The instance.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Rafy.ComponentModel.CompositionExtension.RegisterType``2(Rafy.ComponentModel.IObjectContainer,System.String)">
            <summary>
            注册类型
            </summary>
            <typeparam name="TFrom">The type of the interface.</typeparam>
            <typeparam name="TTo">The type of the class.</typeparam>
            <param name="container">The container.</param>
            <param name="key">The key.</param>
        </member>
        <member name="T:Rafy.ComponentModel.ObjectContainerFactory">
            <summary>
            IOC 容器工厂。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerFactory.CreateContainer">
            <summary>
            创建一个独立的的 IOC 容器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerFactory.SetProvider(Rafy.ComponentModel.IObjectContainerFactory)">
            <summary>
            指定具体的提供程序
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter">
            <summary>
            从 IObjectContainer 到 IServiceContainer 的适配器。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.#ctor(Rafy.ComponentModel.IObjectContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter"/> class.
            </summary>
            <param name="container">The container.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetAllInstances(System.Type)">
            <summary>
            如果某个服务有多个实例，则可以使用此方法来获取所有的实例。
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetService(System.Type,System.String)">
            <summary>
            如果某个服务有多个实例，则可以通过一个键去获取对应的服务实例。
            </summary>
            <param name="serviceType"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ComponentModel.ObjectContainerToServiceConatinerAdapter.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
        </member>
        <member name="T:Rafy.Configuration.DynamicBoolean">
            <summary>
            用于配置中的一些值。
            可以明确指明 Yes/No，如果不指明，则与当前是否为调试状态一致。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.WPFConfigurationElement.ShowErrorDetail">
            <summary>
            是否显示错误的详细信息。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.WPFConfigurationElement.Skin">
            <summary>
            使用的皮肤名称。
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityConvention">
            <summary>
            实体类的约定
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.QueryMethod">
            <summary>
            实体仓库数据层查询方法的约定名称。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_Id">
            <summary>
            目前实体使用的主键属性的名称。Id。
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_TreePId">
            <summary>
            自关联属性名
            </summary>
        </member>
        <member name="F:Rafy.Domain.EntityConvention.Property_TreeIndex">
            <summary>
            树型实体的编码
            </summary>
        </member>
        <member name="T:Rafy.Domain.EntityMatrix">
            <summary>
            实体类型信息项
            </summary>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByEntity(System.Type)">
            <summary>
            通过实体类找到约定项
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByList(System.Type)">
            <summary>
            通过列表类找到约定项
            </summary>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.FindByRepository(System.Type)">
            <summary>
            通过仓库类找到约定项
            </summary>
            <param name="repositoryType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.EntityMatrix.RepositoryFullName(System.Type)">
            <summary>
            通过约定计算实体类对应的仓库类型的全名称。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.EntityType">
            <summary>
            实体类
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.ListType">
            <summary>
            实体类对应的列表类
            
            Criteria是没有对应的列表类型的，所以这个属性可能为Null
            </summary>
        </member>
        <member name="P:Rafy.Domain.EntityMatrix.RepositoryType">
            <summary>
            实体类对应的仓库类。
            
            如果找不到约定的仓库类，则这个属性为空。
            </summary>
        </member>
        <member name="T:Rafy.Domain.RepositoryForAttribute">
            <summary>
            标记某一个类型是指定的实体对应的仓库类型。
            </summary>
        </member>
        <member name="P:Rafy.Domain.RepositoryForAttribute.EntityType">
            <summary>
            对应的实体类型。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.IRule">
            <summary>
            验证规则及元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Property">
            <summary>
            如果这个规则是适用到某个实体属性上，那么这个属性就表示这个实体的属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Key">
            <summary>
            获取用于表示规则名称。
            </summary>
            <remarks>
            The rule's name must be unique and is used
            to identify a broken rule in the BrokenRules
            collection.
            </remarks>
        </member>
        <member name="P:Rafy.MetaModel.IRule.Meta">
            <summary>
            规则对应的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.IRule.ValidationRule">
            <summary>
            用于执行验证的规则逻辑。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.RuleScope">
            <summary>
            表示规则的作用范围
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleScope.Add">
            <summary>
            作用于数据的插入操作。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleScope.Update">
            <summary>
            作用于数据的更新操作。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleScope.AddOrUpdate">
            <summary>
            Add | Update
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleScope.Delete">
            <summary>
            作用于数据的插入、更新操作。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleScope.All">
            <summary>
            Add | Update | Delete
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationRule.Validate(Rafy.ManagedProperty.ManagedPropertyObject,Rafy.MetaModel.RuleArgs)">
            <summary>
            对某个实体进行验证。
            </summary>
            <param name="entity">The entity.</param>
            <param name="e">The RuleArgs.</param>
        </member>
        <member name="P:Rafy.MetaModel.IValidationRule.ConnectToDataSource">
            <summary>
            此属性指示本规则中是否需要连接数据源。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.RuleMeta">
            <summary>
            规则的元数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.MetaBase">
            <summary>
            职责与支持：
            SetFieldValue
            ICustomParamsHolder
            INotifyPropertyChanged（由于有时元数据直接需要被绑定到 WPF 界面中，所以需要实现这个接口）
            </summary>
        </member>
        <member name="T:Rafy.Utils.Freezable">
            <summary>
            一个可以被冻结的对象
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.Freeze">
            <summary>
            冻结本对象。
            冻结后，对象变为不可变对象。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.CheckUnFrozen">
            <summary>
            调用此方法保证本对象还没有被冻结。否则会抛出异常。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.OnFrozen">
            <summary>
            当对象被冻结时发生。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(System.Collections.IList)">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(System.Collections.IEnumerable)">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.FreezeChildren(Rafy.Utils.Freezable[])">
            <summary>
            调用所有孩子的Freeze方法
            </summary>
            <param name="children"></param>
        </member>
        <member name="M:Rafy.Utils.Freezable.CloneValues(Rafy.Utils.Freezable,Rafy.Utils.FreezableCloneOptions)">
            <summary>
            子类重写此方法来实现更复杂的复制功能。
            默认使用反射进行对象的拷贝。
            
            注意：
            集合字段，需要直接声明为 <![CDATA[IList<T>]]> 类型才能进行拷贝！！！
            </summary>
            <param name="target"></param>
            <param name="option"></param>
        </member>
        <member name="P:Rafy.Utils.Freezable.IsFrozen">
            <summary>
            返回当前的对象是否已经被冻结了。
            子类可以在对状态进行更新时检查此属性。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.RuleMeta.HasScope(Rafy.MetaModel.RuleScope)">
            <summary>
            判断当前规则是否与指定的范围有重叠。
            </summary>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Priority">
            <summary>
            优先级。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Level">
            <summary>
            规则的级别。默认值为：Error。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleMeta.Scope">
            <summary>
            表示规则的作用范围。默认值为：AddOrUpdate。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFEditorNames">
            <summary>
            WPF 中系统自带的编辑器
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_DropDown">
            <summary>
            列表选择属性编辑器
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_Popup">
            <summary>
            一个使用弹出列表界面并进行搜索的引用实体属性编辑器。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.EntitySelection_TiledList">
            <summary>
            一个使用平铺的列表来实现的引用实体属性编辑器。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFEditorNames.Memo">
            <summary>
            大文本
            </summary>
        </member>
        <member name="T:Rafy.Utils.DateTimePart">
            <summary>
            系统的 DateTime 类型正在被使用的部分
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.DateTime">
            <summary>
            日期及时间都被使用
            Rafy 中属性编辑器的默认值。
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.Date">
            <summary>
            使用日期部分
            </summary>
        </member>
        <member name="F:Rafy.Utils.DateTimePart.Time">
            <summary>
            使用时间部分
            </summary>
        </member>
        <member name="T:Rafy.Utils.EnumViewModel">
            <summary>
            枚举值的逻辑视图
            </summary>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.#ctor(System.Enum)">
            <summary>
            构造函数
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.Equals(System.Object)">
            <summary>
            EnumPropertyEditor 和其它地方中使用了这个方法来对比实体。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.GetByEnumType(System.Type)">
            <summary>
            获取某个枚举类型下所有可用的视图值。
            
            注意：不加 Label 的枚举不显示。
            </summary>
            <param name="enumType">枚举类型。注意，支持传入 Nullable(Enum)。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.LabelToEnum(System.String,System.Type)">
            <summary>
            把 Label 解析为目标枚举类型中对应的枚举值。
            </summary>
            <param name="str"></param>
            <param name="enumType">枚举类型（不接受可空类型）</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.EnumViewModel.EnumToLabel(System.Enum)">
            <summary>
            返回一个枚举值对应的 Label。
            如果该枚举值没有标记 Label，则返回 String.Empty。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.EnumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.Label">
            <summary>
            枚举值的显示值
            </summary>
        </member>
        <member name="P:Rafy.Utils.EnumViewModel.TranslatedLabel">
            <summary>
            翻译后的枚举值的显示值
            </summary>
        </member>
        <member name="T:Rafy.Utils.FreezableCloneOptions">
            <summary>
            ready for extend
            </summary>
        </member>
        <member name="F:Rafy.Utils.FreezableCloneOptions.CopiedPairs">
            <summary>
            此数据用于防止循环引用对象时，进行重复的拷贝而导航溢出。
            </summary>
        </member>
        <member name="T:Rafy.Utils.UnAutoFreezeAttribute">
            <summary>
            标记此标记的所有字段都不会在冻结时，自动被 Freezable 基类冻结上。
            </summary>
        </member>
        <member name="T:Rafy.EnvironmentProvider">
            <summary>
            环境变量值提供器。
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.RootDirectory">
            <summary>
            整个应用程序的根目录
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.DllRootDirectory">
            <summary>
            Dll 存在的目录路径
            （Web 项目的路径是 RootDirectory+"/Bin"）
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.IsDebuggingEnabled">
            <summary>
            在程序启动时，设置本属性以指示当前程序是否处于调试状态。
            </summary>
        </member>
        <member name="P:Rafy.EnvironmentProvider.Translator">
            <summary>
            当前使用的翻译器
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IClientApp">
            <summary>
            客户端应用程序生命周期定义
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IClientApp.ShowMessage(System.String,System.String)">
            <summary>
            显示某个应用程序消息。
            </summary>
            <param name="message"></param>
            <param name="title"></param>
        </member>
        <member name="M:Rafy.ComponentModel.IClientApp.Shutdown">
            <summary>
            关闭应用程序
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.CommandMetaIntialized">
            <summary>
            所有命令元数据初始化完成
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.LoginSuccessed">
            <summary>
            登录成功，主窗口开始显示
            </summary>
        </member>
        <member name="E:Rafy.ComponentModel.IClientApp.LoginFailed">
            <summary>
            登录失败，准备退出
            </summary>
        </member>
        <member name="T:Rafy.RafyConfiguration">
            <summary>
            Rafy 的配置。
            </summary>
        </member>
        <member name="P:Rafy.RafyConfiguration.Section">
            <summary>
            配置文件节对应的 WMSSection 配置节。相当于 Instance.WMSSection。
            </summary>
        </member>
        <member name="P:Rafy.RafyConfiguration.DevCulture">
            <summary>
            开发语言文化代码，默认值是 zh-CN。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.CurrentCulture">
            <summary>
            当前显示的语言文化。
            如果没有设置本项，表明使用系统自带的语言文化。
            例如：zh-CN、en-US 等。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.CollectDevLanguages">
            <summary>
            在当前语言下是否执行收集操作。
            </summary>
        </member>
        <member name="P:Rafy.Configuration.RafyConfigurationSection.DataPortalProxy">
            <summary>
            Gets or sets the full type name (or 'Local') of
            the data portal proxy object to be used when
            communicating with the data portal server.
            </summary>
            <value>Fully qualified assembly/type name of the proxy class
            or 'Local'.</value>
            <returns></returns>
            <remarks>
            <para>
            If this value is empty or null, a new value is read from the 
            application configuration file with the key value 
            "DataPortalProxy".
            </para><para>
            The proxy class must implement SimpleCsla.Server.IDataPortalServer.
            </para><para>
            The value "Local" is a shortcut to running the DataPortal
            "server" in the client process.
            </para><para>
            Other built-in values include:
            <list>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.RemotingProxy</term>
            <description>Use .NET Remoting to communicate with the server</description>
            </item>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.EnterpriseServicesProxy</term>
            <description>Use Enterprise Services (DCOM) to communicate with the server</description>
            </item>
            <item>
            <term>SimpleCsla,SimpleCsla.DataPortalClient.WebServicesProxy</term>
            <description>Use Web Services (asmx) to communicate with the server</description>
            </item>
            </list>
            Each proxy type does require that the DataPortal server be hosted using the appropriate
            technology. For instance, Web Services and Remoting should be hosted in IIS, while
            Enterprise Services must be hosted in COM+.
            </para>
            </remarks>
        </member>
        <member name="T:Rafy.Domain.IKeyProvider">
            <summary>
            标识属性相关算法的提供程序
            </summary>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.GetEmptyIdForRefIdProperty">
            <summary>
            获取一个用于表示空引用的 Id 值。
            
            值类型返回空值：
            int: 0
            Guid: Guid.Empty
            引用类型返回 null：
            String: null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.HasId(System.Object)">
            <summary>
            判断给的 Id 值是否表示‘有值’的状态。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.NewLocalId">
            <summary>
            构造一个不会重复的本地值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Domain.IKeyProvider.ToNullableValue(System.Object)">
            <summary>
            如果是值类型，则需要判断：
            当 HasId(value) 返回 false 时，需要返回对应的可空类型的值。如传入 0，返回 default(int?)。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Domain.IKeyProvider.KeyType">
            <summary>
            标识属性的属性类型
            </summary>
        </member>
        <member name="P:Rafy.Domain.IKeyProvider.DefaultValue">
            <summary>
            标识属性的默认值
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ILOBProperty">
            <summary>
            大对象属性
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.ILOBProperty.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="T:Rafy.Domain.IRafyEntity">
            <summary>
            实体都必须实现此接口。
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRafyEntity.Id">
            <summary>
            唯一的标识属性
            </summary>
        </member>
        <member name="P:Rafy.Domain.IRafyEntity.KeyProvider">
            <summary>
            标识属性的算法提供器。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.LOBType">
            <summary>
            LOB属性的类型
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.LOBType.String">
            <summary>
            长字符串
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.LOBType.Binary">
            <summary>
            长二进制流
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.ReferenceType">
            <summary>
            引用的类型。
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Normal">
            <summary>
            一般的外键引用
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Parent">
            <summary>
            此引用表示父实体的引用
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.ReferenceType.Child">
            <summary>
            此引用表示子实体的引用，一对一的子实体关系。
            <remarks>
            后期，可能不再需要这种一对一的子实体关系。
            主要是因为用的地方比较少，而且也可以直接使用一对多的子实体来表示。另外，Web 框架中目前也不支持。
            由于目前已经写了比较多的代码来支持，所以先暂时不删除。
            </remarks>
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.IValidationDeclarer">
            <summary>
            验证规则的声明器。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.AddRule(Rafy.MetaModel.IValidationRule,Rafy.MetaModel.RuleMeta)">
            <summary>
            为整个实体添加一个业务验证规则。
            </summary>
            <param name="rule">The rule.</param>
            <param name="meta">The meta.</param>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.AddRule(Rafy.ManagedProperty.IManagedProperty,Rafy.MetaModel.IValidationRule,Rafy.MetaModel.RuleMeta)">
            <summary>
            为某个属性添加一个业务验证规则。
            </summary>
            <param name="property">The property.</param>
            <param name="rule">The rule.</param>
            <param name="meta">The meta.</param>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.ClearRules">
            <summary>
            清空所有规则。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.IValidationDeclarer.ClearRules(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            清空指定属性对应的规则。
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:Rafy.MetaModel.IValidationDeclarer.RulesCount">
            <summary>
            获取当前已经声明的规则的个数。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.RuleArgs">
            <summary>
            为业务规则验证方法提供一些必要的参数。
            
            该类继承自动态类型，意味着定义时可动态定义属性。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.DisplayProperty">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.Display(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取属性对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[属性名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.RuleArgs.Display(System.Type)">
            <summary>
            如果当前 Rafy 运行时环境中，已经拥有 UI 层界面的元数据，则获取实体对应的的显示名称，并进行翻译后返回。
            否则，直接返回以下格式的字符串，方便替换：[实体类型名称]。（服务端一般都没有 UI 层元数据。）
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.Rule">
            <summary>
            对应的规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.Property">
            <summary>
            如果这是某个属性关联的规则参数，则这个属性表示关联的托管属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.IsBroken">
            <summary>
            返回是否执行打破了规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.RuleArgs.BrokenDescription">
            <summary>
            在规则检查函数中描述当前的错误信息。
            </summary>
            <value>
            The broken description.
            </value>
        </member>
        <member name="T:Rafy.MetaModel.RuleHandler">
            <summary>
            定义所有验证规则方法签名的委托。
            </summary>
            <param name="target">需要被验证的属性对象。</param>
            <param name="e">用于接收验证后的信息。</param>
        </member>
        <member name="T:Rafy.MetaModel.RuleLevel">
            <summary>
            Values for validation rule severities.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Error">
            <summary>
            Represents a serious
            business rule violation that
            should cause an object to
            be considered invalid.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Warning">
            <summary>
            Represents a business rule
            violation that should be
            displayed to the user, but which
            should not make an object be
            invalid.
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.RuleLevel.Information">
            <summary>
            Represents a business rule
            result that should be displayed
            to the user, but which is less
            severe than a warning.
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.PluginIndex">
            <summary>
            所处插件的启动级别。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.InheritanceCount">
            <summary>
            继承层次
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityConfigBase.EntityType">
            <summary>
            本实体配置对应的实体类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ViewConfig.GetViewName(System.Type)">
            <summary>
            返回视图类型对应的视图名称。
            </summary>
            <param name="viewType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ViewConfig.ExtendView">
            <summary>
            如果是扩展视图，需要重写这个属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewConfig.IsExtendView">
            <summary>
            如果是扩展视图，需要重写这个属性，并返回 true。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WPFViewConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WPFViewConfig.ConfigView">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WPFViewConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebViewConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WebViewConfig.ConfigView">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebViewConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebEntityViewMeta">
            <summary>
            Web 界面中的实体视图元数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityViewMeta">
            <summary>
            一个实体类的视图元数据
            
            一个实体并不只对应一个视图元数据
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Meta">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Meta.Name">
            <summary>
            名字
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.AsWebView">
            <summary>
            将当前对象转换为对应的 Web 界面元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.AsWPFView">
            <summary>
            将当前对象转换为对应的 WPF 界面元数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.Label">
            <summary>
            显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.ExtendView">
            <summary>
            如果当前的视图是一个扩展视图，则这个属性表示这个扩展视图的名称。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.EntityMeta">
            <summary>
            实体类元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.TitleProperty">
            <summary>
            实体的标题属性/主显示属性。
            （可能为 null）
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.DetailColumnsCount">
            <summary>
            在Detail里显示为几列
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.NotAllowEdit">
            <summary>
            获取是否不允许编辑
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityViewMeta.GroupBy">
            <summary>
            默认分组属性值
            </summary>
        </member>
        <member name="E:Rafy.MetaModel.View.EntityViewMeta.PropertyFound">
            <summary>
            当使用 Property 方法查找到某个属性时，发生此事件。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WebEntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WebEntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.PageSize">
            <summary>
            超过 10000 就不分页了。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.Commands">
            <summary>
            这个界面块中可用的 Web 命令。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityViewMeta.LockedProperties">
            <summary>
            Web 中需要锁定的列对应的属性列表。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityPropertyViewMeta">
            <summary>
            属性的视图模型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ViewMeta">
            <summary>
            视图元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewMeta.Label">
            <summary>
            显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ViewMeta.IsVisible">
            <summary>
            指示这个界面元数据，当前是否可见。
            可以简单地设置这个属性为 false，来达到不生成这个界面元素的功能。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityPropertyViewMeta.CanShowIn(Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            判断是否可以显示在某处
            </summary>
            <param name="where"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityPropertyViewMeta.Order(System.Collections.Generic.IEnumerable{Rafy.MetaModel.View.EntityPropertyViewMeta})">
            <summary>
            把000010000300002排序为000000000000123
            
            不把0的位置改变，这样可以保证顺序与属性定义的顺序一致。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.PropertyMeta">
            <summary>
            对应的属性信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.IsReference">
            <summary>
            是否为“引用属性”
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.SelectionViewMeta">
            <summary>
            本属性需要选择实体的相关视图信息
            
            一般情况下，如果当前属性为引用实体属性，那么它默认带有这个值。其它的一般属性需要主动设置本值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.Owner">
            <summary>
            属性所在的实体类型的视图信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.VisibilityIndicator">
            <summary>
            用于检测是否可见的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.OrderNo">
            <summary>
            排序此属性使用的属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.EntityPropertyViewMeta.ShowInWhere">
            <summary>
            在哪里显示
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityPropertyViewMeta.WidthFlex">
            <summary>
            用于初始化表格控件的宽度属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebEntityPropertyViewMeta.IsReadonly">
            <summary>
            Web 专用
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayPath">
            <summary>
            用于绑定显示的属性名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayPathProperties">
            <summary>
            用于绑定显示的属性名
            
            三种情况：
            1.当前属性。
            2.当前引用属性.名称。（如果显示属性为两个，那么第一个一定是引用属性，而第二个则是引用实体上的属性。）
            3.显示代理属性。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.ReadonlyIndicator">
            <summary>
            用于检测是否只读的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.StringFormat">
            <summary>
            格式化String Column Format
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.EditorName">
            <summary>
            编辑器名
            EditorAttribute中标记
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.GridWidth">
            <summary>
            用于初始化表格控件的宽度属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailColumnsSpan">
            <summary>
            表单中该属性所占的列数。
            
            只在 DetailLayoutMode.AutoGrid 模式下有用。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailContentWidth">
            <summary>
            表单中该属性所占的格子宽度。
            
            如果值在 0 到 1 之间，表示百分比，只有 DetailLayoutMode.AutoGrid 模式下可用。
            否则表示绝对值。
            
            不指定，则使用系统默认值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailHeight">
            <summary>
            表单中该属性所占的总高度
            不指定，则使用系统默认宽度。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailLabelSize">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailNewLine">
            <summary>
            指定某个属性在表单中是否需要开启新行。
            
            此属性只在 DetailLayoutMode.Wrapping 下有用。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DetailAsHorizontal">
            <summary>
            在 DetailPanel 是否横向布局。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.DisplayDelegate">
            <summary>
            如果当前对象是一个引用属性，则可以指定一个额外的属性来进行代理显示。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityPropertyViewMeta.NavigationMeta">
            <summary>
            如果当前属性是一个导航触发属性，则这个属性不为 null。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFEntityViewMeta">
            <summary>
            WPF 界面中的实体视图元数据。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据名字查询实体属性
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFEntityViewMeta.DeclareGroup(System.String)">
            <summary>
            使用此方法定义的代码块中，自动设置块内所有属性的 GroupLabel。
            </summary>
            <param name="groupLabel"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailPanelType">
            <summary>
            生成 DetailPanel 时使用的控件类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailLabelSize">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认宽度。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailAsHorizontal">
            <summary>
            是否需要表单设置为横向布局
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailLayoutMode">
            <summary>
            表单布局模式。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailGroupingMode">
            <summary>
            表单中属性分组的模式
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.DetailGroups">
            <summary>
            表单中的属性分组信息。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.Commands">
            <summary>
            这个界面块中可用的 WPF 命令。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFEntityViewMeta.ReportPath">
            <summary>
            RDLC 报表文件的路径。
            
            报表 RDLC 文件中默认使用实体作为数据源，数据源的名称必须和实体名相同。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFDetailPropertyGroup">
            <summary>
            表单中的一个属性组。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.GroupLabel">
            <summary>
            分组的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.LayoutMode">
            <summary>
            本组属性应该按照什么方式来布局。
            
            如果没有指定这个属性，则表示使用 WPFEntityViewMeta 中定义的 DetailLayoutMode 进行布局。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFDetailPropertyGroup.Properties">
            <summary>
            这个组中的所有属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandCollection">
            <summary>
            <see cref="T:Rafy.MetaModel.View.WebCommand"/> 的集合。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandCollection`1">
            <summary>
            命令集合
            </summary>
            <typeparam name="TCommand"></typeparam>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.SortByLabel(System.String[])">
            <summary>
            this.SortByLabel("保存","添加","取消")
            </summary>
            <param name="labels"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Find(System.String)">
            <summary>
            查找指定名称的命令。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Remove(System.String[])">
            <summary>
            删除指定全称的命令。
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除指定全称的命令。
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.CommandCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加命令集合到本集合中。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandCollection">
            <summary>
            <see cref="T:Rafy.MetaModel.View.WPFCommand"/> 的集合。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Find(System.Type)">
            <summary>
            在命令中查找指定类型的命令。
            </summary>
            <param name="cmdType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Remove(System.Type[])">
            <summary>
            在集合中删除指定类型的命令。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandCollection.Remove(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            在集合中删除指定类型的命令。
            </summary>
            <param name="commands"></param>
        </member>
        <member name="T:Rafy.AnonymousPrincipal">
            <summary>
            匿名身份。
            </summary>
        </member>
        <member name="T:Rafy.PermissionProvider">
            <summary>
            权限提供程序。
            </summary>
        </member>
        <member name="M:Rafy.PermissionProvider.CanShowModule(Rafy.MetaModel.ModuleMeta)">
            <summary>
            是否能显示某个模块
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.CanShowBlock(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block)">
            <summary>
            控制某一个块是否可以显示
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.HasOperation(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.ModuleOperation)">
            <summary>
            是否有某个操作的权限
            </summary>
            <param name="module"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionProvider.HasCommand(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block,System.String)">
            <summary>
            是否能执行某个命令
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.ComponentModel.PluginTable">
            <summary>
            使用代码添加的插件程序集。
            只是以插件机制加载，但本质上是必需的，并非插件。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.PluginTable.AddPlugin``1">
            <summary>
            直接添加一个插件对应的程序集引用。
            </summary>
            <typeparam name="TPlugin"></typeparam>
        </member>
        <member name="P:Rafy.ComponentModel.PluginTable.DomainLibraries">
            <summary>
            已经添加的实体插件程序集。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.PluginTable.UILibraries">
            <summary>
            已经添加的模块插件程序集。
            </summary>
        </member>
        <member name="T:Rafy.EmptyTranslator">
            <summary>
            不支持更换其它语言的翻译器
            </summary>
        </member>
        <member name="T:Rafy.Translator">
            <summary>
            语言提供器
            </summary>
        </member>
        <member name="F:Rafy.Translator._currentCulture">
            <summary>
            当前文化
            </summary>
        </member>
        <member name="F:Rafy.Translator._isDevCulture">
            <summary>
            是否直接使用开发语言
            </summary>
        </member>
        <member name="F:Rafy.Translator._autoCollect">
            <summary>
            是否正在收集所有开发语言。
            </summary>
        </member>
        <member name="F:Rafy.Translator._collected">
            <summary>
            收集到的所有语言。
            </summary>
        </member>
        <member name="M:Rafy.Translator.Collect(System.String)">
            <summary>
            收集某个开发语言。
            </summary>
            <param name="devCulture"></param>
        </member>
        <member name="M:Rafy.Translator.OnCollected(System.String)">
            <summary>
            某个开发语言被收集后发生。
            </summary>
            <param name="devCulture"></param>
        </member>
        <member name="M:Rafy.Translator.IgnoreCollect(System.String)">
            <summary>
            忽略某个字符串的收集。
            
            一般使用在动态拼接字符串的情况下。
            </summary>
            <param name="words">一个不希望被翻译引擎收集的字符串。</param>
        </member>
        <member name="M:Rafy.Translator.Translate(System.String)">
            <summary>
            通过代码中直接编写的语言，翻译为对应当前语言。
            
            实现时，注意，此方法与 TranslateReverse 互为可逆的操作。
            </summary>
            <param name="devCulture">代码中直接编写的语言。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.TranslateCore(System.String,System.String@)">
            <summary>
            通过代码中直接编写的语言，翻译为对应当前语言。
            
            实现时，注意，此方法与 TranslateReverseCore 互为可逆的操作。
            </summary>
            <param name="devCulture">代码中直接编写的语言。</param>
            <param name="result">翻译后的结果。</param>
            <returns>是否成功翻译。如果翻译失败，基类会把结果收集起来。</returns>
        </member>
        <member name="M:Rafy.Translator.TranslateReverse(System.String)">
            <summary>
            通过当前语言，翻译为对应代码中直接编写的语言。
            
            实现时，注意，此方法与 Translate 互为可逆的操作。
            </summary>
            <param name="currentCulture">当前语言对应的语句。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.TranslateReverseCore(System.String)">
            <summary>
            通过当前语言，翻译为代码中直接编写的语言。
            
            实现时，注意，此方法与 TranslateCore 互为可逆的操作。
            </summary>
            <param name="currentCulture"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.GetSupportCultures">
            <summary>
            所有支持的语言。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Translator.OnCurrentCultureChanged">
            <summary>
            当前文化项发生改变时的事件。
            </summary>
        </member>
        <member name="M:Rafy.Translator.IsDevCulture(System.String)">
            <summary>
            判断指定的语言是否为开发语言。
            </summary>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Translator.Enabled">
            <summary>
            是否启用整个多语言功能。
            </summary>
        </member>
        <member name="P:Rafy.Translator.AutoCollect">
            <summary>
            是否启动语言收集功能
            </summary>
        </member>
        <member name="P:Rafy.Translator.CurrentCulture">
            <summary>
            系统当前的文化标识。
            </summary>
        </member>
        <member name="P:Rafy.Translator.CollectedList">
            <summary>
            获取收集到的所有字符串。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.DomainPlugin">
            <summary>
            领域实体插件程序集基类。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.IPlugin">
            <summary>
            插件定义。
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.IPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            插件的初始化方法。
            框架会在启动时根据启动级别顺序调用本方法。
            
            方法有两个职责：
            1.依赖注入。
            2.注册 app 生命周期中事件，进行特定的初始化工作。
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="P:Rafy.ComponentModel.IPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.IPlugin.SetupLevel">
            <summary>
            插件的启动级别
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.DomainPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            插件的初始化方法。
            框架会在启动时根据启动级别顺序调用本方法。
            
            方法有两个职责：
            1.依赖注入。
            2.注册 app 生命周期中事件，进行特定的初始化工作。
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="P:Rafy.ComponentModel.DomainPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.DomainPlugin.SetupLevel">
            <summary>
            插件的启动级别。默认值为 <see cref="F:Rafy.ComponentModel.ReuseLevel.Main"/>。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocksCollection">
            <summary>
            聚合块集合
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksCollection.Find(System.Type)">
            <summary>
            在集合中查找第一个某指定实体类型的块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksCollection.ReOrder(System.Type[])">
            <summary>
            把指定的实体类型的聚合块从 0 开始摆放。其它的块，则放到最后。
            </summary>
            <param name="types"></param>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocksCollection.Item(System.Type)">
            <summary>
            在集合中获取第一个某指定实体类型的块。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.SurrounderCollection">
            <summary>
            环绕块集合
            
            之中定义了方便使用的环绕块查询方法
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.SurrounderCollection.Find(System.String)">
            <summary>
            查找某个名称的第一个环绕块
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderCollection.Item(System.String)">
            <summary>
            获取某个名称的第一个环绕块
            </summary>
            <param name="surrounderType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtChildrenCollection">
            <summary>
            聚合子块集合。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.BlockType">
            <summary>
            界面块的类型
            
            界面块的类型是可以扩展的。
            注意，自定义的块的值，需要大于 10。（10 以内的值是 Rafy 系统预留块）。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.List">
            <summary>
            列表（树型表格、表格）。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.Detail">
            <summary>
            详细（表单）
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType.Report">
            <summary>
            报表、图表
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.BlockType._customTypeFrom">
            <summary>
            自定义块类型从 11 开始。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.BlockType.Register(System.String)">
            <summary>
            通过值和名称构造器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.BlockType.Id">
            <summary>
            块类型的 Id。
            
            整个系统中必须唯一。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlockType.Name">
            <summary>
            块类型的名称
            
            无特别的用处，只为标识。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.UIPlugin">
            <summary>
            模块初始化器
            </summary>
        </member>
        <member name="M:Rafy.ComponentModel.UIPlugin.Initialize(Rafy.ComponentModel.IApp)">
            <summary>
            插件的初始化方法。
            框架会在启动时根据启动级别顺序调用本方法。
            
            方法有两个职责：
            1.依赖注入。
            2.注册 app 生命周期中事件，进行特定的初始化工作。
            </summary>
            <param name="app">应用程序对象。</param>
        </member>
        <member name="P:Rafy.ComponentModel.UIPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.UIPlugin.SetupLevel">
            <summary>
            插件的启动级别。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IPropertyMetadata">
            <summary>
            Rafy 中的属性元数据
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IPropertyMetadata.DateTimePart">
            <summary>
            如果当前是一个时间类型，则这个属性表示该时间类型正在被使用的部分。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IPropertyMetadata.AffectStatus">
            <summary>
            此属性的变更，是否会造成实体状态的变更（变脏）。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IService">
            <summary>
            跨 C/S，B/S 的服务
            </summary>
        </member>
        <member name="M:Rafy.Domain.IService.Invoke">
            <summary>
            调用服务。
            </summary>
        </member>
        <member name="T:Rafy.Domain.IFlowService">
            <summary>
            一种过程化服务的基类
            <remarks>
            过程化简单地指：进行一系列操作，返回是否成功以及相应的提示消息。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.Domain.IFlowService.Result">
            <summary>
            过程返回的结果。
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceInputAttribute">
            <summary>
            服务的输入属性标记。
            
            <remarks>
            默认情况下，服务的属性都是输入属性。当某个属性即是输入也是输出时，才需要标记这个标记。
            </remarks>
            </summary>
        </member>
        <member name="T:Rafy.Domain.ServiceOutputAttribute">
            <summary>
            服务的输出属性标记。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IListProperty">
            <summary>
            Rafy 列表属性
            </summary>
        </member>
        <member name="M:Rafy.ManagedProperty.IListProperty.GetMeta(System.Object)">
            <summary>
            为某个对象获取本属性的元数据
            </summary>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ManagedProperty.IListProperty.GetMeta(System.Type)">
            <summary>
            为某个类型获取本属性的元数据
            </summary>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.ManagedProperty.IListProperty.ListEntityType">
            <summary>
            列表对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IListProperty.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.HasManyType">
            <summary>
            一对多子属性的类型
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.HasManyType.Composition">
            <summary>
            组合（子对象）
            </summary>
        </member>
        <member name="F:Rafy.ManagedProperty.HasManyType.Aggregation">
            <summary>
            聚合（简单引用）
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRafyListPropertyMetadata">
            <summary>
            列表属性的元数据
            
            暂无属性，留待扩展
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefProperty">
            <summary>
            引用 Id 属性或者是引用实体属性。
            两类属性，都可以转换为此接口，方便统一使用方法。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefEntityType">
            <summary>
            引用实体的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.ReferenceType">
            <summary>
            实体引用的类型
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.Nullable">
            <summary>
            该引用属性是否可空。
            如果引用Id属性的类型是引用类型（字符串）或者是一个 Nullable 类型，则这个属性返回 true。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefIdProperty">
            <summary>
            返回对应的引用 Id 属性。
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefProperty.RefEntityProperty">
            <summary>
            返回对应的引用实体属性。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefIdProperty">
            <summary>
            引用实体属性的静态属性 Id 标记
            </summary>
        </member>
        <member name="P:Rafy.ManagedProperty.IRefIdProperty.KeyProvider">
            <summary>
            引用的实体的主键的算法程序。
            </summary>
        </member>
        <member name="T:Rafy.ManagedProperty.IRefEntityProperty">
            <summary>
            引用实体属性的静态属性实体标记
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.CommandAttribute">
            <summary>
            用于描述一个命令元数据的标签。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Label">
            <summary>
            命令显示的文本。
            <remarks>
            <para>
            如果没有设置，默认值为 null，则系统会使用命令的类型名称作为显示。
            如果希望不显示任何文本，需要默认为 <see cref="F:System.String.Empty"/> 。
            </para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.ToolTip">
            <summary>
            命令显示的鼠标划过文本。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.ImageName">
            <summary>
            命令显示的图片名称。
            <remarks>
            <para>这个图片需要存放在命令所在程序集的 Images 文件夹中。</para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Gestures">
            <summary>
            快捷键标识。
            <remarks>
            可以用以下格式：Ctrl+A；F2；
            
            WPF Only
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.UIAlgorithm">
            <summary>
            为这个Command进行“生成分组”的算法类。
            如果为null，则会使用默认生成算法。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.CommandInfoType">
            <summary>
            使用哪个类型的 CommandInfo 来承载元数据。
            可以使用不同的 CommandInfo 的子类来实现元数据的多态。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Hierarchy">
            <summary>
            此命令所处的分级位置。
            
            当命令生成在菜单中时，可以使用如下语法：一级/二级/三级
            当命令生成在工具栏中时，同一组的命令都会生成一个下拉按钮列表中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.GroupType">
            <summary>
            命令的按钮分类类型。
            
            不同分类类型的按钮，将会以 '|' 分隔起来。
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.CommandAttribute.Location">
            <summary>
            命令生成的控件的位置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ChildEntityAttribute">
            <summary>
            所有孩子实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.EntityAttribute">
            <summary>
            所有实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ConditionQueryTypeAttribute">
            <summary>
            对该类进行条件查询的条件
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.ConditionQueryTypeAttribute.QueryType">
            <summary>
            条件查询的条件对象的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.QueryEntityAttribute">
            <summary>
            所有查询实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute">
            <summary>
            对该类进行导航查询的条件
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute.#ctor(System.Type)">
            <summary>
            构造器
            </summary>
            <param name="queryType">导航查询的条件对象的类型</param>
        </member>
        <member name="P:Rafy.MetaModel.Attributes.NavigationQueryTypeAttribute.QueryType">
            <summary>
            导航查询的条件对象的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.ColumnAttribute">
            <summary>
            标记此标签的属性，就算默认已经标记上 EntityPropertyAttribute。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.RootEntityAttribute">
            <summary>
            所有根实体对象都应该标记这个属性。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.Direction.Horizontal">
            <summary>
            水平
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.Direction.Vertical">
            <summary>
            垂直。 细表默认和主表垂直显示
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntitySelectionMode">
            <summary>
            选择模式：多选/单选。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntitySelectionMode.Single">
            <summary>
            单选模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntitySelectionMode.Multiple">
            <summary>
            多选模式
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.Attributes.LabelAttribute">
            <summary>
            用于描述某个类型或成员在界面上显示的字符
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.CommonModel">
            <summary>
            WPF Web 通用的模型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.CommonModel.Entities">
            <summary>
            所有实体元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.CommonModel.Modules">
            <summary>
            所有模块的元数据
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityConfig">
            <summary>
            实体配置基类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityConfig.ConfigMeta">
            <summary>
            子类重写此方法，并完成对 Meta 属性的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityConfig.AddValidations(Rafy.MetaModel.IValidationDeclarer)">
            <summary>
            子类重写此方法，并完成对实体验证规则的配置。
            
            注意：
            * 为了给当前类的子类也运行同样的配置，这个方法可能会被调用多次。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityConfig`1">
            <summary>
            泛型版本的实体配置基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityMetaRepository">
            <summary>
            实体默认视图及实体信息的仓库
            <remarks>
            实体的元数据会在第一次被使用时而创建，并只会创建一次。
            </remarks>
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.MetaRepositoryBase`1.FreezeItems">
            <summary>
            冻结所有的命令元数据。
            
            只冻结内部元素，并不冻结集合的行为。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Get(System.Type)">
            <summary>
            查询某个实体类型所对应的实体信息。查询不到，就报出异常。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Find(System.Type)">
            <summary>
            查询某个实体类型所对应的实体信息。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.FindOrCreateEntityMetaRecur(System.Type,Rafy.MetaModel.EntityMeta)">
            <summary>
            创建一个实体类型的元数据信息。
            </summary>
            <param name="entityType"></param>
            <param name="parentMeta">
            聚合父类型的元数据，如果 entityType 是根类型，则不需要传递此参数。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.Config(Rafy.MetaModel.EntityMeta)">
            <summary>
            调用配置类进行配置。
            </summary>
            <param name="em"></param>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaRepository.EnsureAllLoaded">
            <summary>
            调用此方法来加载整个系统中的所有插件中的实体元数据。
            （同时，也就包含所有实体的托管属性。）
            
            调用此方法前，遍历此集合只会返回当前已经加载的实体元数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ChildrenPropertyMeta">
            <summary>
            子属性元数据
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.PropertyMeta">
            <summary>
            属性元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.ManagedProperty">
            <summary>
            如果本元数据对应的实体属性是由托管属性编写的，那么这里返回它所对应的托管属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.CLRProperty">
            <summary>
            返回这个托管属性对应的 CLR 属性，如果没有对应的 CLR 属性（或者找到多个），则返回 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.PropertyType">
            <summary>
            属性的类型。
            这个类型并不一定与托管属性的类型一致。例如 Id 属性，声明的是 object 类型，但是实际可能是 int、string 等。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.Runtime">
            <summary>
            对应的属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyMeta.Owner">
            <summary>
            所在类型的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ChildrenPropertyMeta.ChildType">
            <summary>
            此孩子属性对应的实体类的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityCategory">
            <summary>
            元数据：实体对象类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.Child">
            <summary>
            孩子对象
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.Root">
            <summary>
            根对象
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.EntityCategory.QueryObject">
            <summary>
            查询面板对象
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityMeta">
            <summary>
            实体元数据
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.FindParentReferenceProperty">
            <summary>
            找到实体中对应聚合关系中的父实体引用属性元数据。
            
            注意，此函数返回的是引用实体属性，而非引用 Id 属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.Property(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据托管属性查询实体属性
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.Property(System.String)">
            <summary>
            根据名字查询实体属性（忽略大小写）
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.ChildrenProperty(Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            根据托管属性查询组合子属性。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMeta.ChildrenProperty(System.String)">
            <summary>
            根据名字查询组合子属性（忽略大小写）
            如果没有找到，则返回 null。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ManagedProperties">
            <summary>
            此实体类对应的所有托管属性容器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.Name">
            <summary>
            类型名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityType">
            <summary>
            当前模型是对应这个类型的。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.IdType">
            <summary>
            当前模型是对应这个类型的。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.IsTreeEntity">
            <summary>
            是否为树型实体。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.TreeIndexOption">
            <summary>
            如果是树型实体，则可以通过这个属性来设置它的树型编码存储规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtParent">
            <summary>
            聚合父类的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtRoot">
            <summary>
            聚合根类的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.AggtChildren">
            <summary>
            所有的聚合子类的元数据
            
            注意！！！
            暂时把这个属性的可见性设置为 internal，
            原因是实体的关系可能需要考虑实体被客户化扩展的情况。
            例如，当 ContractBudget 扩展 Budget 后，界面及实体应该完全不存在 Budget 类。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityProperties">
            <summary>
            拥有的实体属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ChildrenProperties">
            <summary>
            拥有的关联属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.EntityCategory">
            <summary>
            实体的类别
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.TableMeta">
            <summary>
            映射表的元数据。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ClientCacheDefinition">
            <summary>
            缓存子系统元数据
            
            如果不为空，表示这个实体正在使用分布式缓存系统。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityMeta.ServerCacheEnabled">
            <summary>
            是否启用本类型在服务端的内存缓存功能。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ClientCacheScope">
            <summary>
            某个类型所使用的缓存更新范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.Class">
            <summary>
            为这个类型定义的范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeClass">
            <summary>
            此属性表示为Class作为范围的类型。
            （注意：应该是在聚合对象树中，Class的上层类型。）
            如果此属性为null，表示Class以本身作为缓存范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeIdGetter">
            <summary>
            此属性表示为Class作为范围的类型的对象ID。
            如果此属性为null，表示Class不以某一特定的范围对象作为范围，而是全体对象。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.SimpleScopeType">
            <summary>
            如果是使用的简单缓存方案，这个值存储这个方案的值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeBySelf">
            <summary>
            表示Class以本身作为缓存范围。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ClientCacheScope.ScopeById">
            <summary>
            表示Class是否以某一特定的范围对象作为范围。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ClientCacheScopeType">
            <summary>
            主要会被使用到的两种缓存方案
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ClientCacheScopeType.Table">
            <summary>
            按照表的方案来缓存
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ClientCacheScopeType.ScopedByRoot">
            <summary>
            按照聚合树的方案来缓存
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.EntityPropertyMeta">
            <summary>
            业务属性实体模型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityPropertyMeta.ReferenceInfo">
            <summary>
            如果此属性是引用实体属性，则这个属性不为空，并表示引用的相关信息。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.EntityPropertyMeta.ColumnMeta">
            <summary>
            如果这个属性不为 null，表示该属性映射数据库中的某个字段。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ReferenceInfo">
            <summary>
            实体引用关系
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ReferenceInfo.InitLazyRefTypeMeta">
            <summary>
            懒加载 RefTypeMeta 属性。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefEntityProperty">
            <summary>
            引用的类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefTypeMeta">
            <summary>
            引用实体的实体元数据
            
            当此引用属性引用的是一个抽象的实体类，这个抽象类并没有对应的实体元数据，可能这个抽象的子类才有实体元数据，
            在这种情况下，此属性值将为 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.Type">
            <summary>
            引用的类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ReferenceInfo.RefType">
            <summary>
            引用实体的实体类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.TreeIndexOption">
            <summary>
            树型实体的编码生成规则
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CalculateChildIndex(System.String,System.Int32)">
            <summary>
            通过父对象的编码以及当前的索引来生成可用的树型编码
            </summary>
            <param name="parentIndex"></param>
            <param name="nodeIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CalculateParentIndex(System.String)">
            <summary>
            获取指定索引对应节点的父节点的索引号。
            如果传入的已经是根节点，则返回 null。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.TreeIndexOption.CountLevel(System.String)">
            <summary>
            计算指定索引中表示的级别。
            （内部为统计分隔符的个数。）
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Default">
            <summary>
            默认的树节点的索引规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Seperator">
            <summary>
            每一层间的分隔符
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TreeIndexOption.Layers">
            <summary>
            每一层的字符串定义
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaHelper.GetEntityPropertiesExtension(Rafy.MetaModel.EntityMeta)">
            <summary>
            通过托管属性获取所有的扩展属性列表
            </summary>
            <param name="em"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaHelper.GetEntityProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            通过托管属性获取所有的实体属性列表
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.EntityMetaHelper.GetChildrenProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            通过托管属性获取所有的子属性列表
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.ModuleMeta">
            <summary>
            模块的元数据。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ModuleMeta.GetChildrenWithPermission">
            <summary>
            返回所有可显示的模块。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.KeyLabel">
            <summary>
            这个属性表示这个模块的名称。
            
            注意，这个名称在整个应用程序中所有模块中应该是唯一的，这样，就可以用它来实现权限控制。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Label">
            <summary>
            友好显示标签
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.HasUI">
            <summary>
            如果此属性返回 false，表示当前模块只是一个文件夹模块，它不对应任何的模块界面。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.AggtBlocksName">
            <summary>
            如果当前模块是一个主动定义的聚合块，则这个属性表示此聚合块的名称。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.EntityType">
            <summary>
            这个模块使用 AutoUI 功能的话，这个属性表示其显示的实体类型，否则返回 null。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.BlocksTemplate">
            <summary>
            本模块使用的界面块模板类型。
            如果指定此属性，则指定的该类型必须继承自 BlocksTemplate 类。
            <remarks>
            （注意，如果是 WPF 应用程序，则这个属性指定的类型必须继承自 UITemplate 类。）
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Parent">
            <summary>
            对应的父模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.Children">
            <summary>
            模块中的子模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleMeta.CustomOpertions">
            <summary>
            开发人员可以在这个模块中添加许多自定义功能。
            权限系统为读取这个属性用于用户配置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebModuleMeta">
            <summary>
            Web 应用程序中的模块定义
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.Url">
            <summary>
            如果该模块不是由某个类型自动生成的，则这个属性将不为空，并表示某个自定义的 UI 界面。
            
            则这个属性表示目标页面的地址。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WebModuleMeta.ClientRuntime">
            <summary>
            Web 界面中本模块使用的界面模板类型。
            如果指定此属性，则指定的该类型必须继承自 Rafy.UITemplate 类。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WPFModuleMeta">
            <summary>
            WPF 应用程序中的模块定义
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.IsCustomUI">
            <summary>
            是否为自定义模块
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.CustomUI">
            <summary>
            如果该模块不是由某个类型自动生成的，则这个属性将不为空，并表示某个自定义的 UI 界面。
            
            如果是 WPF 程序，那么这个属性表示目标用户控件的全名称，
            如果是 Web 程序，则这个属性表示目标页面的地址。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.WPFModuleMeta.TryAutoLoadData">
            <summary>
            在没有条件、导航面板时，尝试加载所有数据。默认是 true 。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ModuleOperation">
            <summary>
            某个模块中定义的一些可用的功能操作。
            
            这些功能操作会被用来实现权限控制。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleOperation.Name">
            <summary>
            Name 属性表示功能的名称，这个名称在模块中应该是唯一的，该值会被存储到数据层中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ModuleOperation.Label">
            <summary>
            表示界面中功能用于显示的名称。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ModulesContainer">
            <summary>
            模块容器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.Freeze">
            <summary>
            冻结所有的元数据
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.GetRootsWithPermission">
            <summary>
            获取所有满足当前权限要求的根模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.AddRoot(Rafy.MetaModel.ModuleMeta)">
            <summary>
            添加一个根模块
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.FindModule(System.String)">
            <summary>
            根据唯一的名称来查找某个模块
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.ModulesContainer.FindModule(System.Type)">
            <summary>
            找到第一个实体类型为指定类型的模块
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Roots">
            <summary>
            获取所有根模块。
            可通过此属性来变更根模块列表。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Item(System.String)">
            <summary>
            直接获得某一个模块。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="keyName"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.ModulesContainer.Item(System.Type)">
            <summary>
            直接获得某一个模块。
            如果没有找到，则会抛出异常。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.ColumnMeta">
            <summary>
            属性对应的列的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.HasFKConstraint">
            <summary>
            如果这是一个引用属性的列，则这个属性表示数据库中是否有对应的外键存在。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsIdentity">
            <summary>
            是否自增长列
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.IsRequired">
            <summary>
            是否必须的，如果没有赋值，则按照默认的类型计算方法来计算该值。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.ColumnName">
            <summary>
            映射数据库中的字段名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.DataType">
            <summary>
            映射数据库中的字段的类型。
            如果没有设置，则使用默认的映射规则。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.ColumnMeta.DataTypeLength">
            <summary>
            映射数据库中的字段的长度、精度等信息。
            可以是数字，也可以是 MAX 等字符串。
            如果是空，则表示使用默认的长度。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.TableMeta.#ctor(System.String)">
            <summary>
            构造一个映射指定表名的元数据对象
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Rafy.MetaModel.TableMeta.#ctor">
            <summary>
            构造一个映射视图的元数据对象
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.TableName">
            <summary>
            映射数据库中的字段名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.ViewSql">
            <summary>
            如果是映射视图，则需要指定此属性为视图对应的 SQL。
            可以是一个 Sql 视图名，也可以是一个能查询出表格的 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.TableMeta.IsMappingView">
            <summary>
            是否存在映射视图
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.MetaExtension">
            <summary>
            为元数据扩展的配置 API
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapAllProperties(Rafy.MetaModel.EntityMeta)">
            <summary>
            指定所有属性全部映射数据库字段
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapAllPropertiesExcept(Rafy.MetaModel.EntityMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            指定某个实体的所有属性全部映射数据库字段
            同时排除指定的属性列表。
            </summary>
            <param name="meta"></param>
            <param name="exceptProperties">
            这些属性不需要映射数据库
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapProperties(Rafy.MetaModel.EntityMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            指定该实体类型中的某些属性直接映射数据库字段
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.SupportTree(Rafy.MetaModel.EntityMeta)">
            <summary>
            打开指定实体类型的树型功能
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapTable(Rafy.MetaModel.EntityMeta)">
            <summary>
            指定某实体映射某个表。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapTable(Rafy.MetaModel.EntityMeta,System.String)">
            <summary>
            指定某实体映射某个表，指定表名。
            </summary>
            <param name="meta"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapView(Rafy.MetaModel.EntityMeta,System.String)">
            <summary>
            指定某实体映射某个视图 SQL。
            </summary>
            <param name="meta"></param>
            <param name="viewSql">
            可以是一个数据库视图，也可以是一个能查询出数据的 Sql 语句。
            
            如果不指定此参数，则需要在所有的查询中都编写自定义查询。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.DontMapColumn(Rafy.MetaModel.EntityPropertyMeta)">
            <summary>
            指定某个属性是否需要直接映射字段
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.MapColumn(Rafy.MetaModel.EntityPropertyMeta)">
            <summary>
            开始指定某个属性直接映射字段的详细信息
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasColumnName(Rafy.MetaModel.ColumnMeta,System.String)">
            <summary>
            指定某个属性映射字段时的列名
            </summary>
            <param name="meta"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasDataType(Rafy.MetaModel.ColumnMeta,System.Data.DbType)">
            <summary>
            指定某个属性映射字段时的数据列类型
            </summary>
            <param name="meta">The meta.</param>
            <param name="dataType">Type of the data.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.HasLength(Rafy.MetaModel.ColumnMeta,System.String)">
            <summary>
            指定某个属性映射字段时的列的长度、精度等信息。
            注意，这个属性的变化，不会自动同步到数据库上。
            </summary>
            <param name="meta">The meta.</param>
            <param name="length">
            映射数据库中的字段的长度。
            可以是数字，也可以是 MAX 等字符串。
            如果是空，则表示使用默认的长度。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsRequired(Rafy.MetaModel.ColumnMeta)">
            <summary>
            指定某个属性映射字段时的是否为必需的
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsPrimaryKey(Rafy.MetaModel.ColumnMeta,System.Boolean)">
            <summary>
            指定某个属性映射字段时的是否为主键。
            
            一般情况下，直接使用 Id 为主键。
            但是在映射一些旧数据库的表时，可以保留原来的主键。而只让 Id 映射的字段保持自增长即可。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IsNullable(Rafy.MetaModel.ColumnMeta)">
            <summary>
            指定某个属性映射字段时的是否为必需的
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.MetaExtension.IgnoreFK(Rafy.MetaModel.ColumnMeta)">
            <summary>
            如果出现循环引用的外键，则可以使用此方法来忽略某个列的外键，使得数据库生成时不生成该外键引用。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocksRepository">
            <summary>
            系统中所有的聚合块定义都存储在这
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetModuleBlocks(Rafy.MetaModel.ModuleMeta)">
            <summary>
            创建某个模块定义的界面块
            </summary>
            <param name="moduleMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetDefaultBlocks(System.Type)">
            <summary>
            创建默认的聚合块对象
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.GetDefinedBlocks(System.String)">
            <summary>
            创建某个自定义的聚合块
            </summary>
            <param name="blocksName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocksRepository.DefineBlocks(System.String,System.Func{Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.AggtBlocks})">
             <summary>
            示例定义：
            var b = new CompositeBlocks
            {
                MainBlock = new Block
                {
                    EntityType = typeof(Book),
                    BlockType = BlockType.Detail
                },
                Children =
                {
                    new ChildBlock{
                        ChildrenPropertyNameSetter = Book.ChapterListProperty
                    }
                }
            };
             </summary>
             <param name="blocksName"></param>
             <param name="blocks"></param>
        </member>
        <member name="T:Rafy.MetaModel.View.Block">
            <summary>
            某个小块的定义
            
            该类可以被 XML 序列化
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.Block.UseBlockDefaultCommands(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            使用本块中默认的一些按钮。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.KeyLabel">
            <summary>
            当前块在整个聚合块中的唯一标记。（将被权限系统所使用）
            
            默认使用当前实体类型的 Label 作为此标记。
            如果一个聚合块中出现两个相同的块使用同一实体时，应该手动设置本属性以区分两个块。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block._KeyLabelForXml">
            <summary>
            内部使用！！！
            为了简单地满足 XML 序列化，所以写了这个“私有”属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.EntityType">
            <summary>
            当前块显示的实体类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block._EntityTypeForXml">
            <summary>
            内部使用！！！
            为了简单地满足 XML 序列化，所以写了这个“私有”属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.ExtendView">
            <summary>
            该块如果不是使用默认视图，则这个属性表示所使用的扩展视图的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.BlockType">
            <summary>
            块类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.ViewMeta">
            <summary>
            缓存 EVM 的属性（当前块显示的实体类型）
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.Block.CustomViewType">
            <summary>
            如果该块是自定义界面，则此属性表示这个这个自定义的 UI 界面所对应的 LogicalView 类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ChildBlock">
            <summary>
            孩子块
            
            支持 XML 序列化
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(System.String,System.String)">
            <summary>
            构造一个自定义界面孩子块
            </summary>
            <param name="label"></param>
            <param name="customUI"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(Rafy.ManagedProperty.IListProperty)">
            <summary>
            通过一个聚合子实体属性构造一个界面块
            本构造函数直接使用该属性对应实体的默认视图中的名称作用本子块的 Label
            </summary>
            <param name="childrenProperty"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.ChildBlock.#ctor(System.String,Rafy.ManagedProperty.IListProperty)">
            <summary>
            通过一个聚合子实体属性构造一个界面块
            </summary>
            <param name="label"></param>
            <param name="childrenProperty"></param>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.Label">
            <summary>
            本子块显示的标题
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.ChildrenProperty">
            <summary>
            子属性一般情况下是一个 IListProperty，
            但是也有可能是一个 IRefProperty
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ChildBlock.ChildrenPropertyMeta">
            <summary>
            缓存 PropertyMeta 的属性
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CodeBlocksTemplate">
            <summary>
            一个使用代码结构来生成模板结构的模板基类
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.BlocksTemplate">
            <summary>
            聚合块模板。
            
            模板是同一种视图结构的抽象定义。
            注意：此类及其子类不是线程安全的。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.GetBlocks">
            <summary>
            获取当前模板的结构定义。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.InitViewMeta(Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            对于每一个聚合块，生成其主块中的视图元数据。
            
            子类可重写此方法，并在基类调用之前定义各 blocks 的 ExtendView。
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.OnViewMetaCreated(Rafy.MetaModel.View.Block)">
            <summary>
            当每一个界面块对应的视图元数据生成完成后发生的事件。
            </summary>
            <param name="block"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.DefineBlocks">
            <summary>
            子类实现：获取当前模板的结构定义。
            结构定义包括：块间的结构、布局、块对应的视图的扩展名。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.OnBlocksDefined(Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            整个聚合块的元数据生成完毕后的事件。
            </summary>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.BlocksTemplate.Clone">
            <summary>
            由于模块并不是线程安全的，所以提供 Clone 方法，方便复制模块
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.BlocksTemplate.EntityType">
            <summary>
            当前模板显示的实体类型
            </summary>
        </member>
        <member name="E:Rafy.MetaModel.View.BlocksTemplate.BlocksDefined">
            <summary>
            整个聚合块的元数据生成完毕事件。
            外界可监听此事件，对生成完毕后的视图做最后的修改。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ReadCodeTemplateOptions.ReadChildren">
            <summary>
            是否需要读取组合子
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.ReadCodeTemplateOptions.ReadQueryPanels">
            <summary>
            是否需要读取查询面板。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.AggtBlocks">
            <summary>
            聚合块定义
            
            该类可以被 XML 序列化
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocks.EnumerateAllBlocks">
            <summary>
            深度递归遍历所有的聚合块。
            
            先递归遍历聚合子块，再递归遍历环绕块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.AggtBlocks.op_Implicit(Rafy.MetaModel.View.Block)~Rafy.MetaModel.View.AggtBlocks">
            <summary>
            一个简单的块也可以直接转换为一个聚合块。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocks.Surrounders">
            <summary>
            聚合块中的主块的环绕块。
            
            环绕块跟主块没有直接关系。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.AggtBlocks.Children">
            <summary>
            聚合块中主块对应实体的聚合子类的聚合子块。
            
            聚合子块对应的实体跟主块对应的实体是聚合父子关系。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.SurrounderBlock">
            <summary>
            环绕块
            
            支持 XML 序列化
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderBlock.SurrounderType">
            <summary>
            环绕类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SurrounderBlock.RelationViewType">
            <summary>
            这里可以指定一个 RelationView 的子类，来实现 RelationView 行为的动态扩展。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ConditionBlock">
            <summary>
            条件面板块
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.NavigationBlock">
            <summary>
            导航面板块
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.LayoutMeta.#ctor(System.Type)">
            <summary>
            本构造函数是 WPF 专用
            </summary>
            <param name="layoutControl"> 该类型需要实现 ILayoutControl 接口 </param>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.Class">
            <summary>
            布局类的名称
            不可为 null。
            
            如果是 WPF，则这个字符串表示一个 LayoutMethod 类的子类的 AssemblyQualifiedName
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.ParentChildProportion">
            <summary>
            父子的分布比例
            此属性 可空
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.LayoutMeta.IsLayoutChildrenHorizonal">
            <summary>
            是否把聚合子对象横向排列。
            默认为 false。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.ParentChildProportion">
            <summary>
            父子的分布比例
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ParentChildProportion.Default">
            <summary>
            通过修改这个对象中的值，可以达到修改整个应用程序默认值的效果
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.BlocksDefinedEventArgs">
            <summary>
            整个聚合块的元数据生成完毕事件参数。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.BlocksDefinedEventArgs.Blocks">
            <summary>
            定义好的聚合块
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.PropertyReadonlyIndicator">
            <summary>
            属性是否可见的指示器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyReadonlyIndicator.Status">
            <summary>
            属性只读检测的状态
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyReadonlyIndicator.Property">
            <summary>
            当状态为动态检查时，这个属性表示需要被检查的属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.ReadOnlyStatus">
            <summary>
            三态的只读性。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.None">
            <summary>
            可编辑状态。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.ReadOnly">
            <summary>
            只读状态。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.ReadOnlyStatus.Dynamic">
            <summary>
            则表示不强制只读，容器按照自己相应的规则来计算自己的只读性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.PropertyVisibilityIndicator">
            <summary>
            属性是否可见的指示器
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.VisiblityType">
            <summary>
            可见性指示器的类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.IsDynamic">
            <summary>
            是否需要检测动态属性来获取可见性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.PropertyVisibilityIndicator.Property">
            <summary>
            当状态为动态检查时，这个属性表示需要被检查的属性。
            一个返回 bool 值的属性。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.VisiblityType">
            <summary>
            可见性指示器的类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.VisiblityType.Dynamic">
            <summary>
            动态表示是否需要检测动态属性来获取可见性
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandNames">
            <summary>
            一些内置的 web 命令
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WebCommandNames.CustomizeUI">
            <summary>
            用于界面配置的命令。
            如果没有添加客户化配置插件，
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommand">
            <summary>
            Javascript 命令的元数据
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WebCommand.Extend">
            <summary>
            继承自哪个类
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.JavascriptCode">
            <summary>
            对应的 javascript 代码
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.LabelModified">
            <summary>
            由于 Label 虽然有值，但是不一定要传输到客户端。所以用这个值来分辨是否需要传输。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WebCommand.Group">
            <summary>
            命令的系统分组类型
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WebCommandRepository">
            <summary>
            所有 Web 命令的集合
            
            这里只存储这些命令的一个原始值。每个类型的视图 EVM 中的 Commands 是这些值的拷贝。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByDirectory(System.String)">
            <summary>
            把某个目录中的 jsCommand 都加入到 Repository 中。
            </summary>
            <param name="directory">
            这个目录中的每一个文件是一个单独的 jsCommand。
            如果要放多个 jsCommand 到一个文件中，请用以下分隔符分开每一个 jsCommand：
            //rafy:commandEnd
            </param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集中 Commands 文件夹下的 js Resource。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.AddByJs(System.String)">
            <summary>
            通过解析 js 代码格式来添加 WebCommand。
            </summary>
            <param name="js"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WebCommandRepository.CombineAll">
            <summary>
            返回整个 javascript 的合集。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.Helper">
            <summary>
            一些静态方法的存放类
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.Helper.Sort``1(System.Collections.Generic.IList{``0},System.Func{``0,System.String},System.String[])">
            <summary>
            对指定的列表按照给定的名字顺序。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="nameGetter"></param>
            <param name="labels">
            指定的名字顺序。
            可以是list的子集。
            </param>
        </member>
        <member name="T:Rafy.MetaModel.View.ViewMetaExtension">
            <summary>
            为元数据扩展的配置 API
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DomainName(Rafy.MetaModel.View.EntityViewMeta,System.String)">
            <summary>
            设置实体的领域含义。
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDelegate(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置实体的主显示属性。
            
            例如，用户的主显示属性一般是用户姓名。
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DisableEditing(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            设置该实体是否可以在界面上不可编辑
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.EnableEditing(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            设置该实体是否可以在界面上可以进行编辑
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HideProperties(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            隐藏所有属性的可见性。
            
            一般使用在扩展视图中。
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.GroupBy(Rafy.MetaModel.View.EntityViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置实体在列表中显示时，按照哪个属性分组。
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.OrderProperties(Rafy.MetaModel.View.EntityViewMeta,System.Int32)">
            <summary>
            使用此方法定义的代码块中，自动根据代码调用的顺序设置属性排列的顺序。
            </summary>
            <param name="meta"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HideAllProperties(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            隐藏所有属性。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDetailColumnsCount(Rafy.MetaModel.View.EntityViewMeta,System.Int32)">
            <summary>
            声明在Detail里显示为几列。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailPanel``1(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            使用自定义表单作为表单控件。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseAutoDetailPanel(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            使用动态表单作为表单控件。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailLayoutMode(Rafy.MetaModel.View.WPFEntityViewMeta,Rafy.MetaModel.View.DetailLayoutMode)">
            <summary>
            声明当前表单使用的布局模式。
            </summary>
            <param name="meta">The meta.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailLayoutMode(Rafy.MetaModel.View.WPFDetailPropertyGroup,Rafy.MetaModel.View.DetailLayoutMode)">
            <summary>
            声明当前表单使用的布局模式。
            </summary>
            <param name="meta">The meta.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailGroupingMode(Rafy.MetaModel.View.WPFEntityViewMeta,Rafy.MetaModel.View.DetailGroupingMode)">
            <summary>
            声明当前表单使用的属性分组模式。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDetailAsHorizontal(Rafy.MetaModel.View.WPFEntityViewMeta,System.Boolean)">
            <summary>
            声明当前表单使用水平布局。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasDetailLabelSize(Rafy.MetaModel.View.WPFEntityViewMeta,System.Nullable{System.Double})">
            <summary>
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认宽度。
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseReport(Rafy.MetaModel.View.WPFEntityViewMeta,System.String)">
            <summary>
            指定某个实体元数据使用特定路径的 RDCL 报表文件。
            
            报表 RDLC 文件中默认使用实体作为数据源，数据源的名称必须和实体名相同。
            </summary>
            <param name="evm"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDefaultCommands(Rafy.MetaModel.View.WPFEntityViewMeta)">
            <summary>
            初始化实体视图中的命令按钮
            </summary>
            <param name="evm"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Object[])">
            <summary>
            指定某个类型使用指定的命令列表。
            </summary>
            <param name="meta"></param>
            <param name="commands">
            只支持两个类型：String、Type
            
            如果 WPF 命令是一个单独的 dll，则使用使用字符串的方式来声明。
            如果是字符串，则是命令类型的全名称。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            指定某个类型使用指定的命令列表。
            
            </summary>
            <param name="meta"></param>
            <param name="commands">
            只支持两个类型：String、Type
            如果是字符串，则是命令类型的全名称。
            </param>
            <remarks>
            使用这个方法添加命令时，会自动防止添加重复的命令。
            如果需要添加重复的命令，或者需要自定义构造 <see cref="T:Rafy.MetaModel.View.WPFCommand"/> 元数据时，
            请直接使用 <see cref="P:Rafy.MetaModel.View.WPFEntityViewMeta.Commands"/> 集合。
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Boolean)">
            <summary>
            清空所有 WPF 命令
            </summary>
            <param name="meta"></param>
            <param name="includeSystemCmds">
            是否在清除的同时，一同删除所有系统级别的命令。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WPFEntityViewMeta,System.Int32[])">
            <summary>
            移除指定组中的所有按钮。
            </summary>
            <param name="meta"></param>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLockProperty(Rafy.MetaModel.View.WebEntityViewMeta,Rafy.ManagedProperty.IManagedProperty[])">
            <summary>
            声明锁定属性列表
            </summary>
            <param name="meta"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.WithoutPaging(Rafy.MetaModel.View.WebEntityViewMeta)">
            <summary>
            不再使用分页。
            
            WebOnly
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDefaultCommands(Rafy.MetaModel.View.WebEntityViewMeta)">
            <summary>
            初始化实体视图中的命令按钮
            </summary>
            <param name="evm"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseCommand(Rafy.MetaModel.View.WebEntityViewMeta,System.String)">
            <summary>
            注意，使用此方法后，返回值是 JsCommand，可对其继续进行配置。
            </summary>
            <param name="meta"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ClearCommands(Rafy.MetaModel.View.WebEntityViewMeta,System.Boolean)">
            <summary>
            清空所有 Web 命令
            </summary>
            <param name="meta"></param>
            <param name="includeSystemCmds">
            是否在清除的同时，一同删除所有系统级别的命令。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Visibility(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性为动态检查是否可见
            
            WPF Only
            </summary>
            <param name="meta"></param>
            <param name="value">是否可见。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Visibility(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置该属性为动态检查是否可见
            
            WPF Only
            </summary>
            <param name="meta"></param>
            <param name="indicator">动态根据此属性来检查是否可见。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.EntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasOrderNo(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Double)">
            <summary>
            具体指定某个属性的排序号
            
            一般使用在扩展视图中。
            </summary>
            <param name="meta"></param>
            <param name="orderNo"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDataSource(Rafy.MetaModel.View.EntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            为某个引用属性直接快速设置数据源
            </summary>
            <param name="meta"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseDataSource(Rafy.MetaModel.View.EntityPropertyViewMeta,System.Func{System.Object})">
            <summary>
            为某个引用属性直接快速设置数据源
            </summary>
            <param name="meta"></param>
            <param name="dataSourceProvier"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WebEntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.WebEntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.WebEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Boolean)">
            <summary>
            设置该属性是否为只读
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowIn(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.MetaModel.View.ShowInWhere)">
            <summary>
            设置该属性可显示的范围
            </summary>
            <param name="meta"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.HasLabel(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的显示名称
            </summary>
            <param name="meta"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.Readonly(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            设置该属性为动态检查是否只读
            </summary>
            <param name="meta"></param>
            <param name="indicator">动态根据此属性来检查是否只读。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowInList(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Nullable{System.Double})">
            <summary>
            设置该属性需要显示在列表中，并设置其列表中的信息
            </summary>
            <param name="meta"></param>
            <param name="gridWidth">
            用于初始化表格控件的宽度属性
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.ShowInDetail(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            设置该属性在表单中显示时的详细信息
            
            注意，并不是所有属性在所有模式下都有用，所以请选择性设置。
            </summary>
            <param name="meta"></param>
            <param name="contentWidth">
            表单中该属性所占的格子宽度。
            
            如果值在 0 到 1 之间，表示百分比，只有 DetailLayoutMode.AutoGrid 模式下可用。
            否则表示绝对值。
            
            不指定，则使用系统默认值。
            </param>
            <param name="height">
            表单中该属性所占的总高度
            不指定，则使用系统默认宽度。
            </param>
            <param name="labelSize">
            在 DetailPanel 中显示的 Label 的宽度或者高度。
            不指定，则使用系统默认值。
            </param>
            <param name="asHorizontal">
            配置 DetailPanel 中 Label 与 Editor 的布局方向。true：横向；false：竖向。
            不指定，则使用系统默认值。
            </param>
            <param name="needNewLine">
            指定某个属性在表单中是否需要开启新行。
            此属性只在 DetailLayoutMode.Wrapping 下有用。
            </param>
            <param name="columnSpan">
            表单中该属性所占的列数。
            只在 DetailLayoutMode.AutoGrid 模式下有用。
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.UseEditor(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,System.String)">
            <summary>
            设置属性的编辑器
            </summary>
            <param name="meta"></param>
            <param name="editorName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.DisplayRefBy(Rafy.MetaModel.View.WPFEntityPropertyViewMeta,Rafy.ManagedProperty.IManagedProperty)">
            <summary>
            如果这是一个引用属性，则可以指定一个额外的冗余属性来进行显示。
            </summary>
            <param name="meta"></param>
            <param name="refDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.ViewMetaExtension.FireNavigation(Rafy.MetaModel.View.WPFEntityPropertyViewMeta)">
            <summary>
            设置该属性为导航项。
            此时，如果该属性变更，会自动触发导航查询
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.EntityViewMetaFactory">
            <summary>
            实体默认视图及实体信息的仓库
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.Create(System.Type,System.String,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            获取某个类型的默认视图或扩展视图
            </summary>
            <param name="entityType"></param>
            <param name="extendViewName"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.CreateBaseView(System.Type,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            查询某个实体类型所对应的基础视图信息
            </summary>
            <param name="entityType"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.EntityViewMetaFactory.CreateExtendView(System.Type,System.String,System.Nullable{Rafy.MetaModel.XmlConfig.BlockConfigType})">
            <summary>
            获取某个类型的扩展视图
            </summary>
            <param name="entityType"></param>
            <param name="extendViewName"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.View.NavigationPropertyMeta">
            <summary>
            导航属性的元数据
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.NavigationPropertyMeta.IdPropertyAfterSelection">
            <summary>
            如果本导航属性是一个子实体集合时，IdPropertyName 表示集合的主键应该赋值给我这个导航对象的哪个属性。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.Hide">
            <summary>
            默认值：不显示。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.DropDown">
            <summary>
            是否在下拉框中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.List">
            <summary>
            是否在列表中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.Detail">
            <summary>
            是否在表单中显示
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.ListDetail">
            <summary>
            显示在列表和表单中
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.ShowInWhere.ListDropDown">
            <summary>
            显示在列表和下拉框中
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.DetailLayoutMode">
            <summary>
            表单布局模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.Dynamic">
            <summary>
            如果只有少量的属性，只需要显示一行时，使用 AutoGrid。
            否则使用 Wrapping
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.Wrapping">
            <summary>
            所有编辑器可自动折行。
            
            可以使用 NewLineInDetail 主动使某个编辑器直接折行。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailLayoutMode.AutoGrid">
            <summary>
            根据列数自动为所有编辑器分配到表格中。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.DetailGroupingMode">
            <summary>
            表单中属性分组的模式
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailGroupingMode.GroupBox">
            <summary>
            使用 StackPanel + GroupBox 进行分组。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.DetailGroupingMode.TabItem">
            <summary>
            使用 TabControl + TabItem 进行分组。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.SelectionViewMeta">
            <summary>
            选择实体的相关视图信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectionEntityType">
            <summary>
            被用来选择的实体类型。
            必填项。
            
            这个类型可以直接与引用属性对应的实体类型相同，也可以是一个其它的实体，方便客户进行选择。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefInfo">
            <summary>
            对应的引用信息
            
            可能为 null，此时表示此属性只是在界面上有引用元数据，
            但是定义的实体类型却没有相关的引用信息（例如根本没有定义实体引用属性）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefTypeDefaultView">
            <summary>
            引用实体对应的默认视图
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.DataSourceProperty">
            <summary>
            查询时，数据来源的属性。在这个属性里面查找值。
            
            如果未设置这个值，则会调用数据层方法查询完整的实体列表。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.DataSourceProvider">
            <summary>
            如果是没有指定界面时，可以使用这个属性来指定弹出窗口的数据源。
            可选。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectionMode">
            <summary>
            选择模式：多选/单选。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SplitterIfMulti">
            <summary>
            多选模式下，返回的值应该根据这个进行分隔
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.SelectedValuePath">
            <summary>
            选择后的值在目标实体中对应的托管属性。
            可选。
            如果是非引用属性，需要填写这个属性的值。否则默认为 Entity.IdProperty
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefIdHost">
            <summary>
            如果在属性被设置完成后，还需要把被选择实体的 Id 一便赋值过来时，
            则需要指定此值来说明使用哪个属性来接收被选择实体的 Id 或者 Id 列表。
            
            如果是单选模式，则这个属性的类型必须是 int?，
            如果是多选模式，则这个属性的类型必须是 int[]（数组类型）。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.SelectionViewMeta.RefSelectedCallBack">
            <summary>
            引用选择完毕后的回调函数
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.RefSelectedCallBack">
            <summary>
            引用选择完毕后的回调函数
            </summary>
            <param name="owner">弹出窗口对应的当前实体</param>
            <param name="selectedEntities">被选择的实体列表，Count 的范围是自然数。</param>
        </member>
        <member name="T:Rafy.MetaModel.View.UIModel">
            <summary>
            Web 模型容器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.UIModel.InitCommandMetas">
            <summary>
            初始化程序中所有的实体DLL。
            
            此方法应该在程序初始化时调用。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.UIModel.XmlConfigMgr">
            <summary>
            xml 配置管理器
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandGroupType">
            <summary>
            命令分组类型
            
            分辨该命令在是属于哪种逻辑的命令，方便系统控制。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.None">
            <summary>
            没有指定
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.Business">
            <summary>
            业务类按钮
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.View">
            <summary>
            公用的查看类型 如展开树形列表，刷新等
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.Edit">
            <summary>
            公用的编辑类型 如增、删等
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandGroupType.System">
            <summary>
            系统级命令，如：界面配置、报表功能挖掘、导出 Excel 等。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.WebCommandJsHelper">
            <summary>
            js 文件帮助类。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.ClassRegex">
            <summary>
            匹配 js 中定义的类名
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.TextRegex">
            <summary>
            匹配 js 中 config 定义中 meta 中的 text 作为标签
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.GroupRegex">
            <summary>
            匹配 js 中 config 定义中 meta 中的 group 作为标签
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.WebCommandJsHelper.JsBlocksSplitter">
            <summary>
            当一个 js 文件中写了多个 js 类时，需要使用此字符串来进行分隔
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.WebCommandJsHelper.LoadCommandJsBlocks(System.String,System.Collections.Generic.List{Rafy.MetaModel.JsBlock})">
            <summary>
            根据分隔符加载某个 js 文件中的所有的类。
            </summary>
            <param name="jsContent"></param>
            <param name="list"></param>
        </member>
        <member name="T:Rafy.MetaModel.JsBlock">
            <summary>
            表明一个 js 代码块
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.JsBlock.SortByHierachy(System.Collections.Generic.List{Rafy.MetaModel.JsBlock})">
            <summary>
            按照继承关系排序整个列表
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.JavascriptCode">
            <summary>
            代码块对应的 js 代码。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.ClassName">
            <summary>
            如果这个代码块是一个类，则这个属性表示类名
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.JsBlock.Extend">
            <summary>
            如果这个代码块是一个类，并且它有基类，则这个属性这个类的基类的类名。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CommandLocation">
            <summary>
            命令生成位置
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandLocation.Toolbar">
            <summary>
            默认为生成在 Toolbar 上，由一个按钮触发或者Group的MenuItem
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.CommandLocation.Menu">
            <summary>
            生成为菜单
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandNames">
            <summary>
            一些内置的 WPF 命令
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.CustomizeUI">
            <summary>
            这个命令需要引入 Rafy.Customization 插件才可使用。
            否则值为 null。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.SysCommands">
            <summary>
            系统中为非查询类型 添加的默认系统命令
            
            这里的命令会在 UIModel.Views.CreateBaseView 方法中进行设置。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.View.WPFCommandNames.SysQueryCommands">
            <summary>
            系统中为查询类型 添加的默认系统命令
            
            这里的命令会在 UIModel.Views.CreateBaseView 方法中进行设置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommand">
            <summary>
            WPF 客户端命令元数据。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommand.HasLocation(Rafy.MetaModel.View.CommandLocation)">
            <summary>
            判断是否已经指定了要生成在某个位置。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommand.CloneMutable">
            <summary>
            复制出一个可变的元数据对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Name">
            <summary>
            获取或设置命令的唯一名称。
            名称即代表了这个命令。
            <remarks>
            默认返回命令的全名称。如果想要重复使用同一个命令，则可以为其设置不同的名称。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.RuntimeType">
            <summary>
            对应的命令的运行时类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Hierarchy">
            <summary>
            此命令所处的分级位置。
            
            当命令生成在菜单中时，可以使用如下语法：一级/二级/三级
            当命令生成在工具栏中时，同一组的命令都会生成一个下拉按钮列表中。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.ToolTip">
            <summary>
            命令显示的鼠标划过文本。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.ImageName">
            <summary>
            命令显示的图片名称。
            <remarks>
            <para>这个图片需要存放在命令所在程序集的 Images 文件夹中。</para>
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Gestures">
            <summary>
            快捷键表达式
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.GroupAlgorithmType">
            <summary>
            为这个Command进行“生成分组”的算法类。
            如果为null，则会使用默认生成算法。
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.GroupType">
            <summary>
            命令的分组位置
            
            常用的分组位置参见类型 <see cref="T:Rafy.MetaModel.View.CommandGroupType"/>
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.View.WPFCommand.Location">
            <summary>
            命令生成的控件的位置。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.WPFCommandRepository">
            <summary>
            系统中所有 WPF 命令的仓库
            
            这里只存储这些命令的一个原始值。每个类型的视图 EVM 中的 Commands 是这些值的拷贝。
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandRepository.AddByAssembly(System.Reflection.Assembly)">
            <summary>
            添加程序集中 Commands 文件夹下的 js Resource。
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:Rafy.MetaModel.View.WPFCommandRepository.Create(System.Type)">
            <summary>
            构造一个可变的元数据
            </summary>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.MetaConfig">
            <summary>
            这个类是 xml 变更配置文件中所有运行时类的基类。
            
            这些类需要支持 xml 的序列化和反序列化。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.MetaConfig.NullString">
            <summary>
            使用这个值的字符串都表示要主动把某个字符串值设置为 null。（默认情况下 null 表示没有更改。）
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.IsChanged">
            <summary>
            子类重写此方法来返回当前的配置是否是有效的。
            只有有效的配置类才需要序列化到 XML 文件中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.GetXName">
            <summary>
            如果必要，子类可以重写此方法来指定 XML 元素的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.ToXml">
            <summary>
            子类实现此方法来指定 序列化 逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.ReadXml(System.Xml.Linq.XElement)">
            <summary>
            子类实现此方法来指定 反序列化 逻辑
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.MetaConfig.CreateElement">
            <summary>
            创建一个当前对象对应的 XML 元素
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockCommandConfig">
            <summary>
            JsCommand 的配置器
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockConfig">
            <summary>
            UI 块的配置
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.Key">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.PageSize">
            <summary>
            变更后的页面大小
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.GroupBy">
            <summary>
            分组属性
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.EntityProperties">
            <summary>
            属性变更集
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockConfig.Commands">
            <summary>
            命令变更集
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.BlockConfigKey">
            <summary>
            UI 块配置文件的主键
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.IsDefaultView">
            <summary>
            判断当前配置是否为默认视图
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.GetDescription">
            <summary>
            友好描述信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.BlockConfigKey.GetFilePath">
            <summary>
            对应的 XML 文件路径地址。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.EntityType">
            <summary>
            对应的实体类型
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.ExtendView">
            <summary>
            如果是扩展视图，则这个属性是扩展视图的名称
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.BlockConfigKey.Type">
            <summary>
            配置文件的类型
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.BlockConfigType">
            <summary>
            块配置文件类型
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.BlockConfigType.Config">
            <summary>
            此类配置文件是在主干版本开发时使用的。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.XmlConfig.BlockConfigType.Customization">
            <summary>
            一类配置文件是在客户化期才起作用的。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig">
            <summary>
            UI 块界面属性的配置
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.Name">
            <summary>
            属性的名称
            此属性不可为空
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.Label">
            <summary>
            变更后的标签
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.ShowInWhere">
            <summary>
            变更后的显示信息
            </summary>
        </member>
        <member name="P:Rafy.MetaModel.XmlConfig.Web.BlockPropertyConfig.OrderNo">
            <summary>
            变更后的位置
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.View.CodeEVMReader">
            <summary>
            从代码中读取 EntityViewMeta
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.Read(Rafy.MetaModel.EntityMeta)">
            <summary>
            从一个实体类型读取它所对应的视图模型。
            </summary>
            <param name="meta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.CreateEntityViewMeta(Rafy.MetaModel.EntityMeta)">
            <summary>
            创建某个实体类的视图元数据
            </summary>
            <param name="entityMeta"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.View.CodeEVMReader.CreatePropertiesViewMeta(Rafy.MetaModel.View.EntityViewMeta)">
            <summary>
            加载所有属性元数据
            </summary>
            <param name="viewMeta"></param>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.XmlConfigFileSystem">
            <summary>
            此类为 XML 文件提供路径算法
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager">
            <summary>
            Web 模型的 Xml 配置文件管理器
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.Save(Rafy.MetaModel.XmlConfig.Web.BlockConfig)">
            <summary>
            把某个 BlockConfig 保存为 XML 文件。
            </summary>
            <param name="blockCfg"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.GetBlockConfig(Rafy.MetaModel.XmlConfig.BlockConfigKey)">
            <summary>
            通过 key 查找 BlockConfig。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.Save(System.String,Rafy.MetaModel.View.AggtBlocks)">
            <summary>
            把某个自定义的聚合块保存到硬盘上。
            </summary>
            <param name="blocksName"></param>
            <param name="blocks"></param>
        </member>
        <member name="M:Rafy.MetaModel.XmlConfig.Web.XmlConfigManager.GetBlocks(System.String)">
            <summary>
            创建某个自定义的聚合块
            </summary>
            <param name="blocksName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.RafyEnvironment">
            <summary>
            Rafy 的上下文环境
            </summary>
            <summary>
            Library Module Plugins
            </summary>
        </member>
        <member name="F:Rafy.RafyEnvironment.Configuration">
            <summary>
            Rafy 配置信息。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.Translate(System.String)">
            <summary>
            把程序中编写的字符串翻译为当前语言。
            
            直接扩展在字符串上的翻译方法，方便使用
            </summary>
            <param name="embadedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.TranslateReverse(System.String)">
            <summary>
            把当前语言翻译为程序中编写的字符串。
            
            直接扩展在字符串上的翻译方法，方便使用
            </summary>
            <param name="translatedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.InitCustomizationPath">
            <summary>
            提供一个先初始化路径的方法，这个方法可以单独先被调用。
            这样，就可以通过路径找到需要的程序集，其它的初始化才能正常进行。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetCustomerEntityDlls(System.Boolean)">
            <summary>
            获取所有此版本中需要加载的实体类Dll集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetCustomerModuleDlls">
            <summary>
            获取所有此版本中需要加载的模块Dll集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapDllPath(System.String)">
            <summary>
            使用一个相对的路径来计算绝对路径
            </summary>
            <param name="appRootRelative"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapAbsolutePath(System.String)">
            <summary>
            相对路径转换为绝对路径。
            </summary>
            <param name="appRootRelative"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.MapRelativePath(System.String)">
            <summary>
            把绝对路径转换为相对路径。
            </summary>
            <param name="absolutePath"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.ResetLocation">
            <summary>
            使用这个方法后，Location 会被重置，这样可以再次对该属性进行设置。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.IsOnServer">
            <summary>
            判断是否在服务端。
            
            如果是单机版，则当进入至少一次数据门户后，才能算作服务端，返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.IsOnClient">
            <summary>
            判断是否在客户端
            单机版，如果还没有进入数据门户中，则同样返回 true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.NewLocalId">
            <summary>
            返回一个本地的 Id，该 Id 在当前应用程序中是唯一的，每次调用都会自增一。
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rafy.RafyEnvironment.DebugHelper">
            <summary>
            帮助调试的变量，可随时把即时窗口中的临时对象放在这里进行查看。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.StartupDomainPlugins">
            <summary>
            启动所有的 实体插件
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.StartupUIPlugins">
            <summary>
            启动所有的 模块插件
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.InitExtensionProperties">
            <summary>
            注册所有插件中的扩展托管属性
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetDomainPlugins">
            <summary>
            找到当前程序所有可运行的领域实体插件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetUIPlugins">
            <summary>
            找到当前程序所有可运行的界面插件程序集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetAllPlugins">
            <summary>
            获取当前环境被初始化的所有插件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.SearchAllRootTypes">
            <summary>
            遍历系统中存在的所有聚合根类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetRootType(System.Type)">
            <summary>
            获取一个实体类型的根类型。
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.GetTypeConfigurations">
            <summary>
            获取所有的实体配置列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.RafyEnvironment.FindConfigurations(System.Type)">
            <summary>
            获取某个实体视图的所有配置类实例
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.RafyEnvironment.Provider">
            <summary>
            获取应用程序环境的值提供器。
            </summary>
            <value>
            The provider.
            </value>
        </member>
        <member name="P:Rafy.RafyEnvironment.Identity">
            <summary>
            返回当前用户。
            
            本属性不会为 null，请使用 IsAuthenticated 属性来判断是否已经登录。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Principal">
            <summary>
            返回当前身份。
            
            可能返回 null。如果不想判断 null，请使用 Identity 属性。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.App">
            <summary>
            当前的应用程序运行时。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.BranchProvider">
            <summary>
            查找文件路径的查找算法提供器。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.IsDebuggingEnabled">
            <summary>
            当前是否正处于调试状态。
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.Location">
            <summary>
            当前应用程序的位置信息。
            
            对应的位置：
            单机版：IsWPFUI = true, DataPortalMode = DirectConnect；
            Web 服务器：IsWebUI = true, DataPortalMode = DirectConnect；
            C/S 客户端：IsWPFUI = true, DataPortalMode = ThroughService；
            C/S 服务端（默认值）：IsWPFUI = flase, IsWebUI = flase, DataPortalMode = DirectConnect；
            </summary>
        </member>
        <member name="P:Rafy.RafyEnvironment.ThreadPortalCount">
            <summary>
            获取当前线程目前已经进入的数据门户层数。
            
            Set 方法为 Rafy 框架内部调用，外部请不要设置，否则会引起未知的异常。
            </summary>
        </member>
        <member name="M:Rafy.RafyEnvironment.ViewConfigFinder`1.FindViewConfigurations(System.Type,System.String)">
            <summary>
            获取某个实体视图的所有配置类实例
            </summary>
            <param name="entityType"></param>
            <param name="extendView">如果想获取扩展视图列表，则需要传入指定的扩展视图列表</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.LocationInformation">
            <summary>
            当前应用程序执行环境的位置信息。
            
            对应旧的 RafyLocation：
            单机版：IsWPFUI = true, DataPortalMode = DirectConnect；
            C/S 客户端：IsWPFUI = true, DataPortalMode = ThroughService；
            C/S 服务端：IsWPFUI = flase, DataPortalMode = DirectConnect；
            Web 服务器：IsWebUI = true, DataPortalMode = DirectConnect；
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.IsWPFUI">
            <summary>
            当前应用程序是否是一个 WPF UI 应用程序。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.IsWebUI">
            <summary>
            当前应用程序是否是一个 Web UI 应用程序。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.DataPortalMode">
            <summary>
            应用程序默认的数据门户模式。
            </summary>
        </member>
        <member name="P:Rafy.LocationInformation.ConnectDataDirectly">
            <summary>
            是否应用程序直接连接数据。
            DataPortalMode == DataPortalMode.DirectConnect。
            </summary>
        </member>
        <member name="T:Rafy.DataPortalMode">
            <summary>
            数据门户模式。
            </summary>
        </member>
        <member name="F:Rafy.DataPortalMode.ConnectDirectly">
            <summary>
            应用程序直接连接数据。
            </summary>
        </member>
        <member name="F:Rafy.DataPortalMode.ThroughService">
            <summary>
            应用程序通过服务来连接数据。
            </summary>
        </member>
        <member name="T:Rafy.MetaModel.BranchPathProvider">
            <summary>
            管理所有分支版本的路径及优先级。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider.BranchFilesRootDir">
            <summary>
            各分支版本存放的文件夹名称。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider.CommonAppName">
            <summary>
            主干版本的文件夹名。
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider._appNames">
            <summary>
            所有的应用列表。
            第一个是Common
            </summary>
        </member>
        <member name="F:Rafy.MetaModel.BranchPathProvider._rootPath">
            <summary>
            所有客户文件夹所在的父文件夹路径
            </summary>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.AddBranch(System.String)">
            <summary>
            按照优先级调用此方法添加分支版本的路径。
            </summary>
            <param name="branchAppName"></param>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.MapAllPathes(System.String,System.Boolean)">
            <summary>
            根据提供的版本文件（夹）路径，按优先级返回所有版本对应的文件名。
            </summary>
            <param name="versionPath"></param>
            <param name="toAbsolute"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.GetCustomerFile(System.String)">
            <summary>
            找到客户化相对路径所对应的文件，按照版本的优先级寻找。
            
            从一个相对于版本目录的地址，获取到确切的文件相对地址，如：
            Images/1.jpg
            =>
            Files/DongFang/Images/1.jpg
            其中，分支版本名是不确定的。
            </summary>
            <param name="versionPath">与分支版本无关的文件路径。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.MetaModel.BranchPathProvider.FindCustomerFile(System.String)">
            <summary>
            找到客户化相对路径所对应的文件，按照版本的优先级寻找。
            
            从一个相对于版本目录的地址，获取到确切的文件相对地址，如：
            Images/1.jpg
            =>
            Files/DongFang/Images/1.jpg
            其中，分支版本名是不确定的。
            </summary>
            <param name="versionPath">与分支版本无关的文件路径。</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.MetaModel.BranchPathProvider.HasBranch">
            <summary>
            返回当前是否已经有分支版本进行了客户化。
            </summary>
        </member>
        <member name="T:Rafy.AnonymousIdentity">
            <summary>
            匿名用户。
            </summary>
        </member>
        <member name="T:Rafy.IRafyIdentity">
            <summary>
            当前用户的接口定义
            为后期扩展预留的接口。
            </summary>
        </member>
        <member name="P:Rafy.IRafyIdentity.Id">
            <summary>
            用户的 Id。
            
            如果未被验证，则此值返回 0。
            </summary>
        </member>
        <member name="T:Rafy.PermissionMgr">
            <summary>
            系统权限的抽象定义
            </summary>
        </member>
        <member name="M:Rafy.PermissionMgr.CanShowModule(Rafy.MetaModel.ModuleMeta)">
            <summary>
            是否能显示某个模块
            </summary>
            <param name="module"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.CanShowBlock(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block)">
            <summary>
            控制某一个块是否可以显示
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.HasOperation(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.ModuleOperation)">
            <summary>
            是否有某个操作的权限
            </summary>
            <param name="module"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.PermissionMgr.HasCommand(Rafy.MetaModel.ModuleMeta,Rafy.MetaModel.View.Block,System.String)">
            <summary>
            是否能执行某个命令
            </summary>
            <param name="module"></param>
            <param name="block"></param>
            <param name="commandName"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.PermissionMgr.Provider">
            <summary>
            所有接口的提供程序。
            </summary>
        </member>
        <member name="T:Rafy.SystemOperationKeys">
            <summary>
            系统的功能权限 id 列表
            
            此些 Id 会保存到数据库中，不能更改值。
            </summary>
        </member>
        <member name="F:Rafy.SystemOperationKeys.Read">
            <summary>
            是否可查看某对象的功能的权限标记。
            模块根对象对应为打开模块功能，子对象对应为显示子对象功能。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.PluginAssembly">
            <summary>
            表示某一个插件程序集
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.PluginAssembly.Instance">
            <summary>
            程序集当中的插件对象。
            如果插件中没有定义，则此属性为 null。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.PluginAssembly.Assembly">
            <summary>
            程序集本身
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.PluginAssembly.SetupIndex">
            <summary>
            本属性表示插件在所有插件中的启动索引号。
            索引号表示了插件的启动优先级，索引号越小，越先被启动。
            该优先级的计算方式为：
            
            1. 所有 DomainPlugin 的索引号全部少于所有的 UIPlugin 的索引号；
            2. 接着按照 SetupLevel 进行排序，越小的 SetupLevel 对应越小的索引号。
            3. 对于 SetupLevel 相同的插件，则根据引用关系对插件进行排序，引用其它插件越少的插件，对应的索引号更小。
            </summary>
        </member>
        <member name="P:Rafy.ComponentModel.EmptyPlugin.Assembly">
            <summary>
            插件对应的程序集。
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.ReuseLevel">
            <summary>
            产品的 “721” 重用级别
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.ReuseLevel.Main">
            <summary>
            主版本（7）
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.ReuseLevel.Part">
            <summary>
            部分版本（2）
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.ReuseLevel.Customized">
            <summary>
            客户化版本（1）
            </summary>
        </member>
        <member name="T:Rafy.ComponentModel.PluginSetupLevel">
            <summary>
            Rafy 中的其它插件启动级别。
            </summary>
        </member>
        <member name="F:Rafy.ComponentModel.PluginSetupLevel.System">
            <summary>
            Rafy 系统级别的重用级别，一般不要使用。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.Cache">
            <summary>
            缓存子系统
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.#ctor(Rafy.Utils.Caching.CacheProvider)">
            <summary>
            构造函数。
            </summary>
            <param name="cacheProvider">
            本缓存模块需要指定提供器。
            </param>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Get(System.String,System.String)">
            <summary>
            通过key和region从缓存中获取缓存项。
            如果不存在，则返回null。
            </summary>
            <param name="key"></param>
            <param name="regionName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Add(System.String,System.Object,Rafy.Utils.Caching.Policy,System.String)">
            <summary>
            向缓存中添加一项。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy">缓存使用的策略（一般是过期策略）</param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Remove(System.String,System.String)">
            <summary>
            删除指定键值的缓存。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.ClearRegion(System.String)">
            <summary>
            清空某个区域下的所有数据。
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Clear">
            <summary>
            清空所有缓存。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.Cache.Get``1(System.String,System.Func{``0},System.String,Rafy.Utils.Caching.Policy)">
            <summary>
            从缓存中获取指定的值。
            
            尝试使用缓存获取，如果不存在，则调用ifNotExists函数获取返回值，并添加到缓存中。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="ifNotExists"></param>
            <param name="regionName"></param>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Utils.Caching.Cache.IsEnabled">
            <summary>
            是否打开缓存功能？
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.CacheProvider">
            <summary>
            通用缓存框架中的提供器
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.GetCacheItem(System.String,System.String)">
            <summary>
            通过key和region从缓存中获取缓存项。
            如果不存在，则返回null。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Add(System.String,System.Object,Rafy.Utils.Caching.Policy,System.String)">
            <summary>
            向缓存中添加一项。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="policy">缓存使用的策略（一般是过期策略）</param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Remove(System.String,System.String)">
            <summary>
            把指定项从缓存中移除。
            </summary>
            <param name="key"></param>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.ClearRegion(System.String)">
            <summary>
            删除某个区域中的所有值。
            </summary>
            <param name="region"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.CacheProvider.Clear">
            <summary>
            清空所有缓存。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.StoredValue">
            <summary>
            存储在缓存中的对象
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.StoredValue.Value">
            <summary>
            真实的缓存值。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.StoredValue.Checker">
            <summary>
            缓存值获取时需要进行的检测。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.HybirdCacheProvider">
            <summary>
            综合使用内存和硬盘的缓存提供器。
            一级缓存：内存
            二级缓存：硬盘/数据库
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.HybirdCacheProvider._memory">
            <summary>
            一级缓存：内存
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.HybirdCacheProvider._disk">
            <summary>
            二级缓存：硬盘
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.HybirdCacheProvider.#ctor(System.String)">
            <summary>
            使用指定的 sqlce 文件来作为二级缓存的硬盘缓存。
            </summary>
            <param name="sqlceFile"></param>
        </member>
        <member name="M:Rafy.Utils.Caching.HybirdCacheProvider.#ctor(Rafy.Utils.Caching.CacheProvider)">
            <summary>
            使用指定的硬盘缓存来构造二级缓存。
            </summary>
            <param name="diskProvider"></param>
        </member>
        <member name="T:Rafy.Utils.Caching.MemoryCacheProvider">
            <summary>
            内存缓存提供器
            
            使用System.Runtime.Caching.MemoryCache作为内部实现。
            由于MemoryCache不支持Region，所以这里使用RegionCache进行转换。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.SQLCompactCacheProvider">
            <summary>
            使用 SqlCe 的缓存提供器。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._commonRegionName">
            <summary>
            所有未提供Region的项，都加入到这个Region中。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._locker">
            <summary>
            SQL CE 3.5 不支持锁进制，但是ObjectCache必须实现多线程间同步。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._syncRoot">
            <summary>
            由于SQLCE不支持多链接，所以打开/关闭链接时，需要手工进行同步。
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.SQLCompactCacheProvider._cacheDir">
            <summary>
            文件缓存的文件夹名。
            如果某行的数据超过SQLCE的最大行长，则需要使用文件来缓存。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.NormalProvider">
            <summary>
            ObjectCache的一般实现
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.RegionCache">
            <summary>
            使用装饰模式，把一个不支持Region的ObjectCache变为支持的。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.ChangeChecker">
            <summary>
            用于缓存是否过期的实时检测器
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.Check">
            <summary>
            检测是否发生更改。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.NotifyChanged">
            <summary>
            子类调用方法通知发生了更改。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.ChangeChecker.GetMemoto">
            <summary>
            检测器需要实现Memoto模式，可能需要保存起来。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Utils.Caching.ChangeChecker.HasChanged">
            <summary>
            是否已经发生了更改。
            </summary>
        </member>
        <member name="T:Rafy.Utils.Caching.CheckerMemoto">
            <summary>
            ChangeChecker的可序列化的Memoto。
            </summary>
        </member>
        <member name="M:Rafy.Utils.Caching.CheckerMemoto.Restore">
            <summary>
            Memoto可以还原原有的ChangeChecker。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.Caching.Policy">
            <summary>
            缓存策略
            </summary>
        </member>
        <member name="F:Rafy.Utils.Caching.Policy.Empty">
            <summary>
            一个空策略。
            </summary>
        </member>
        <member name="P:Rafy.Utils.Caching.Policy.Checker">
            <summary>
            缓存使用的实时检测器
            </summary>
        </member>
        <member name="T:Rafy.WCF.CompactMessageEncoder">
            <summary>
            A message encoder class that compacts the message size by compressing it.
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoder._contentType">
            <summary>
            Stores the content type name of the message
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoder._innerEncoder">
            <summary>
            Holds the inner message encoder (binary or text)
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.#ctor(System.ServiceModel.Channels.MessageEncoder)">
            <summary>
            Initialize the message encoder with an inner encoder
            </summary>
            <param name="innerEncoder">Binary or Text message encoder to use as an inner encoder</param>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.ReadMessage(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.String)">
            <summary>
            Decompress and desearialize array of bytes into a message. 
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.WriteMessage(System.ServiceModel.Channels.Message,System.Int32,System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Searialize and compress a message into an array of bytes
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.CompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.Int32)">
            <summary>
            Compress a buffer
            </summary>
            <param name="buffer"></param>
            <param name="bufferManager"></param>
            <param name="messageOffset"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoder.DecompressBuffer(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager)">
            <summary>
            Decompress a buffer
            </summary>
            <param name="buffer"></param>
            <param name="bufferManager"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.ContentType">
            <summary>
            Get the content type of the message
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.MediaType">
            <summary>
            Get the media type of the encoder
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoder.MessageVersion">
            <summary>
            Get the message version of the encoder
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoderFactory._encoder">
            <summary>
            Stores the compact message encoder
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncoderFactory._innerFactory">
            <summary>
            Stores the message encoder factory of the inner encoder
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncoderFactory.#ctor(System.ServiceModel.Channels.MessageEncoderFactory)">
            <summary>
            Construct a compact message encoder factory
            </summary>
            <param name="innerFactory">The inner encoder factory</param>o
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoderFactory.Encoder">
            <summary>
            Get the compress message encoder
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncoderFactory.MessageVersion">
            <summary>
            Get the message version
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingBindingElement._innerBindingElement">
            <summary>
            Stores the inner binding element
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel factory stack on the client that creates a specified type of channel for a specified context. 
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.BuildChannelListener``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Builds the channel listener on the service that accepts a specified type of channel for a specified context.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.CreateMessageEncoderFactory">
            <summary>
            Create the CompactMessageEncoderFactory
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
            <summary>
            Returns a typed object requested, if present, from the appropriate layer in the binding element stack. 
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingBindingElement._baseBindingElement">
            <summary>
            Stores the base binding element so clones can use it.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.Clone">
            <summary>
            Clone the CompactMessageEncodingBindingElement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingBindingElement.#ctor(Rafy.WCF.CompactMessageEncodingBindingElement)">
            <summary>
            Constructor, used with the Clone method
            </summary>
            <param name="originalBindingElement"></param>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingBindingElement.InnerBindingElement">
            <summary>
            Returns the inner binding element
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingBindingElement.MessageVersion">
            <summary>
            Get/Set the message version
            </summary>
        </member>
        <member name="T:Rafy.WCF.CompactMessageEncodingElement">
            <summary>
            This class enables the user to configure the CompactMesssageEncoder with the configuration file.
            It's derived from ConfigurationElement
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingElement.CreateBindingElement">
            <summary>
            Creates an instance of the binding element
            </summary>
        </member>
        <member name="F:Rafy.WCF.CompactMessageEncodingElement._properties">
            <summary>
            Stores the available properties of this ConfigurationElement.
            It's initialized in the Properties property.
            </summary>
        </member>
        <member name="M:Rafy.WCF.CompactMessageEncodingElement.ApplyConfiguration(System.ServiceModel.Channels.BindingElement)">
            <summary>
            Apply the configuration file to the binding element
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.BindingElementType">
            <summary>
            Gets the type of the binding element. 
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.Properties">
            <summary>
            Gets the collection of properties. 
            </summary>
        </member>
        <member name="P:Rafy.WCF.CompactMessageEncodingElement.BinaryMessageEncodingElement">
            <summary>
            Get the BinaryMessageEncodingElement configuration 
            </summary>
        </member>
        <member name="M:Rafy.Utils.DateRange.#ctor(Rafy.Utils.DateRange)">
            <summary>
            克隆一个对象
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:Rafy.Utils.EmitContext">
            <summary>
            一个简单的 Emit 上下文。
            目前只是提供了一个基本的 ModuleBuilder。
            </summary>
        </member>
        <member name="M:Rafy.Utils.EmitContext.GetDynamicModule">
            <summary>
            获取动态的模块，所有的类都生成在这个模块中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.NumberRange.#ctor(Rafy.Utils.NumberRange)">
            <summary>
            克隆一个对象
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:Rafy.Utils.ObjectCloner.Clone``1(``0)">
            <summary>
            使用序列化器来序列化反序列化的方式，深度复制一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Utils.PathHelper.ModifyPrivateBinPath(System.String)">
            <summary>
            修改当前程序的私有路径
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:Rafy.Threading.IObservableActions">
            <summary>
            任意开始，最后结束
            </summary>
        </member>
        <member name="M:Rafy.Threading.IObservableActions.Execute(System.Action)">
            <summary>
            调用此方法时，任务直接进入调度队列中
            </summary>
            <param name="action"></param>
        </member>
        <member name="E:Rafy.Threading.IObservableActions.FirstActionStarted">
            <summary>
            第一个异步任务开始执行时
            </summary>
        </member>
        <member name="E:Rafy.Threading.IObservableActions.LastActionEnded">
            <summary>
            最后一个异步任务执行完毕后
            </summary>
        </member>
        <member name="T:Rafy.Threading.ForeAsyncLoader">
            <summary>
            预加载的实现类。
            
            实现某个action的预加载。
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._signal">
            <summary>
            同步两个线程的信号
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._version">
            <summary>
            _status的“版本号”
            </summary>
        </member>
        <member name="F:Rafy.Threading.ForeAsyncLoader._action">
            <summary>
            真正执行的耗时的操作
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.#ctor(System.Action)">
            <summary>
            构造一个对应指定方法的预加载器。
            </summary>
            <param name="loadAction">
            真正的加载方法，比较耗时的操作。
            </param>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.IsRunOver">
            <summary>
            是否已经加载完毕。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.BeginLoading">
            <summary>
            开始异步进行预加载。
            
            如果在进行执行Reset操作前，调用本方法多次，也只会执行一次loadAction。
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.WaitForLoading">
            <summary>
            等待异步加载完成。
            
            （注意，如果在这个方法之前没有调用Begin，则这里也会先调用Begin。）
            </summary>
        </member>
        <member name="M:Rafy.Threading.ForeAsyncLoader.Reset">
            <summary>
            重设本加载器，使得BeginLoading可以再次起作用。
            </summary>
        </member>
        <member name="P:Rafy.Threading.ForeAsyncLoader.Status">
            <summary>
            加载器状态
            </summary>
        </member>
        <member name="E:Rafy.Threading.ForeAsyncLoader.ActionSucceeded">
            <summary>
            执行成功的事件。
            </summary>
        </member>
        <member name="T:Rafy.Threading.LoaderStatus">
            <summary>
            预加载器状态。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.NotStarted">
            <summary>
            还未启动
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Running">
            <summary>
            正在加载中。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Completed">
            <summary>
            表示是否已经运行过。
            </summary>
        </member>
        <member name="F:Rafy.Threading.LoaderStatus.Failed">
            <summary>
            加载失败。
            </summary>
        </member>
        <member name="T:Rafy.Threading.IParallelActions">
            <summary>
            这个只有准备好了任务后，再一起开始
            </summary>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.Prepare(System.Action)">
            <summary>
            准备需要执行的“非主任务”
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.Clear">
            <summary>
            把所有的action清空。
            </summary>
        </member>
        <member name="M:Rafy.Threading.IParallelActions.RunAll">
            <summary>
            执行所有Action。
            执行完毕，函数返回。
            </summary>
        </member>
        <member name="P:Rafy.Threading.IParallelActions.MaxThreadCount">
            <summary>
            可同时运行的最大线程数。
            </summary>
        </member>
        <member name="T:Rafy.Threading.AsyncHelper">
            <summary>
            异步线程的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.CreateObservableActions">
            <summary>
            一个可监听 “任意开始，最终结束” 的任务管理器。
            </summary>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.CreateParallelActions">
            <summary>
            一个多任务同时进行的任务管理器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.InvokeSafe(System.Action,System.Action{System.Exception})">
            <summary>
            安全地对任务进行异步调用。
            
            原因：在异步线程中调用任务，如果任务执行过程中出现异常，往往会使整个应用程序死机。
            </summary>
            <param name="action"></param>
            <param name="errorHandler"></param>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.Invoke(System.Action)">
            <summary>
            对任务进行异步调用。
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.Threading.AsyncHelper.WrapByCurrentPrinciple(System.Action)">
            <summary>
            这里生成的wrapper会保证，在执行action前后，新开的线程和主线程都使用同一个Principel。
            
            解决问题：
            由于RafyEnvironment.User是基于线程的，
            所以如果在同一次请求中，如果在服务端打开一个新的线程做一定的事情，
            这个新开的线程可能会和打开者使用不同的Principle而造成代码异常。
            </summary>
            <param name="action">
            可能会使用RafyEnvironment.User，并需要在服务端另开线程来执行的操作。
            </param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Utils.TypeNameComparer">
            <summary>
            类型的比较器
            </summary>
        </member>
        <member name="M:Rafy.Utils.TypeNameComparer.System#Collections#Generic#IComparer{System#Type}#Compare(System.Type,System.Type)">
            <summary>
            TypeNameComparer 先尝试使用Name来比较，如果一样，再使用NameSpace进行比较。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.WCF.BinaryFormatterAdapter">
            <summary>
            在内部序列化器的基础上添加 Remoting 二进制序列化的功能。
            </summary>
        </member>
        <member name="M:Rafy.WCF.BinaryFormatterAdapter.#ctor(System.String,System.Reflection.ParameterInfo[],System.ServiceModel.Dispatcher.IClientMessageFormatter,System.String)">
            <summary>
            for client
            </summary>
            <param name="operationName"></param>
            <param name="parameterInfos"></param>
            <param name="innerClientFormatter"></param>
            <param name="action"></param>
        </member>
        <member name="M:Rafy.WCF.BinaryFormatterAdapter.#ctor(System.String,System.Reflection.ParameterInfo[],System.ServiceModel.Dispatcher.IDispatchMessageFormatter)">
            <summary>
            for server
            </summary>
            <param name="operationName"></param>
            <param name="parameterInfos"></param>
            <param name="innerDispatchFormatter"></param>
        </member>
        <member name="T:Rafy.WCF.BinaryFormatterOperationBehavior">
            <summary>
            在原始 Formatter 的基础上装饰 BinaryFormatterAdapter
            <remarks>
            BinaryFormatterOperationBehavior 为什么要实现为操作的行为：
            因为只有当操作的 DataContractSerializerBehavior 行为应用功能后，才能拿到 DataContractSerializerFormatter 并包装到 BinaryFormatterAdapter 中。
            
            由于一个操作的操作契约在系统中只有一份。而我们期望序列化的行为只影响指定的终结点，所以这个行为在应用时，会检查是否传入的运行时，即是添加时的运行时。
            </remarks>
            </summary>
        </member>
        <member name="P:Rafy.WCF.BinaryFormatterOperationBehavior.ParentRuntime">
            <summary>
            本行为只为这个运行时起作用。
            </summary>
        </member>
        <member name="T:Rafy.WCF.EnableBinaryFormatterBehaviorElement">
            <summary>
            启用旧的 BinaryFormatter 来对数据进行序列化。
            </summary>
        </member>
        <member name="T:Rafy.WCF.NetDataContractOperationBehavior">
            <summary>
            Override the DataContract serialization behavior to
            use the <see cref="T:System.Runtime.Serialization.NetDataContractSerializer"/>.
            </summary>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.#ctor(System.ServiceModel.Description.OperationDescription,System.ServiceModel.DataContractFormatAttribute)">
            <summary>
            Create new instance of object.
            </summary>
            <param name="operation">Operation description.</param>
            <param name="dataContractFormatAttribute">Data contract attribute object.</param>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.String,System.String,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="M:Rafy.WCF.NetDataContractOperationBehavior.CreateSerializer(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IList{System.Type})">
            <summary>
            Overrided CreateSerializer to return an XmlObjectSerializer which is capable of 
            preserving the object references.
            </summary>
        </member>
        <member name="T:Rafy.WCF.UseNetDataContractAttribute">
            <summary>
            Specify that WCF should serialize objects in a .NET
            specific manner to as to preserve complex object
            references and to be able to deserialize the graph
            into the same type as the original objets.
            </summary>
        </member>
        <member name="M:Rafy.WCF.UseNetDataContractAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            Apply the client behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="proxy">Client operation object.</param>
        </member>
        <member name="M:Rafy.WCF.UseNetDataContractAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            Apply the dispatch behavior by requiring
            the use of the NetDataContractSerializer.
            </summary>
            <param name="description">Operation description.</param>
            <param name="dispatch">Dispatch operation object.</param>
        </member>
        <member name="T:Rafy.ComponentModel.WebOrThreadStaticAppContextProvider">
            <summary>
            一个模拟 Web 环境的服务器端上下文提供器。
            每次请求使用一个单独的数据上下文
            </summary>
        </member>
        <member name="T:Rafy.Web.ClientEntities">
            <summary>
            所有实体类在 Web 客户端的查询类、容器
            </summary>
        </member>
        <member name="M:Rafy.Web.ClientEntities.Find(System.String)">
            <summary>
            通过客户端命令来查找对应实体的元数据。
            </summary>
            <param name="clientName">Name of the client.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Web.ClientEntities.GetClientName(System.Type)">
            <summary>
            获取某个实体类型在客户端的名称。
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Web.JsonServiceAttribute">
            <summary>
            此标记用于标记于 Service 之上。
            </summary>
        </member>
        <member name="M:Rafy.Web.JsonServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Web.JsonServiceAttribute"/> class.
            </summary>
        </member>
        <member name="M:Rafy.Web.JsonServiceAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rafy.Web.JsonServiceAttribute"/> class.
            </summary>
            <param name="clientName">Name of the client.</param>
        </member>
        <member name="P:Rafy.Web.JsonServiceAttribute.ClientName">
            <summary>
            获取或设置在客户端对应调用的服务的名称标记。
            如果没有不标记，则默认以类的全名称为服务名。
            </summary>
        </member>
    </members>
</doc>
