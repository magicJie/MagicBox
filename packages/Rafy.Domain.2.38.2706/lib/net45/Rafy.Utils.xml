<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy.Utils</name>
    </assembly>
    <members>
        <member name="T:Rafy.BooleanBoxes">
            <summary>
            bool 值的装箱值
            </summary>
        </member>
        <member name="F:Rafy.BooleanBoxes.True">
            <summary>
            The true
            </summary>
        </member>
        <member name="F:Rafy.BooleanBoxes.False">
            <summary>
            The false
            </summary>
        </member>
        <member name="M:Rafy.BooleanBoxes.Box(System.Boolean)">
            <summary>
            Boxes the specified bool value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.INotifyChangedCollection">
            <summary>
            这个类解决了基类在 Clear 时，不提供所有 OldItems 的问题。
            </summary>
        </member>
        <member name="M:Rafy.INotifyChangedCollection.PopClearedItems">
            <summary>
            获取被清空的项，并清空这个缓存。
            </summary>
        </member>
        <member name="T:Rafy.NotifyChangedCollection`1">
            <summary>
            这个类解决了基类在 Clear 时，不提供所有 OldItems 的问题。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rafy.NotifyChangedCollection`1.PopClearedItems">
            <summary>
            获取被清空的项，并清空这个缓存。
            </summary>
        </member>
        <member name="T:Rafy.SealableCollection`1">
            <summary>
            一个可被锁定的集合。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Rafy.SealableCollection`1.Seal">
            <summary>
            锁定本集合。
            </summary>
        </member>
        <member name="M:Rafy.SealableCollection`1.Unseal">
            <summary>
            子类可调用此方法来取消本集合的锁定状态。
            </summary>
        </member>
        <member name="P:Rafy.SealableCollection`1.IsSealed">
            <summary>
            是否已经被锁定。
            </summary>
        </member>
        <member name="M:Rafy.ConfigurationExtension.SetAppSettingOrDefault``1(System.Configuration.Configuration,System.String,``0)">
            <summary>
            设置某个 AppSetting 的值到 configuration 中。
            </summary>
            <param name="configuration"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:Rafy.ConfigurationExtension.SetAppSettingOrDefault(System.Configuration.Configuration,System.String,System.String)">
            <summary>
            设置某个 AppSetting 的值到 configuration 中。
            </summary>
            <param name="configuration"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.ConfigurationHelper.GetAppSettingOrDefault``1(System.String,``0)">
            <summary>
            获取配置文件中的AppSettings的指定键的值，并转换为指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.ConfigurationHelper.GetAppSettingOrDefault(System.String,System.String)">
            <summary>
            获取配置文件中的AppSettings的指定键的值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.AppContextScope`1">
            <summary>
            ServerContextScope 的泛型版本。
            
            它封装了 ContextKey 的构造，提升易用性。如果要定制 ContextKey，请继承非泛型版本。
            </summary>
            <typeparam name="TSub"></typeparam>
        </member>
        <member name="T:Rafy.ContextScope">
            <summary>
            基于 IDictionary 服务上下文的一个范围类型。
            继承此类的子类都拥有多层嵌套声明范围的功能，只有最外层的范围对象的 ExitWholeScope 方法会被调用。
            
            注意：必须使用 using 来构造此类型的子类，否则会出现未知的问题。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._context">
            <summary>
            存储项的位置
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._scopeEntered">
            <summary>
            是否已经进入本对象声明的代码范围。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._disposed">
            <summary>
            本对象是否已经被析构。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._contextKey">
            <summary>
            在 <see cref="F:Rafy.ContextScope._context"/> 中的名称。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._wholeScope">
            <summary>
            最外层的范围对象缓存。
            </summary>
        </member>
        <member name="F:Rafy.ContextScope._scopeCount">
            <summary>
            目前进入到了第几个代码范围。
            这个字段只在最外层范围上有用。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            构造函数
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.ContextScope.EnterScope(System.String)">
            <summary>
            声明进入这个范围对象声明的范围代码。
            </summary>
            <param name="contextKey"></param>
        </member>
        <member name="M:Rafy.ContextScope.EnterWholeScope">
            <summary>
            进入最外层范围时，会调用此方法。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.ExitWholeScope">
            <summary>
            如果本对象是最外层的范围对象，则这个对象的这个方法会在范围退出时执行。
            </summary>
        </member>
        <member name="M:Rafy.ContextScope.Dispose(System.Boolean)">
            <summary>
            本对象的范围结束。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rafy.ContextScope.GetWholeScope(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            子类可以通过这个方法来获取当前最外层的范围对象。
            </summary>
            <param name="contextKey">The context key.</param>
            <param name="store">The store.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.ContextScope.WholeScope">
            <summary>
            获取最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.AppContextScope`1.#ctor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="M:Rafy.AppContextScope`1.GetWholeScope">
            <summary>
            获取当前最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.AppContextScope`1.WholeScope">
            <summary>
            获取最外层的范围对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.FormattedSql">
            <summary>
            格式化 Sql 构造器
            
            如果想直接面向 Sql 字符串进行操作，可以使用 Append 打头的方法，或者使用 InnerWriter 属性获取内部的 TextWriter 后再进行操作。
            </summary>
        </member>
        <member name="F:Rafy.Data.FormattedSql._sql">
            <summary>
            最终生成的 Sql 字符串的 TextWriter
            </summary>
        </member>
        <member name="F:Rafy.Data.FormattedSql._writer">
            <summary>
            内部使用的 TextWriter，可能被外部使用属性 InnerWriter 进行替换。
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendParameter(System.Object)">
            <summary>
            写入一个参数值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendAnd">
            <summary>
            直接添加 " AND "。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendOr">
            <summary>
            直接添加 " OR "。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.String)">
            <summary>
            直接添加指定的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Char)">
            <summary>
            直接添加指定的 char 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Int32)">
            <summary>
            直接添加指定的 int 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Double)">
            <summary>
            直接添加指定的 double 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Object)">
            <summary>
            直接添加指定的 object 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.Append(System.Boolean)">
            <summary>
            直接添加指定的 bool 值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendLine(System.String)">
            <summary>
            直接添加指定的字符串值，并添加回车。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSql.AppendLine">
            <summary>
            添加回车
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.FormattedSql.Parameters">
            <summary>
            当前可用的参数
            </summary>
        </member>
        <member name="P:Rafy.Data.FormattedSql.InnerWriter">
            <summary>
            获取内部的 TextWriter，用于直接面向字符串进行文本输出。
            同时，也可以使用新的 TextWriter 来装饰当前的 TextWriter。
            </summary>
        </member>
        <member name="T:Rafy.Data.FormattedSqlParameters">
            <summary>
            FormattedSql 中的参数列表封装
            </summary>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.Add(System.Object)">
            <summary>
            添加一个参数，并返回该参数应该使用的索引号
            
            当在 Sql 中直接写入 {0} 时，可以使用本方法直接添加一个参数到参数列表中。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.WriteParameter(System.Text.StringBuilder,System.Object)">
            <summary>
            添加一个参数，并在 SQL 中添加相应的索引号
            </summary>
            <param name="sql"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.WriteParameter(System.IO.TextWriter,System.Object)">
            <summary>
            添加一个参数，并在 SQL 中添加相应的索引号
            </summary>
            <param name="sql"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.ToArray">
            <summary>
            按照添加时的索引，返回所有的参数值数组。
            此数组可以直接使用在 DBAccesser 方法中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.FormattedSqlParameters.op_Implicit(Rafy.Data.FormattedSqlParameters)~System.Object[]">
            <summary>
            隐式操作符，使得本类的对象可以直接当作 object[] 使用。方便 DBA 类型的操作。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.FormattedSqlParameters.Item(System.Int32)">
            <summary>
            获取指定位置的参数值
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.FormattedSqlParameters.Count">
            <summary>
            当前参数的个数
            </summary>
        </member>
        <member name="T:Rafy.IHasName">
            <summary>
            一个拥有名称的对象。
            </summary>
        </member>
        <member name="P:Rafy.IHasName.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:Rafy.Data.LiteDataColumn">
            <summary>
            列定义
            <remarks>
            定义列的属性和名称
            </remarks>
            </summary>
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.ColumnName">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.TypeName">
            <summary>
            类型名(字符型)
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataColumn.Type">
            <summary>
            列的类型。
            <remarks>只能是基础数据类型。（mscorlib 程序集中定义的类型）</remarks>
            </summary>
        </member>
        <member name="T:Rafy.Data.LiteDataColumnCollection">
            <summary>
            列定义集合
            </summary>
            <remarks>
            因为考虑到执行的sql语句中返回的schema和函数中对应的名称会有不同，
            所以需要手工定义Column，如果实际情况中绝大多数情况都是相同的话，
            可以考虑直接从IDataReader中生成列定义
            </remarks>
            Title: ColumnCollection
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
        </member>
        <member name="M:Rafy.Data.LiteDataColumnCollection.IndexOf(System.String)">
            <summary>
            return the index of a column according it's name.
            </summary>
            <param name="columnName">Column Name. Ignore case.</param>
            <returns>-1 if not found.</returns>
        </member>
        <member name="M:Rafy.Data.LiteDataColumnCollection.Find(System.String)">
            <summary>
            查找指定名称的列。
            
            如果没有找到，则返回 null。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataColumnCollection.Item(System.String)">
            <summary>
            查找指定名称的列。
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LiteDataRow">
            <summary>
            数据容器行
            <remarks>
            用于存储行数据。
            空值使用 <c>null</c> 表示，而不是 <see cref="F:System.DBNull.Value"/>。
            </remarks>
            </summary>
            Title: DataContainerRow
            Author: Steven
            Version: 1.0
            History:
                2006-03-17 Steven [创建] 
                2013-06-07 Huqf [使用 Convert 类来进行类型转换，防止 Oracle 中一些数据类型的转换失败。] 
        </member>
        <member name="M:Rafy.Data.LiteDataRow.GetValuesByIndex(System.Int32[])">
            <summary>
            传入一个Index数组，返回对应的值，当传入的Index为<value>-1</value>时，其对应的值为<value>Null</value>.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(System.Int32)">
            <summary>
            获取或设置指定列号的数据。
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(System.String)">
            <summary>
            获取或设置指定列的数据。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Item(Rafy.IHasName)">
            <summary>
            获取或设置指定列的数据。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Table">
            <summary>
            所属表格对象。
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.Values">
            <summary>
            原始数据
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataRow.FieldCount">
            <summary>
            当前行的列的个数。
            </summary>
        </member>
        <member name="T:Rafy.Data.LiteDataTable">
            <summary>
            一个轻量级的数据表格容器。
            
            LiteDataTable 中的空值不是 DBNull
            <remarks>
            用于跨进程传递数据。
            </remarks>
            </summary>
            Title: DataContainer
            Author: Steven
            Version: 1.0
            History:
                2006-03-17 Steven [创建] 
        </member>
        <member name="M:Rafy.Data.LiteDataTable.NewRow">
            <summary>
            创建一个拥有同样列数的行对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LiteDataTable.GetRowData(System.Int32[])">
            <summary>
            此方法暂时不公开。以后再说。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LiteDataTable.ToDataTable">
            <summary>
            构造一个 DataTable 并把数据拷贝到其中。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Columns">
            <summary>
            列定义集合
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Rows">
            <summary>
            行集合
            </summary>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32)">
            <summary>
            根据行号获取对应的行。
            </summary>
            <param name="rowIndex">行索引号</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32,System.Int32)">
            <summary>
            根据行列号获取数据。
            </summary>
            <param name="rowIndex">行索引号</param>
            <param name="columnIndex">列索引号</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LiteDataTable.Item(System.Int32,System.String)">
            <summary>
            根据行、列获取数据。
            </summary>
            <param name="rowIndex">行索引号</param>
            <param name="columnName">列名。忽略大小写。</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LiteDataTableAdapter">
            <summary>
            数据容器帮助类
            </summary>
            Title: DataContainerUtil
            Author: Steven
            Version: 1.0
            History:
                2006-04-15 Steven [创建] 
                2007-06-07 jianghaoqun [添加功能 FillDataContainer()]
                2007-06-13 Steven 添加FillDatawindowChild重载
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.Fill(Rafy.Data.LiteDataTable,System.Data.IDataReader)">
            <summary>
            根据SQL Command返回的IDataReader填充数据容器
            <para>
            对于DBNull的值，填充null
            </para>
            </summary>
            <param name="dataTable">数据容器</param>
            <param name="reader">SQL语句返回的</param>
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.AddColumns(Rafy.Data.LiteDataTable,System.Data.IDataReader)">
            <summary>
            使用 IDataReader 中的结构为指定的表格添加列。
            </summary>
            <param name="dataTable"></param>
            <param name="reader"></param>
        </member>
        <member name="M:Rafy.Data.LiteDataTableAdapter.Fill(Rafy.Data.LiteDataTable,System.Data.DataTable)">
            <summary>
            把DataTable填充到数据容器中，方便填充数据到DataWindow
            </summary>
            <param name="dataTable">数据容器</param>
            <param name="dt">DataTable</param>
            <Author>jianghaoqun 2007-06-07</Author>
        </member>
        <member name="T:Rafy.Data.DbConnectionSchema">
            <summary>
            数据库连接结构/方案
            </summary>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.#ctor">
            <summary>
            子类使用
            </summary>
        </member>
        <member name="M:Rafy.Data.DbConnectionSchema.CreateConnection">
            <summary>
            使用当前的结构来创建一个连接。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.ConnectionString">
            <summary>
            连接字符串
            </summary>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.ProviderName">
            <summary>
            连接的提供器名称
            </summary>
        </member>
        <member name="P:Rafy.Data.DbConnectionSchema.Database">
            <summary>
            对应的数据库名称
            </summary>
        </member>
        <member name="T:Rafy.Data.DbSetting">
            <summary>
            数据库配置
            </summary>
        </member>
        <member name="M:Rafy.Data.DbSetting.FindOrCreate(System.String)">
            <summary>
            查找或者根据约定创建连接字符串
            </summary>
            <param name="dbSettingName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbSetting.SetSetting(System.String,System.String,System.String)">
            <summary>
            添加一个数据库连接配置。
            </summary>
            <param name="name"></param>
            <param name="connectionString"></param>
            <param name="providerName"></param>
        </member>
        <member name="M:Rafy.Data.DbSetting.GetGeneratedSettings">
            <summary>
            获取当前已经被生成的 DbSetting。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.DbSetting.Name">
            <summary>
            配置名称
            </summary>
        </member>
        <member name="T:Rafy.Data.DbAccesser">
            <summary>
            Encapsulate the common operations to communicate with database.
            <remarks>
            It supports the query use DBParameter.(But it doesn't catch any exception, so the client program should deal with it by itself)
            
            There are two categories of query method:
            1.The public methods:
                These methods use a special sql sentences which looks like the parameter of String.Format,
                and input the needed parameters follow.
            2.The public methods on IRawDbAccesser property:
                These methods use the normal sql sentences, the input parameters array should be created outside.
                You can use <see cref="P:Rafy.Data.IRawDbAccesser.ParameterFactory"/> to create parameters.
            </remarks>
            </summary>
            <author>whiteLight</author>
            <createDate>2008-7-6, 20:19:08</createDate>
            <modify>2008-7-22，add ConvertParamaters method，and change the interface，use a common formatted sql to search database</modify>
            <modify>2008-8-7, If any one of the parameters is null, it is converted to DBNull.Value.</modify>
        </member>
        <member name="T:Rafy.Data.IDbAccesser">
            <summary>
            A db accesser which can use formatted sql to communicate with data base.
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.ExecuteText(System.String,System.Object[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryValue(System.String,System.Object[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or value object.</returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataReader(System.String,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataReader(System.String,System.Boolean,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryLiteDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbAccesser.QueryLiteDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.ConnectionSchema">
            <summary>
            数据连接结构
            </summary>
        </member>
        <member name="P:Rafy.Data.IDbAccesser.RawAccesser">
            <summary>
            Gets a raw accesser which is oriented to raw sql and <c>IDbDataParameter</c>。
            </summary>
        </member>
        <member name="T:Rafy.Data.IRawDbAccesser">
            <summary>
            A db accesser which can use raw sql to communicate with data base.
            </summary>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteProcedure(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteProcedure(System.String,System.Int32@,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="rowsAffect">The number of rows effected</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.ExecuteText(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.CommandType,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryLiteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryValue(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.IRawDbAccesser.QueryValue(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.ConnectionSchema">
            <summary>
            数据连接结构
            </summary>
        </member>
        <member name="P:Rafy.Data.IRawDbAccesser.ParameterFactory">
            <summary>
            A factory to create parameters.
            </summary>
        </member>
        <member name="T:Rafy.Data.IDbParameterFactory">
            <summary>
            A factory to create IDbDataParameter by some specific conditions
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter">
            <summary>
            Create a DBParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbParameterFactory.CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Data.DbAccesser._openConnectionBySelf">
            <summary>
            Was the connection opened by my self.
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._connectionCreatedBySelf">
            <summary>
            Is this connection created by my self;
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._connection">
            <summary>
            inner db connection
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._factory">
            <summary>
            abstract db provider factory
            </summary>
        </member>
        <member name="F:Rafy.Data.DbAccesser._converter">
            <summary>
            used to format sql and its corresponding parameters.
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(System.String)">
            <summary>
            Constructor
            
            this accessor uses <see cref="T:Rafy.Data.DbSetting"/> class to find its connection string, and creates connection by itself.
            </summary>
            <param name="connectionStringSettingName">the setting name in configuration file.</param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(System.String,System.String)">
            <summary>
            Constructor
            
            this accessor creates the db connection by itself.
            </summary>
            <param name="connectionString">Connection string</param>
            <param name="connectionProvider">
            The provider.
            eg.
            "System.Data.SqlClient"
            </param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(Rafy.Data.DbConnectionSchema)">
            <summary>
            Constructor
            
            this accessor uses schema to find its connection string, and creates connection by itself.
            </summary>
            <param name="schema">the connection schema.</param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.#ctor(Rafy.Data.DbConnectionSchema,System.Data.IDbConnection)">
            <summary>
            Constructor
            </summary>
            <param name="schema">the connection schema.</param>
            <param name="dbConnection">use a exsiting connection, rather than to create a new one.</param>
        </member>
        <member name="M:Rafy.Data.DbAccesser.MakeConnectionOpen">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.MakeConnectionClose">
            <summary>
            This method only close the connection which is opened by this object itself.
            </summary>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryLiteDataTable(System.String,System.Object[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryLiteDataRow(System.String,System.Object[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="formattedSql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataReader(System.String,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryDataReader(System.String,System.Boolean,System.Object[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.QueryValue(System.String,System.Object[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or value object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.ExecuteText(System.String,System.Object[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="formattedSql">a formatted sql which format looks like the parameter of String.Format</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.ConvertFormatParamaters(System.Object[])">
            <summary>
            此方法提供特定数据库的参数列表。
            </summary>
            <param name="parametersValues">formattedSql参数列表</param>
            <returns>数据库参数列表</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.PrepareCommand(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Prepare a command for communicate with database.
            </summary>
            <param name="sql"></param>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter">
            <summary>
            Create a DBParameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IDbParameterFactory#CreateParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Create a DBParameter
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="size"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryLiteDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataTable(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataTable(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a DataTable object from database by the specific sql.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataRow(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataRow(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out a row from database.
            If there is not any records, return null.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.CommandType,System.Boolean,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="closeConnection">Indicates whether to close the corresponding connection when the reader is closed?</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryDataReader(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Query out some data from database.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryValue(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#QueryValue(System.String,System.Data.CommandType,System.Data.IDbDataParameter[])">
            <summary>
            Execute the sql, and return the element of first row and first column, ignore the other values.
            </summary>
            <param name="sql">specific sql</param>
            <param name="type">
            Indicates or specifies how the System.Data.IDbCommand.CommandText property
            is interpreted.
            </param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>DBNull or object.</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteProcedure(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteProcedure(System.String,System.Int32@,System.Data.IDbDataParameter[])">
            <summary>
            Execute a procudure, and return the value returned by this procedure
            </summary>
            <param name="procedureName">The name of this procedure</param>
            <param name="rowsAffect">The number of rows effected</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The value returned by procedure</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ExecuteText(System.String,System.Data.IDbDataParameter[])">
            <summary>
            Execute a sql which is not a database procudure, return rows effected.
            </summary>
            <param name="sql">specific sql</param>
            <param name="parameters">If this sql has some parameters, these are its parameters.</param>
            <returns>The number of rows effected</returns>
        </member>
        <member name="M:Rafy.Data.DbAccesser.Dispose">
            <summary>
            dispose this accesser.
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.ConnectionSchema">
            <summary>
            Gets the connection schema of current database.
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Connection">
            <summary>
            The underlying db connection
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.RawAccesser">
            <summary>
            Gets a raw accesser which is oriented to raw sql and <c>IDbDataParameter</c>。
            </summary>
        </member>
        <member name="P:Rafy.Data.DbAccesser.Rafy#Data#IRawDbAccesser#ParameterFactory">
            <summary>
            A factory to create parameters.
            </summary>
        </member>
        <member name="M:Rafy.Data.IDbBackuper.BackupDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Backup a special database
            </summary>
            <param name="databaseName"></param>
            <param name="filename">database file path to save.</param>
            <param name="isErase">if exists, whether to delete current file.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.IDbBackuper.RestoreDatabase(System.String,System.String)">
            <summary>
            restore a special database from a file
            </summary>
            <param name="databaseName"></param>
            <param name="filename">the file path which is a database backup</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.PagingHelper">
            <summary>
            分页算法帮助类
            </summary>
        </member>
        <member name="M:Rafy.Data.PagingHelper.MemoryPaging(System.Data.IDataReader,System.Action{System.Data.IDataReader},Rafy.PagingInfo)">
            <summary>
            使用 IDataReader 的内存分页读取方案。
            </summary>
            <param name="reader"></param>
            <param name="rowReader">每一行数据，会调用此方法进行调取。</param>
            <param name="pagingInfo">分页信息。如果这个参数不为空，则使用其中描述的分页规则进行内存分页查询。</param>
        </member>
        <member name="M:Rafy.Data.Providers.ConverterFactory.GetFactory(System.String)">
            <summary>
            以快速键值对照来获取 DbProviderFactory。
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="F:Rafy.Data.Providers.ConverterFactory.ReParameterName">
            <summary>
            在 FormatSQL 中的参数格式定义。
            </summary>
        </member>
        <member name="T:Rafy.Data.Providers.ISqlProvider">
            <summary>
            此接口用于把可用于String.Format格式的字符串转换为特定数据库格式的字符串
            </summary>
        </member>
        <member name="M:Rafy.Data.Providers.ISqlProvider.ConvertToSpecialDbSql(System.String)">
            <summary>
            把可用于String.Format格式的字符串转换为特定数据库格式的字符串
            </summary>
            <param name="commonSql">可用于String.Format格式的字符串</param>
            <returns>可用于特定数据库的sql语句</returns>
        </member>
        <member name="M:Rafy.Data.Providers.ISqlProvider.GetParameterName(System.Int32)">
            <summary>
            返回用于
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.BackupDatabase(System.String,System.String,System.Boolean)">
            <summary>
            Backup a special database
            </summary>
            <param name="databaseName"></param>
            <param name="filename">database file path to save.</param>
            <param name="isErase">if exists, whether to delete current file.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.RestoreDatabase(System.String,System.String)">
            <summary>
            restore a special database from a file
            </summary>
            <param name="databaseName"></param>
            <param name="filename">the file path which is a database backup</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.Providers.SqlServerBackuper.DealFile(System.String,System.Boolean)">
            <summary>
            处理文件
            </summary>
            <param name="filename">文件名</param>
            <param name="isErase">是否擦除</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Data.LocalTransactionBlock">
            <summary>
            表示一个使用单数据库连接的事务代码块（版本 2.0）
            Local 的意思是本地事务（即非分布式事务）
            </summary>
        </member>
        <member name="F:Rafy.Data.LocalTransactionBlock._rollback">
            <summary>
            是否已经提交完成。
            </summary>
        </member>
        <member name="F:Rafy.Data.LocalTransactionBlock._wholeRoolback">
            <summary>
            是否需要把整个事务回滚。
            </summary>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.#ctor(Rafy.Data.DbSetting,System.Data.IsolationLevel)">
            <summary>
            构造一个本地事务代码块
            </summary>
            <param name="dbSetting">数据库配置</param>
            <param name="level">
            此级别只在最外层的代码块中有效。
            </param>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.Complete">
            <summary>
            提交本事务。
            </summary>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.BeginTransaction">
            <summary>
            子类实现此方法进入指定库的事务。
            
            注意，该方法只会在最外层的 using 块中被调用一次。
            返回的事务，由基类负责它的 Commit、Rollback 和 Dispose，子类不需要管理。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Data.LocalTransactionBlock.DisposeTransaction(System.Data.IDbTransaction)">
            <summary>
            子类实现此方法释放指定的事务。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.Context">
            <summary>
            所使用的存储位置
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.DbSetting">
            <summary>
            对应的数据库配置
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.IsolationLevel">
            <summary>
            对应的事务孤立级别
            </summary>
        </member>
        <member name="P:Rafy.Data.LocalTransactionBlock.WholeTransaction">
            <summary>
            当前范围块正在使用的数据库事务。
            </summary>
        </member>
        <member name="T:Rafy.Extendable">
            <summary>
            一个可进行简单属性扩展的类型
            </summary>
        </member>
        <member name="T:Rafy.IExtendable">
            <summary>
            可附加参数的行为
            
            可以给元数据附加一些额外的参数
            </summary>
        </member>
        <member name="M:Rafy.IExtendable.GetPropertyOrDefault``1(System.String,``0)">
            <summary>
            获取指定名称的扩展属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IExtendable.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.IExtendable.GetExtendedProperties">
            <summary>
            获取已经设置的所有的扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.IExtendable.Item(System.String)">
            <summary>
            通过属性名称设置/获取某个值。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.GetPropertyOrDefault``1(System.String,``0)">
            <summary>
            获取指定名称的扩展属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.SetExtendedProperty(System.String,System.Object)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.SetExtendedProperty(System.String,System.Boolean)">
            <summary>
            设置某个扩展属性为指定的值。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.GetExtendedProperties">
            <summary>
            获取已经设置的所有的扩展属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.Extendable.OnExtendedPropertyChanging(System.String,System.Object)">
            <summary>
            扩展属性变化前事件。
            </summary>
            <param name="property"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rafy.Extendable.OnExtendedPropertyChanged(System.String)">
            <summary>
            扩展属性变化后事件。
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:Rafy.Extendable.ExtendedProperties">
            <summary>
            WCF 序列化使用。
            </summary>
        </member>
        <member name="P:Rafy.Extendable.ExtendedPropertiesCount">
            <summary>
            返回当前已经扩展的属性个数。
            </summary>
        </member>
        <member name="P:Rafy.Extendable.Item(System.String)">
            <summary>
            用于扩展的属性列表。
            
            注意，如果设置 null 值，则表示清空该属性。
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IEnumerableExtension.JumpToPage``1(System.Linq.IQueryable{``0},Rafy.PagingInfo)">
            <summary>
            进行指定的分页操作。
            
            如果分页信息指定了要统计所有的行数，则立刻执行 Count 方法获取所有行数。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">The models.</param>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">索引不能是负数。</exception>
        </member>
        <member name="M:Rafy.IEnumerableExtension.JumpToPage``1(System.Collections.Generic.IEnumerable{``0},Rafy.PagingInfo)">
            <summary>
            进行指定的分页操作。
            
            如果分页信息指定了要统计所有的行数，则立刻执行 Count 方法获取所有行数。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="models">The models.</param>
            <param name="pagingInfo">The paging information.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">索引不能是负数。</exception>
        </member>
        <member name="M:Rafy.IEnumerableExtension.AsReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            转换为一个只读的集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="orignalCollections"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.GetTypeMarked``1(System.Reflection.Assembly)">
            <summary>
            获取程序集中标记了某标记的所有类型。
            </summary>
            <typeparam name="TAttr"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.GetSingleAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            找到member的指定Attribute的唯一标记实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MemberInfoExtension.HasMarked``1(System.Reflection.MemberInfo)">
            <summary>
            是否标记了指定的Attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.SystemExtension.CastTo``1(System.Object)">
            <summary>
            强制转换当前对象为指定类型。
            
            传入的对象为空，或者转换失败，则会抛出异常。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IExtendableExtension.CopyExtendedProperties(Rafy.IExtendable,Rafy.IExtendable)">
            <summary>
            从特定的参数存储器中拷贝所有自定义参数
            </summary>
            <param name="a"></param>
            <param name="target"></param>
        </member>
        <member name="T:Rafy.FileLogger">
            <summary>
            一个默认使用文件进行记录的日志器。
            </summary>
        </member>
        <member name="T:Rafy.LoggerBase">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="M:Rafy.LoggerBase.LogError(System.String,System.Exception)">
            <summary>
            记录某个已经生成的异常到文件中。
            </summary>
            <param name="title"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.LoggerBase.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema)">
            <summary>
            记录 Sql 执行过程。
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="connectionSchema"></param>
        </member>
        <member name="F:Rafy.FileLogger.FileName">
            <summary>
            错误日志的文件名。
            </summary>
        </member>
        <member name="M:Rafy.FileLogger.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema)">
            <summary>
            记录 Sql 执行过程。
            
            把 SQL 语句及参数，写到 SQL_TRACE_FILE 配置所对应的文件中。
            </summary>
            <param name="sql"></param>
            <param name="parameters"></param>
            <param name="connectionSchema"></param>
        </member>
        <member name="T:Rafy.Logger">
            <summary>
            一个简单的日志记录类。
            
            目前只有处理异常的方法。
            </summary>
        </member>
        <member name="M:Rafy.Logger.SetImplementation(Rafy.LoggerBase)">
            <summary>
            使用具体的日志记录器来接管本 API。
            </summary>
            <param name="loggerImpl"></param>
        </member>
        <member name="M:Rafy.Logger.LogError(System.String,System.Exception)">
            <summary>
            记录某个已经生成的异常到文件中。
            </summary>
            <param name="title"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rafy.Logger.LogDbAccessed(System.String,System.Data.IDbDataParameter[],Rafy.Data.DbConnectionSchema)">
            <summary>
            记录 Sql 执行过程。
            </summary>
            <param name="sql">The SQL.</param>
            <param name="parameters">The parameters.</param>
            <param name="connectionSchema">The connection schema.</param>
        </member>
        <member name="P:Rafy.Logger.DbAccessedCount">
            <summary>
            返回系统运行到现在，一共记录了多少次 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.Logger.ThreadDbAccessedCount">
            <summary>
            返回当前线程运行到现在，一共记录了多少次 Sql 语句。
            </summary>
        </member>
        <member name="P:Rafy.Logger.EnableSqlObervation">
            <summary>
            是否启用 Sql 查询监听。 默认为 false。
            打开后，DbAccessed、ThreadDbAccessed 两个事件才会发生。
            </summary>
        </member>
        <member name="E:Rafy.Logger.DbAccessed">
            <summary>
            发生了数据访问时的事件。
            </summary>
        </member>
        <member name="E:Rafy.Logger.ThreadDbAccessed">
            <summary>
            当前线程，发生了数据访问时的事件。
            </summary>
        </member>
        <member name="T:Rafy.Logger.DbAccessedEventArgs">
            <summary>
            数据访问事件参数。
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.Sql">
            <summary>
            执行的 Sql
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.Parameters">
            <summary>
            所有的参数值。
            </summary>
        </member>
        <member name="P:Rafy.Logger.DbAccessedEventArgs.ConnectionSchema">
            <summary>
            对应的数据库连接
            </summary>
        </member>
        <member name="T:Rafy.PagingInfo">
            <summary>
            this indicates a pager info,
            includes page number, page size, and total count;
            
            Note!
            Don't use null to indicates a empty paging information, use <see cref="F:Rafy.PagingInfo.Empty"/> instead.
            </summary>
        </member>
        <member name="F:Rafy.PagingInfo._totalCount">
            <summary>
            If this value is positive or zero, it indicates the count.
            Otherwise, it means "need count all items".
            </summary>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            this constructor indicate that no need to retrieve count information from database
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            this constructor indicate whether to retrieve count information from database
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="isNeedCount">is need retrieve count of all records(if it is true,it will retrieve count info from database)</param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            construct with a totalCount
            </summary>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <param name="totalCount"></param>
        </member>
        <member name="M:Rafy.PagingInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上以下这句：
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="F:Rafy.PagingInfo.Empty">
            <summary>
            A singleton instance indicates there is no paging action.
            </summary>
        </member>
        <member name="M:Rafy.PagingInfo.IsEmpty">
            <summary>
            Indicates is this pagingInfo a nonsence.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.PagingInfo.IsNullOrEmpty(Rafy.PagingInfo)">
            <summary>
            Indicates is this pagingInfo a nonsence.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.PagingInfo.IsNeedCount">
            <summary>
            Whether need to retrieve count of all records
            (if it's true, it means the DAL should retrieve count info from database.)
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.TotalCount">
            <summary>
            Count of all records
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageSize">
            <summary>
            size of a page
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageNumber">
            <summary>
            current page number.
            start from 1.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.PageCount">
            <summary>
            Gets the total page count, if <see cref="P:Rafy.PagingInfo.TotalCount"/> has positive value.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.HasPreviousPage">
            <summary>
            Indicates whether current page is not the first one.
            </summary>
        </member>
        <member name="P:Rafy.PagingInfo.HasNextPage">
            <summary>
            Indicates whether current page is not the last one.
            </summary>
        </member>
        <member name="T:Rafy.EmptyPagingInfo">
            <summary>
            不进行分页查询的分页信息。
            
            一般情况下，效果等同于传入 null 值的 PagingInfo。
            在使用多参数查询时，则只能使用这个对象，而不能使用 null 查询。
            </summary>
        </member>
        <member name="M:Rafy.EmptyPagingInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化构造函数。
            
            需要更高安全性，加上以下这句：
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Rafy.EmptyPagingInfo.SSH">
            <summary>
            Singleton Serialization Helper
            </summary>
        </member>
        <member name="M:Rafy.StringExtension.Cut(System.String,System.Int32,System.String)">
            <summary>
            if this string's length is more than size,
            cut the excessive part and append another string.
            </summary>
            <param name="str"></param>
            <param name="size">whether longer than this size</param>
            <param name="appendMe">if longer, append this string</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.Cut(System.String,System.Int32)">
            <summary>
            if this string's length is more than size,
            cut the excessive part and append another string.
            </summary>
            <param name="str"></param>
            <param name="size">whether longer than this size</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.CutChinese(System.String,System.Int32,System.String)">
            <summary>
            Cut a string by a english word size.
            CutChinese("abcdefg",3,"...") => "abc..."
            CutChinese("a胡庆访",3,"...") => "a胡..."
            CutChinese("胡庆访",3,"...")  => "胡..."
            </summary>
            <param name="str"></param>
            <param name="maxSize">the max size of English chars.</param>
            <param name="appendMe">if longer, append this string. This value could be null.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.CutChinese(System.String,System.Int32)">
            <summary>
            Cut a string by a english word size.
            CutChinese("abcdefg",3) => "abc"
            CutChinese("a胡庆访",3) => "a胡"
            CutChinese("胡庆访",3)  => "胡"
            </summary>
            <param name="str"></param>
            <param name="maxSize">the max size of English chars.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较两个字符串是否相等。忽略大小写
            </summary>
            <param name="str"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.IsAllWhite(System.String)">
            <summary>
            judge this string is :
            null/String.Empty/all white spaces.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.StringExtension.TrimNull(System.String)">
            <summary>
            Removes all leading and trailing white-space characters from the current System.String object.
            if it is null, return the string.Empty.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <param name="array">The array.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString(System.Collections.Generic.IEnumerable{System.String},System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <param name="array"></param>
            <param name="buffer">share this variation</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <param name="buffer">share this variation</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">toString</exception>
        </member>
        <member name="M:Rafy.TextFormatter.AggregateString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.Text.StringBuilder)">
            <summary>
            Aggregate a array to a string which splitted by comma.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array">The array.</param>
            <param name="toString">The automatic string.</param>
            <param name="split">The split.</param>
            <param name="buffer">share this variation</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">toString</exception>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllChinese">
            <summary>
            All chars are chinese words.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReUrl">
            <summary>
            URL
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.RePhone">
            <summary>
            Telephone
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReMobilePhone">
            <summary>
            Mobile phone
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReNumber">
            <summary>
            All numbers, could be a negative number.(start with a '-')
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReUint">
            <summary>
            Positive integer
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReIPAddress">
            <summary>
            Indicates a IPV4 address
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllNumber">
            <summary>
            Is the string all number?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllLetter">
            <summary>
            It the string all letters?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReAllLetterOrNumber">
            <summary>
            Are the chars of the string all letters or numbers?
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReCSharpProgramable">
            <summary>
            is the string match the rule of C# programming.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReScripts">
            <summary>
            script tag and its inner code.
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReEmail">
            <summary>
            E-Mail address
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReNewLine">
            <summary>
            new line
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReTags">
            <summary>
            XML tags
            </summary>
        </member>
        <member name="F:Rafy.TextFormatter.ReHTML">
            <summary>
            <![CDATA[
            XML tags and "&...;"
            eg. &nbsp; &bt;
            ]]>
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.Method">
            <summary>
            对应的方法
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.DynamicMethod">
            <summary>
            动态生成的代理方法
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.HasFinalArrayParam">
            <summary>
            最后一个参数是否为一个标记了 param 标记的数组对象。
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.MethodParamsLength">
            <summary>
            方法参数的长度
            </summary>
        </member>
        <member name="F:Rafy.Reflection.DynamicMethodHandle.FinalArrayElementType">
            <summary>
            如果 HasFinalArrayParam 为 true，那么此属性表示最后一个数组中的元素的类型。
            </summary>
        </member>
        <member name="T:Rafy.Reflection.DynamicCtorDelegate">
            <summary>
            Delegate for a dynamic constructor method.
            </summary>
        </member>
        <member name="T:Rafy.Reflection.DynamicMethodDelegate">
            <summary>
            Delegate for a dynamic method.
            </summary>
            <param name="target">
            Object containg method to invoke.
            </param>
            <param name="args">
            Parameters passed to method.
            </param>
        </member>
        <member name="T:Rafy.Reflection.DynamicMemberGetDelegate">
            <summary>
            Delegate for getting a value.
            </summary>
            <param name="target">Target object.</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Reflection.DynamicMemberSetDelegate">
            <summary>
            Delegate for setting a value.
            </summary>
            <param name="target">Target object.</param>
            <param name="arg">Argument value.</param>
        </member>
        <member name="T:Rafy.Reflection.MethodCaller">
            <summary>
            本类提供了使用 Emit 方式来高速调用字段、属性、方法的一些方法。
            所有调用过的被生成的方法，都会被存储起来，以方便再次调用。
            </summary>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.ClearStore">
            <summary>
            Clears the store.
            </summary>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallPropertyGetter(System.Object,System.String)">
            <summary>
            Invokes a property getter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallPropertySetter(System.Object,System.String,System.Object)">
            <summary>
            Invokes a property setter using dynamic
            method invocation.
            </summary>
            <param name="obj">Target object.</param>
            <param name="property">Property to invoke.</param>
            <param name="value">New value for property.</param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethodIfImplemented(System.Object,System.String,System.Object[],System.Object@)">
            <summary>
            使用反射动态调用一个方法。
            如果指定对象已经实现了这个方法，则直接调用，否则直接返回。
            </summary>
            <param name="obj">The object.</param>
            <param name="method">The method.</param>
            <param name="parameters">
            方法的参数数组。
            注意，为了能尽量正确地找到方法，数组中的每一个元素应该尽量不是 null。如果有参数传入 null 时，可以传入参数的类型来代替。
            在有任意一个参数的类型未指定的情况下，会对方法进行模糊匹配，同时不再对找到的结果方法 Emit 生成方法并缓存。
            </param>
            <param name="result">如果成功调用，则返回方法的返回值。</param>
            <returns>
            返回是否在目标对象上成功调用了该方法。
            </returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not
            implemented on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="info">
            MethodInfo for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethod(System.Object,Rafy.Reflection.DynamicMethodHandle,System.Object[])">
            <summary>
            Uses reflection to dynamically invoke a method,
            throwing an exception if it is not implemented
            on the target object.
            </summary>
            <param name="obj">
            Object containing method.
            </param>
            <param name="methodHandle">
            MethodHandle for the method.
            </param>
            <param name="parameters">
            Parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.CallMethodCore(System.Object,System.String,System.Object[],System.Boolean,System.Object@)">
            <summary>
            使用反射动态调用一个方法。
            如果指定对象已经实现了这个方法，则直接调用，否则直接返回。
            </summary>
            <param name="obj">The object.</param>
            <param name="method">The method.</param>
            <param name="parameters">方法的参数数组。
            注意，为了能尽量正确地找到方法，数组中的每一个元素应该尽量不是 null。如果有参数传入 null 时，可以传入参数的类型来代替。
            在有任意一个参数的类型未指定的情况下，会对方法进行模糊匹配。</param>
            <param name="errorIfNotFound">如果没有找到对应的方法，是否需要抛出异常。</param>
            <param name="result">如果成功调用，则返回方法的返回值。</param>
            <returns>
            返回是否在目标对象上成功调用了该方法。
            </returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethodsOnNullParam(System.Type,System.String,System.Type[])">
            <summary>
            如果参数列表中存在 null 类型时，使用模糊的匹配方式。
            </summary>
            <param name="objType"></param>
            <param name="methodName"></param>
            <param name="paramters"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsParamTypeMatched(System.Type,System.Type)">
            <summary>
            判断指定的实参是否与方法中的某形参匹配。
            </summary>
            <param name="parameterType">实参类型。</param>
            <param name="targetType">形参的类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            Uses reflection to locate a matching method
            on the target object.
            </summary>
            <param name="objectType">Type of object containing method.</param>
            <param name="method">Name of the method.</param>
            <param name="parameters">Parameters to pass to method.</param>
            <returns></returns>
            <exception cref="T:System.InvalidProgramException"></exception>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Type[])">
            <summary>
            查找指定类型上对应参数类型的指定方法。
            从子类到基类逐个检查。同时，也检测私有的方法。
            </summary>
            <param name="objectType">包含这个方法的类型。</param>
            <param name="method">方法名。</param>
            <param name="types">方法的所有参数类型。</param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.FindMethod(System.Type,System.String,System.Int32)">
            <summary>
            Returns information about the specified
            method, finding the method based purely
            on the method name and number of parameters.
            </summary>
            <param name="objectType">
            Type of object containing method.
            </param>
            <param name="method">
            Name of the method.
            </param>
            <param name="parameterCount">
            Number of parameters to pass to method.
            </param>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsLastArray(System.Reflection.ParameterInfo[])">
            <summary>
            判断某个方法的形参列表中是否拥有一个可接受多个实际参数的数组类型参数：
            方法只有一个数组类型的参数，或者方法的形参列表中的最后一个参数被标记为数组型。
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.MethodCaller.IsParamArray(System.Reflection.ParameterInfo[])">
            <summary>
            判断某个方法的形参列表中的最后一个参数被标记为数组型(params)。
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Reflection.MethodCaller.StoreCount">
            <summary>
            Gets the store count.
            </summary>
            <value>
            The store count.
            </value>
        </member>
        <member name="T:Rafy.Reflection.MethodCaller.NullParameter">
            <summary>
            表示一个空参数。
            </summary>
        </member>
        <member name="T:Rafy.Reflection.ObjectHelper">
            <summary>
            object 类型的帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            获取指定属性的值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取指定属性的值
            
            使用方法：
            var value = obj.GetStepPropertyValue("Property1.Property2.Property3");
            </summary>
            <param name="obj"></param>
            <param name="propertyName">
            级联属性过滤串,格式如:属性.子属性.子子属性...
            </param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ObjectHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            设置指定属性的值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="T:Rafy.Result">
            <summary>
            indicates the result of a normal invoking the "service"
            </summary>
        </member>
        <member name="F:Rafy.Result.SuccessMessage">
            <summary>
            A string message used by the success result.
            </summary>
        </member>
        <member name="F:Rafy.Result.FailedMessage">
            <summary>
            A string message used by the failed result.
            </summary>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean)">
            <summary>
            Message=string.Empty
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.String)">
            <summary>
            Success = false
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Int32)">
            <summary>
            create a error message with its status.
            </summary>
            <param name="statusCode"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Object)">
            <summary>
            create a successful result with corresponding data.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.String)">
            <summary>
            create a result with its message.
            </summary>
            <param name="success"></param>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.Int32)">
            <summary>
            create a result by specifing its success status and a message.
            </summary>
            <param name="success"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Int32,System.String)">
            <summary>
            create a failed result by its statusCode and a error message.
            </summary>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.#ctor(System.Boolean,System.Int32,System.String)">
            <summary>
            create a result by specifing all its status.
            </summary>
            <param name="success"></param>
            <param name="statusCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:Rafy.Result.Reset">
            <summary>
            Reset this result to a unsuccessful status.
            </summary>
        </member>
        <member name="M:Rafy.Result.StatusEquals(Rafy.Result)">
            <summary>
            Indicates whether this instance's StatusCode and a specified object's StatusCode are equal.
            </summary>
            <param name="another"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.Result.Success">
            <summary>
            Indicates this invoking is success or failed.
            When the StatusCode equals 1, Success equals true.
            </summary>
        </member>
        <member name="P:Rafy.Result.StatusCode">
            <summary>
            status code indecates the result type of this invoking.
            other:  other customized types.
            </summary>
        </member>
        <member name="P:Rafy.Result.Message">
            <summary>
            Represents the message from this invoking.
            if successed, this property represent some useful string.(eg. a html document.).
            if failed, this property represent a message that can be used to show to the end users.
            
            (this property doesn't return null.)
            </summary>
        </member>
        <member name="P:Rafy.Result.Data">
            <summary>
            the data result.
            </summary>
        </member>
        <member name="M:Rafy.Reflection.ExpressionHelper.GetRuntimeProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取某个属性表达式对应的属性元数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.ExpressionHelper.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            获取某个属性表达式对应的属性名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expProperty"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
            <summary>
            Gets the method represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="method"/> is not a lambda expression or it does not represent a method invocation.</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a property</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <typeparam name="P">Type assigned to the property</typeparam>
            <param name="property">Property Expression</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a property</exception>
        </member>
        <member name="M:Rafy.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the field represented by the lambda expression.
            </summary>
            <param name="field">The field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Member is not a field</exception>
        </member>
        <member name="T:Rafy.Reflection.TypeHelper">
            <summary>
            类型的一些帮助方法。
            </summary>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.GetHierarchy(System.Type,System.Type[])">
            <summary>
            获取继承层次列表，从子类到基类
            </summary>
            <param name="from">From.</param>
            <param name="exceptTypes">The except types.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsNumber(System.Type)">
            <summary>
            判断指定的类型是不是数字类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.GetDefaultValue(System.Type)">
            <summary>
            获取指定类型的默认值。
            </summary>
            <param name="targetType">Type of the target.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IgnoreNullable(System.Type)">
            <summary>
            如果是 Nullable 泛型类型，则返回内部的真实类型。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsNullable(System.Type)">
            <summary>
            判断某个类型是否为 Nullable 泛型类型。
            </summary>
            <param name="targetType">需要判断的目标类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsGenericType(System.Type,System.Type)">
            <summary>
            判断指定的类型是否是一个指定的泛型类型。
            </summary>
            <param name="targetType">需要判断的目标类型。</param>
            <param name="genericType">泛型类型。</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.IsEnumNullable(System.Type)">
            <summary>
            判断指定的类型是否是一个枚举类型，或者是一个可空的枚举类型。
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue(System.Type,System.Object)">
            <summary>
            强制把 value 的值变换为 desiredType
            </summary>
            <param name="desiredType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue(System.Type,System.Type,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <param name="desiredType">
            Type to which the value should be coerced.
            </param>
            <param name="valueType">
            Original type of the value.
            </param>
            
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue``1(System.Type,System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="T">
            Type to which the value should be coerced.
            </typeparam>
            <param name="valueType">
            Original type of the value.
            </param>
            
            <param name="value">
            The value to coerce.
            </param>
            <remarks>
            <para>
            If the desired type is a primitive type or Decimal, 
            empty string and null values will result in a 0 
            or equivalent.
            </para>
            <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
            </para>
            <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
            </para>
            </remarks>
        </member>
        <member name="M:Rafy.Reflection.TypeHelper.CoerceValue``1(System.Object)">
            <summary>
            Attempts to coerce a value of one type into
            a value of a different type.
            </summary>
            <typeparam name="T">Type to which the value should be coerced.</typeparam>
            <param name="value">The value to coerce.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <remarks>
              <para>
            If the desired type is a primitive type or Decimal,
            empty string and null values will result in a 0
            or equivalent.
              </para>
              <para>
            If the desired type is a Nullable type, empty string
            and null values will result in a null result.
              </para>
              <para>
            If the desired type is an enum the value's ToString()
            result is parsed to convert into the enum value.
              </para>
            </remarks>
        </member>
        <member name="T:Rafy.BytesFormatter">
            <summary>
            一个简单的二进制序列化类
            </summary>
        </member>
        <member name="T:Rafy.IStateFormatter">
            <summary>
            Serializer
            </summary>
        </member>
        <member name="M:Rafy.IStateFormatter.Deserialize(System.String)">
            <summary>
            Deserialize a string which is storing the state of a object to the original object.
            </summary>
            <param name="serializedState"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.IStateFormatter.Serialize(System.Object)">
            <summary>
            Serialize a object to a string.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rafy.BytesFormatter.SerializeToBytes(System.Object)">
            <summary>
            Serialize the object to bytes
            </summary>
            <param name="x">the object to be serialized.(The type should marked a [Serializable] attribute)</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Serialize(System.Object)">
            <summary>
            Serialize the object to string
            </summary>
            <param name="x">the object to be serialized.(The type should marked a [Serializable] attribute)</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Deserialize(System.Byte[])">
            <summary>
            Deserialize the bytes to original object
            </summary>
            <param name="binaryData">the data which is storing the state of a object.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.BytesFormatter.Deserialize(System.String)">
            <summary>
            Deserialize the string to original object
            </summary>
            <param name="Data">the data which is storing the state of a object.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.BytesFormatter.NowEncoding">
            <summary>
            Current Encoding to serialize/deserialize the object.
            </summary>
        </member>
        <member name="T:Rafy.XmlFormatter">
            <summary>
            A simple class to deal with xml serialize
            This class is thread safe
            </summary>
        </member>
        <member name="M:Rafy.XmlFormatter.#ctor(System.Type)">
            <summary>
            Construct a XmlFormatter to format a specific type
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Rafy.XmlFormatter.Serialize(System.Object)">
            <summary>
            Serialize a object of the specific type to a xml document.
            </summary>
            <param name="x">The object to be serialized.</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.XmlFormatter.Deserialize(System.String)">
            <summary>
            Deserialize the xml to the original obecjt
            </summary>
            <param name="xml">xml document</param>
            <returns></returns>
        </member>
        <member name="T:Rafy.IAppContextProvider">
            <summary>
            AppContext 的算法提供器。
            </summary>
        </member>
        <member name="P:Rafy.IAppContextProvider.CurrentPrincipal">
            <summary>
            可获取或设置当前的身份。
            </summary>
        </member>
        <member name="P:Rafy.IAppContextProvider.DataContainer">
            <summary>
            获取或设置当前的上下文数据容器。
            </summary>
        </member>
        <member name="T:Rafy.ThreadStaticAppContextProvider">
            <summary>
            服务器端上下文提供器。
            默认实现：一个标记了 ThreadStatic 的字段。
            </summary>
        </member>
        <member name="P:Rafy.ThreadStaticAppContextProvider.Items">
            <summary>
            当前线程所使用的项的集合。
            </summary>
        </member>
        <member name="T:Rafy.StaticAppContextProvider">
            <summary>
            服务器端上下文提供器。
            默认实现：静态字段。
            </summary>
        </member>
        <member name="T:Rafy.AppContext">
            <summary>
            本类型表示执行的上下文环境。
            其中包含：自定义数据集合、当前身份。
            
            一般可用的上下文有：
            单线程共用数据的执行环境、进程共用数据的执行环境、一次请求（如 Web）共用数据的执行环境。
            默认使用单线程上下文，如果要使用其它上下文，请使用 <see cref="M:Rafy.AppContext.SetProvider(Rafy.IAppContextProvider)"/> 方法替换提供算法。
            </summary>
        </member>
        <member name="M:Rafy.AppContext.SetProvider(Rafy.IAppContextProvider)">
            <summary>
            设置上下文提供程序。
            默认使用 <see cref="T:Rafy.ThreadStaticAppContextProvider"/>。
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rafy.AppContext.Clear">
            <summary>
            清空上下文数据
            </summary>
        </member>
        <member name="P:Rafy.AppContext.CurrentPrincipal">
            <summary>
            可获取或设置当前的身份。
            </summary>
        </member>
        <member name="P:Rafy.AppContext.Items">
            <summary>
            当前上下文中的所有数据
            </summary>
        </member>
    </members>
</doc>
