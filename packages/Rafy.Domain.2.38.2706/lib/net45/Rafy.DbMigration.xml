<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rafy.DbMigration</name>
    </assembly>
    <members>
        <member name="T:Rafy.DbMigration.DbMigration">
            <summary>
            表示一个可升级、可回滚的数据库升级项。
            
            该类及该类的子类需要支持 Xml 序列化，以支持存储到历史库中。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.GetMigrationType">
            <summary>
            是否自动生成的更新项
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.Up">
            <summary>
            数据库升级
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.Down">
            <summary>
            数据库回滚
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigration.AddOperation(Rafy.DbMigration.MigrationOperation)">
            <summary>
            在 Up/Down 方法中调用此方法来添加迁移操作。
            </summary>
            <param name="operation"></param>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.TimeId">
            <summary>
            本次迁移对应的时间点。
            </summary>
            <value>
            The time unique identifier.
            </value>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.Description">
            <summary>
            迁移描述。
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Rafy.DbMigration.DbMigration.MigrationType">
            <summary>
            返回当前更新项的类型
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.MigrationType">
            <summary>
            迁移类型
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.MigrationType.AutoMigration">
            <summary>
            自动生成的更新项
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.MigrationType.ManualMigration">
            <summary>
            手工更新项
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationContext">
            <summary>
            支持功能：
            * 根据目标 Schema 自动升级
                此时可配置是否考虑数据丢失。
            * 手工更新
            * 升级历史日志功能
                根据历史记录回滚、再次升级
                客户端根据开发人员的历史记录升级自己的自己的数据库。
            * 防止数据丢失
                配置是否执行丢失操作。
                配置是否忽略数据丢失。
            * 数据库删除、备份、还原
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DbMigrationContext.TimeIdSpan">
            <summary>
            保证 TimeId 之间的间隔在 10ms 以上
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateTo(Rafy.DbMigration.Model.DestinationDatabase)">
            <summary>
            自动移植到目标结构
            注意，自动迁移时，同样执行相应时间段的手工迁移。
            </summary>
            <param name="destination">目标结构</param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateManually">
            <summary>
            使用场景：如果只是使用手工更新，可以调用此方法完成。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.JumpToHistory(System.DateTime)">
            <summary>
            直接跳转到某个时间点的数据库
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateToHistory(System.DateTime)">
            <summary>
            只使用历史记录来升级到指定的时间点
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackToHistory(System.DateTime,Rafy.DbMigration.RollbackAction)">
            <summary>
            回滚到指定时间
            </summary>
            <param name="time">The time.</param>
            <param name="rollbackAction">The rollback action.</param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackAll(Rafy.DbMigration.RollbackAction)">
            <summary>
            全部回滚历史记录
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.JumpToHistory(System.String)">
            <summary>
            直接跳转到某个时间点的数据库
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.MigrateToHistory(System.String)">
            <summary>
            只使用历史记录来升级到指定的时间点
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.RollbackToHistory(System.String,Rafy.DbMigration.RollbackAction)">
            <summary>
            回滚到指定时间
            </summary>
            <param name="time">The time.</param>
            <param name="rollbackAction">The rollback action.</param>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.GetDbVersion">
            <summary>
            获取数据库当前的版本号
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.ResetDbVersion">
            <summary>
            把当前数据库的版本号设置为初始状态。
            
            调用此方法后，会导致：所有手动迁移再次运行。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.GetHistories">
            <summary>
            获取当前所有的历史项
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.HasNoHistory">
            <summary>
            判断当前库的版本号是否处于最开始的状态。
            暂时把这个判断封装在方法内，以应对未来可能的 DefaultMinTime 变化
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.ResetHistory">
            <summary>
            删除所有历史记录
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.DatabaseExists">
            <summary>
            是否存在
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationContext.DeleteDatabase">
            <summary>
            删除数据库
            以及它的历史信息、版本号信息。
            
            注意，如果需要保留整个历史库的升级信息，请使用 MigrateTo(RemovedDatabase) 方法。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbName">
            <summary>
            数据库的名称
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.ManualMigrations">
            <summary>
            存储所有可用的手工更新
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.HistoryRepository">
            <summary>
            此属性如果为 null，表示不需要记录更新日志。
            也就是说每次都是根据数据库当前版本号来进行完整对比升级。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.DbVersionProvider">
            <summary>
            数据库版本号管理提供程序
            当纯粹使用手工更新时，可以只重写此属性而不重写 HistoryRepository 属性。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.RunDataLossOperation">
            <summary>
            是否在自动迁移过程中执行 删除表、删除列 的操作。
            
            默认为 None，表示不执行任何数据丢失的操作。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationContext.SupportHistory">
            <summary>
            当前是否支持历史操作
            </summary>
        </member>
        <member name="E:Rafy.DbMigration.DbMigrationContext.ItemMigrated">
            <summary>
            每一个项成功升级后的通知事件。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.MigratedEventArgs">
            <summary>
            每一个项成功升级后的通知事件参数
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.MigratedEventArgs.Index">
            <summary>
            当前项的索引
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.MigratedEventArgs.TotalCount">
            <summary>
            所有需要升级的项的总和
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.RollbackAction">
            <summary>
            回滚数据库时的行为
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.RollbackAction.None">
            <summary>
            不回滚。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.RollbackAction.DeleteHistory">
            <summary>
            在回滚的同时删除数据库中的历史记录
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DataLossOperation">
            <summary>
            造成数据丢失的操作。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.None">
            <summary>
            不执行丢失数据的操作。
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.DropTable">
            <summary>
            删除表
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.DropColumn">
            <summary>
            删除列
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DataLossOperation.All">
            <summary>
            所有操作。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationSettings">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.DbMigrationSettings.PKFKDataTypeLength">
            <summary>
            可设置所有主键及外键的长度。 默认为 40。
            http://stackoverflow.com/questions/2863993/is-of-a-type-that-is-invalid-for-use-as-a-key-column-in-an-index
            SqlServer 主键最大 450、Oracle 主键最大 400。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.DbMetaReader">
            <summary>
            数据库的元数据读取器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.IMetadataReader">
            <summary>
            数据库 Schema 的读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.IMetadataReader.Read">
            <summary>
            读取整个库的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllTables(Rafy.DbMigration.Model.Database)">
            <summary>
            添加所有表
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllColumns(Rafy.DbMigration.Model.Database)">
            <summary>
            加载每个表的所有列
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.LoadAllConstraints(Rafy.DbMigration.Model.Database)">
            <summary>
            加载外键
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.DbMetaReader.DealColumnConstraints(Rafy.DbMigration.Model.Column,System.Collections.Generic.IList{Rafy.DbMigration.DbMetaReader.Constraint})">
            <summary>
            处理主键和外键
            </summary>
            <param name="column"></param>
            <param name="allConstraints">所有的约束</param>
        </member>
        <member name="T:Rafy.DbMigration.DbMigrationProvider">
            <summary>
            数据库迁移的提供器。
            
            各种不同的数据库使用不同的提供器程序。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateSchemaReader">
            <summary>
            创建一个数据库结构读取器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateRunGenerator">
            <summary>
            创建一个执行生成器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.DbMigrationProvider.CreateDbBackuper">
            <summary>
            创建一个数据库备份器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rafy.DbMigration.DbMigrationProvider.DbSetting">
            <summary>
            该提供器可用的数据库信息
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.DbTypeHelper.GetDefaultValue(System.Data.DbType)">
            <summary>
            获取type的默认值sql表达式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleDbTypeHelper.ConvertToOracleTypeString(System.Data.DbType,System.String)">
            <summary>
            把 DbType 转换为 Oracle 中的数据类型
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleDbTypeHelper.ConvertFromOracleTypeString(System.String)">
            <summary>
            把 Oracle 中的数据类型 转换为 DbType
            </summary>
            <param name="lowerSqlType">Type of the lower SQL.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleMetaReader">
            <summary>
            Oracle 数据库的元数据读取器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleRunGenerator">
            <summary>
            Oracle 的执行项生成器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.TSqlRunGenerator">
            <summary>
            T-SQL 生成的基类
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.RunGenerator">
            <summary>
            数据库执行项 MigrationRun 的生成器
            
            子类继承此类以实现不同类型数据库对指定数据库操作的执行项生成。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.Distribute(Rafy.DbMigration.MigrationOperation)">
            <summary>
            把抽象的操作分发到具体的生成方法上。
            </summary>
            <param name="op"></param>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.Writer">
            <summary>
            获取一个缩进的 TextWriter 用于写 SQL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.AddRun(System.CodeDom.Compiler.IndentedTextWriter)">
            <summary>
            添加一个 SQL 语句的执行项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Rafy.DbMigration.RunGenerator.AddRun(Rafy.DbMigration.MigrationRun)">
            <summary>
            添加一个执行项
            </summary>
            <param name="run"></param>
        </member>
        <member name="M:Rafy.DbMigration.TSqlRunGenerator.GenerateColumnDeclaration(System.CodeDom.Compiler.IndentedTextWriter,System.String,System.Data.DbType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Generates the column declaration.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="columnName">Name of the column.</param>
            <param name="dataType">Type of the data.</param>
            <param name="length">The length.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="isPKorFK">在没有给出字段长度的情况下，如果这个字段是一个主键或外键，则需要自动限制它的长度。</param>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleRunGenerator.PrepareFKConstraintName(Rafy.DbMigration.Operations.FKConstraintOperation)">
            <summary>
            由于 Oracle 中 FK 最长是 30 个字符，所以这里需要对多余的字符串做截取操作。
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Oracle.OracleMigrationProvider">
            <summary>
            Oracle 的数据库迁移提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Oracle.OracleMigrationProvider.LimitOracleIdentifier(System.String)">
            <summary>
            Oracle 的标识符都不能超过 30 个字符。这个方法可以把传入的字符串剪裁到 30 个字符，并尽量保持信息。
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.MigrationRun">
            <summary>
            代表每一个数据库升级执行项
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.MigrationRun.Run(Rafy.Data.IDbAccesser)">
            <summary>
            通过指定的数据库连接执行
            </summary>
            <param name="db"></param>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.CreateDbMigrationRun.CommonUtils">
            <summary>
            本类完全 Copy 自 System.Data.SqlServerCe 程序集
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeMigrationProvider">
            <summary>
            SqlServer CE4 的数据库迁移提供程序
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeRunGenerator">
            <summary>
            SqlServer 的执行项生成器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerRunGenerator">
            <summary>
            SqlServer 的执行项生成器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.History.DbVersionProvider">
            <summary>
            版本号提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.History.DbVersionProvider.IsEmbaded">
            <summary>
            当前的值是否直接存储在当前数据库中。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.History.EmbadedDbVersionProvider">
            <summary>
            在当前数据库中直接嵌入一张表作为版本号存储地址的提供程序。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.ManualDbMigration">
            <summary>
            表示一个可升级、可回滚的用户数据库升级项。
            
            该类及该类的子类需要支持 Xml 序列化，以支持存储到历史库中。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.DbSetting">
            <summary>
            对应的数据库
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.Type">
            <summary>
            手工迁移的类型：结构/数据。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.ManualDbMigration.TimeId">
            <summary>
            从类的命名中获取该更新的时间点。手工更新必须使用以下格式命名类：“_20110107_093040_ClassName”。
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">手工更新必须使用以下格式命名类：“_20110107_093040_ClassName”。</exception>
        </member>
        <member name="T:Rafy.DbMigration.ManualMigrationType">
            <summary>
            手动升级的类型
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.ManualMigrationType.Schema">
            <summary>
            手动结构升级
            </summary>
        </member>
        <member name="F:Rafy.DbMigration.ManualMigrationType.Data">
            <summary>
            手动数据升级
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.DestinationDatabase">
            <summary>
            用于自动升级的目标数据库
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.Database">
            <summary>
            表示一个数据库的 Schema 定义
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Database.FindTable(System.String)">
            <summary>
            通过表名找到对应的表。
            忽略大小写。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Database.OrderByRelations">
            <summary>
            根据外键关系为表排序
            有外键关系的表放在后面，没有关系的表放在前面。（被引用的表放在引用表的前面。）
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Name">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Removed">
            <summary>
            数据库并不存在
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Database.Tables">
            <summary>
            数据库中所包含的表
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.DestinationDatabase.IsIgnored(System.String)">
            <summary>
            判断某个表是否已经被忽略升级。
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Rafy.DbMigration.Model.DestinationDatabase.IgnoreTables">
            <summary>
            在自动升级过程中，需要忽略掉的表的列表。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.ModelDiffer.Distinguish(Rafy.DbMigration.Model.Database,Rafy.DbMigration.Model.DestinationDatabase)">
            <summary>
            计算出两个数据库元数据的所有表差别
            </summary>
            <param name="oldDatabase">旧数据库</param>
            <param name="newDatabase">新数据库</param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.ModelDiffer.Distinguish(Rafy.DbMigration.Model.Table,Rafy.DbMigration.Model.Table)">
            <summary>
            计算出新旧表之间的数据列差别
            </summary>
            <param name="oldTable">旧表</param>
            <param name="newTable">新表</param>
            <returns>
            返回表之间区别，如果没有区别，则返回null
            </returns>
        </member>
        <member name="T:Rafy.DbMigration.History.HistoryItem">
            <summary>
            数据库版本迁移历史记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.TimeId">
            <summary>
            唯一的时间标记
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.IsGenerated">
            <summary>
            是否自动生成
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.MigrationClass">
            <summary>
            对应的 MigrationClass 类全名
            
            注意：
            如果该类在运行时找不到（可能被升级或改名），那么这条历史记录将会被忽略。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.MigrationContent">
            <summary>
            MigrationClass 类的对象的 xml 序列化数据。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.History.HistoryItem.DataObject">
            <summary>
            为实现层实现本类的存储，
            数据层真正的存储对象可以临时存储在这个字段中。
            
            此字段不需要存储到数据库中。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.History.HistoryRepository">
            <summary>
            历史记录提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.AddAsExecuted(System.String,Rafy.DbMigration.DbMigration)">
            <summary>
            当某个迁移操作升级完成后，为它添加相应的历史记录。
            </summary>
            <param name="database"></param>
            <param name="migration"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.TryRestore(Rafy.DbMigration.History.HistoryItem)">
            <summary>
            从历史记录中还原迁移对象
            </summary>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.GetHistoriesCore(System.String)">
            <summary>
            获取指定数据库的所有历史记录
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.AddHistoryCore(System.String,Rafy.DbMigration.History.HistoryItem)">
            <summary>
            为指定数据库添加历史记录。
            </summary>
            <param name="database"></param>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.History.HistoryRepository.RemoveHistoryCore(System.String,Rafy.DbMigration.History.HistoryItem)">
            <summary>
            为指定数据库删除某条历史记录。
            </summary>
            <param name="database"></param>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.Model.ChangeType">
            <summary>
            更改类型
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Table">
            <summary>
            所属表
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.DataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Length">
            <summary>
            可指定列的长度
            可以指定数字，或者 MAX。
            如果是空，则使用默认长度。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsRequired">
            <summary>
            是否必须的
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsPrimaryKey">
            <summary>
            是否主键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsForeignKey">
            <summary>
            获取是否外键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.IsIdentity">
            <summary>
            表示这个主键列是否为自增列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Column.ForeignConstraint">
            <summary>
            如果是外键，这表示外键表
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.ColumnChanges">
            <summary>
            两个列的区别记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.OldColumn">
            <summary>
            旧列
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.NewColumn">
            <summary>
            新列
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsRequiredChanged">
            <summary>
            是否更新了是否为空的设定
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsPrimaryKeyChanged">
            <summary>
            是否是主键改变
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.IsDbTypeChanged">
            <summary>
            是否是类型改变
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ColumnChanges.ForeignRelationChangeType">
            <summary>
            添加/删除/修改了 外键关系
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.DatabaseChanges">
            <summary>
            数据库的变更记录
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.IDestinationDatabaseReader">
            <summary>
            目标数据库 Schema 的读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.IDestinationDatabaseReader.Read">
            <summary>
            读取整个库的元数据
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.MigrationOperation">
            <summary>
            Operation 表示一个数据库升级的最小操作。
            同时，Operation 同样可以是一个单独的数据库升级项，所以它继承自 DbMigration。
            
            Operation 存在的意义是把数据库操作抽象化，以方便跨库。
            
            同时，所有的 MigrationOperation 作为迁移对象时，表示自动迁移。
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.MigrationOperation.Up">
            <summary>
            升级时，生成的操作即是本身。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.AutomationMigration">
            <summary>
            职责：通过数据库变更记录来生成迁移操作列表
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.DependentTable">
            <summary>
            FK Table
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.DependentTableColumn">
            <summary>
            FK Table Column
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.PrincipleTable">
            <summary>
            PK Table
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.FKConstraintOperation.PrincipleTableColumn">
            <summary>
            PK Table Column
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Operations.RunAction">
            <summary>
            操作执行某个具体的代码段
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKName">
            <summary>
            如果有主键，则这个字段表示主键的名称
            目前只简单地支持单一主键
            
            注意，这个主键目前还会是自增长的列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKDataType">
            <summary>
            如果有主键，则这个字段表示主键的名称
            目前只简单地支持单一主键
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKLength">
            <summary>
            主键列的长度。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Operations.TableOperation.PKIdentity">
            <summary>
            主键是否为自增列。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Operations.RunSql">
            <summary>
            该操作需要执行某个特定的 SQL
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServerCe.SqlServerCeMetaReader">
            <summary>
            SqlServer CE 数据库的元数据读取器
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerMetaReader">
            <summary>
            SqlServer 2005 数据库的元数据读取器
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.LoadAllTables(Rafy.DbMigration.Model.Database)">
            <summary>
            添加所有表
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.LoadAllColumns(Rafy.DbMigration.Model.Database)">
            <summary>
            加载每个表的所有列
            </summary>
            <param name="database"></param>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlServerMetaReader.ReadAllIdentities">
            <summary>
            查询当前数据库中所有的 Identity 列。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rafy.DbMigration.ActionMigrationRun">
            <summary>
            执行某段特定的代码
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.GenerationExceptionRun">
            <summary>
            在 Generate 的过程中最好不要出现异常，可以使用此类来延迟异常出现在运行过程中。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.SqlServer.SqlServerMigrationProvider">
            <summary>
            SqlServer 2008 的数据库迁移提供程序
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlDbTypeHelper.ConvertToSQLTypeString(System.Data.DbType,System.String)">
            <summary>
            把 DbType 转换为 SqlServer 中的数据类型
            </summary>
            <param name="fieldType">Type of the field.</param>
            <param name="length">The length.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Rafy.DbMigration.SqlServer.SqlDbTypeHelper.ConvertFromSQLTypeString(System.String)">
            <summary>
            把 SqlServer 中的数据类型 转换为 DbType
            </summary>
            <param name="sqlType">Type of the SQL.</param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="T:Rafy.DbMigration.Model.ForeignConstraint">
            <summary>
            表示某列对应外键关系
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.ForeignConstraint.#ctor(Rafy.DbMigration.Model.Column)">
            <summary>
            
            </summary>
            <param name="primaryKeyColumn">这个外键对应的主键表的列（不一定是主键列，可以是unique列等）</param>
        </member>
        <member name="M:Rafy.DbMigration.Model.ForeignConstraint.Init(Rafy.DbMigration.Model.Column)">
            <summary>
            
            </summary>
            <param name="fkColumn">这个列的外键</param>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.ConstraintName">
            <summary>
            约束名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.FKColumn">
            <summary>
            外键关系的所有者，外键列。
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.PKColumn">
            <summary>
            这个外键对应的主键表的列（不一定是主键列，可以是unique列等）
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.NeedDeleteCascade">
            <summary>
            是否级联删除
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.ForeignConstraint.PKTable">
            <summary>
            这个外键对应的主键表
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.Table">
            <summary>
            表示数据库表的 Schema 定义
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindPrimaryColumn">
            <summary>
            找到第一个主键定义
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindNormalColumns">
            <summary>
            找到除主键外的所有列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.GetForeignTables">
            <summary>
            这个表引用的外键表
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.FindColumn(System.String)">
            <summary>
            通过列名找到对应的列
            忽略大小写。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rafy.DbMigration.Model.Table.AddColumn(System.String,System.Data.DbType,System.String,System.Boolean,System.Boolean,Rafy.DbMigration.Model.ForeignConstraint)">
            <summary>
            添加一列到这个表中。
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="length">The length.</param>
            <param name="isRequired">if set to <c>true</c> [is required].</param>
            <param name="isPrimaryKey">if set to <c>true</c> [is primary key].</param>
            <param name="foreignConstraint">The foreign constraint.</param>
            <returns></returns>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.DataBase">
            <summary>
            所在的数据库 Schema
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.Table.Columns">
            <summary>
            表中的所有列定义
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.Model.TableChanges">
            <summary>
            两个表的变更记录
            </summary>
        </member>
        <member name="P:Rafy.DbMigration.Model.TableChanges.ChangeType">
            <summary>
            当表的字段被增/删/改了，则这个值为Changed。
            其它则是表示表被删除/增加。
            </summary>
        </member>
        <member name="T:Rafy.DbMigration.ManualMigrationsContainer">
            <summary>
            手工迁移操作的容器对象
            </summary>
        </member>
        <member name="M:Rafy.DbMigration.ManualMigrationsContainer.OnInit">
            <summary>
            子类重写此方法并调用 AddByAssembly 方法来自动添加某个程序集类所有对应该数据库的手工迁移
            </summary>
        </member>
    </members>
</doc>
